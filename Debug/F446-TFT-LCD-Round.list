
F446-TFT-LCD-Round.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800393c  0800393c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003944  08003944  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c410  2000005c  080039a8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c46c  080039a8  0002c46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a599  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6e  00000000  00000000  0002a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f9  00000000  00000000  0002c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021eb4  00000000  00000000  0002d0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c04e  00000000  00000000  0004ef9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca78a  00000000  00000000  0005afeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029b4  00000000  00000000  00125778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0012812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080037e8 	.word	0x080037e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080037e8 	.word	0x080037e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <color565>:
#define MADCTL_BGR 0x08 ///< Blue-Green-Red pixel order
#define MADCTL_MH 0x04  ///< LCD refresh right to left



static inline uint16_t color565(uint8_t red, uint8_t green, uint8_t blue) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	460b      	mov	r3, r1
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	4613      	mov	r3, r2
 80005cc:	717b      	strb	r3, [r7, #5]
  return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005d8:	f023 0307 	bic.w	r3, r3, #7
 80005dc:	b21a      	sxth	r2, r3
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	b29b      	uxth	r3, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <set_spi_datasize>:
    dest[i] = __builtin_bswap16(src[i]);
  }
}


static inline void set_spi_datasize(SPI_HandleTypeDef *hspi, uint32_t data_size) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  hspi1.Init.DataSize = data_size;
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <set_spi_datasize+0x7c>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	60d3      	str	r3, [r2, #12]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000632:	431a      	orrs	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	f003 0302 	and.w	r3, r3, #2
 800063c:	431a      	orrs	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	431a      	orrs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000664:	ea42 0103 	orr.w	r1, r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800066c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	430a      	orrs	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
                                    (hspi->Init.CLKPhase & SPI_CR1_CPHA) |
                                    (hspi->Init.NSS & SPI_CR1_SSM) |
                                    (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                    (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                    (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	2001c27c 	.word	0x2001c27c

08000688 <start_spi_transaction>:


static inline void start_spi_transaction() {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TFT_CS_GPIO, TFT_CS_PIN, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <start_spi_transaction+0x14>)
 8000692:	f000 ffd5 	bl	8001640 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020400 	.word	0x40020400

080006a0 <end_spi_transaction>:

static inline void end_spi_transaction() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TFT_CS_GPIO, TFT_CS_PIN, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <end_spi_transaction+0x14>)
 80006aa:	f000 ffc9 	bl	8001640 <HAL_GPIO_WritePin>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40020400 	.word	0x40020400

080006b8 <transmit_command>:

static inline void transmit_command(uint8_t command) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  // set DC pin to LOW, enter command mode
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <transmit_command+0x38>)
 80006ca:	f000 ffb9 	bl	8001640 <HAL_GPIO_WritePin>

  // send command
  HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 80006ce:	1df9      	adds	r1, r7, #7
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2201      	movs	r2, #1
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <transmit_command+0x3c>)
 80006d6:	f001 fdb8 	bl	800224a <HAL_SPI_Transmit>

  // set DC pin to HIGH, return to data mode
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <transmit_command+0x38>)
 80006e2:	f000 ffad 	bl	8001640 <HAL_GPIO_WritePin>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40020000 	.word	0x40020000
 80006f4:	2001c27c 	.word	0x2001c27c

080006f8 <transmit_data>:

static inline void transmit_data(size_t n, uint16_t *data) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)data, n, 100);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	b29a      	uxth	r2, r3
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	6839      	ldr	r1, [r7, #0]
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <transmit_data+0x20>)
 800070c:	f001 fd9d 	bl	800224a <HAL_SPI_Transmit>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2001c27c 	.word	0x2001c27c

0800071c <configure_param>:


void configure_param(uint8_t command, uint8_t *data, uint8_t n_data) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
  start_spi_transaction();
 800072c:	f7ff ffac 	bl	8000688 <start_spi_transaction>

  set_spi_datasize(&hspi1, SPI_DATASIZE_8BIT);
 8000730:	2100      	movs	r1, #0
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <configure_param+0x40>)
 8000734:	f7ff ff68 	bl	8000608 <set_spi_datasize>

  transmit_command(command);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffbc 	bl	80006b8 <transmit_command>

  // write param value
  HAL_SPI_Transmit(&hspi1, (uint8_t *)data, n_data, 100);
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	b29a      	uxth	r2, r3
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <configure_param+0x40>)
 800074a:	f001 fd7e 	bl	800224a <HAL_SPI_Transmit>

  end_spi_transaction();
 800074e:	f7ff ffa7 	bl	80006a0 <end_spi_transaction>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2001c27c 	.word	0x2001c27c

08000760 <set_addr_window>:


void set_addr_window(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	4604      	mov	r4, r0
 8000768:	4608      	mov	r0, r1
 800076a:	4611      	mov	r1, r2
 800076c:	461a      	mov	r2, r3
 800076e:	4623      	mov	r3, r4
 8000770:	80fb      	strh	r3, [r7, #6]
 8000772:	4603      	mov	r3, r0
 8000774:	80bb      	strh	r3, [r7, #4]
 8000776:	460b      	mov	r3, r1
 8000778:	807b      	strh	r3, [r7, #2]
 800077a:	4613      	mov	r3, r2
 800077c:	803b      	strh	r3, [r7, #0]
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	3b01      	subs	r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	81fb      	strh	r3, [r7, #14]
 800078c:	88ba      	ldrh	r2, [r7, #4]
 800078e:	883b      	ldrh	r3, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	b29b      	uxth	r3, r3
 8000794:	3b01      	subs	r3, #1
 8000796:	b29b      	uxth	r3, r3
 8000798:	81bb      	strh	r3, [r7, #12]

  set_spi_datasize(&hspi1, SPI_DATASIZE_8BIT);
 800079a:	2100      	movs	r1, #0
 800079c:	481b      	ldr	r0, [pc, #108]	; (800080c <set_addr_window+0xac>)
 800079e:	f7ff ff33 	bl	8000608 <set_spi_datasize>
  transmit_command(GC9A01A_CASET); // Column address set
 80007a2:	202a      	movs	r0, #42	; 0x2a
 80007a4:	f7ff ff88 	bl	80006b8 <transmit_command>

  set_spi_datasize(&hspi1, SPI_DATASIZE_16BIT);
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <set_addr_window+0xac>)
 80007ae:	f7ff ff2b 	bl	8000608 <set_spi_datasize>
  transmit_data(1, &x1);
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	4619      	mov	r1, r3
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff ff9e 	bl	80006f8 <transmit_data>
  transmit_data(1, &x2);
 80007bc:	f107 030e 	add.w	r3, r7, #14
 80007c0:	4619      	mov	r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff98 	bl	80006f8 <transmit_data>

  set_spi_datasize(&hspi1, SPI_DATASIZE_8BIT);
 80007c8:	2100      	movs	r1, #0
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <set_addr_window+0xac>)
 80007cc:	f7ff ff1c 	bl	8000608 <set_spi_datasize>
  transmit_command(GC9A01A_RASET); // Row address set
 80007d0:	202b      	movs	r0, #43	; 0x2b
 80007d2:	f7ff ff71 	bl	80006b8 <transmit_command>

  set_spi_datasize(&hspi1, SPI_DATASIZE_16BIT);
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <set_addr_window+0xac>)
 80007dc:	f7ff ff14 	bl	8000608 <set_spi_datasize>
  transmit_data(1, &y1);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff ff87 	bl	80006f8 <transmit_data>
  transmit_data(1, &y2);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff81 	bl	80006f8 <transmit_data>

  set_spi_datasize(&hspi1, SPI_DATASIZE_8BIT);
 80007f6:	2100      	movs	r1, #0
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <set_addr_window+0xac>)
 80007fa:	f7ff ff05 	bl	8000608 <set_spi_datasize>
  transmit_command(GC9A01A_RAMWR); // Write to RAM
 80007fe:	202c      	movs	r0, #44	; 0x2c
 8000800:	f7ff ff5a 	bl	80006b8 <transmit_command>
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	2001c27c 	.word	0x2001c27c

08000810 <draw_pixel>:


void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
 800081a:	460b      	mov	r3, r1
 800081c:	80bb      	strh	r3, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	807b      	strh	r3, [r7, #2]
  start_spi_transaction();
 8000822:	f7ff ff31 	bl	8000688 <start_spi_transaction>

  set_addr_window(x, y, 1, 1);
 8000826:	88f8      	ldrh	r0, [r7, #6]
 8000828:	88b9      	ldrh	r1, [r7, #4]
 800082a:	2301      	movs	r3, #1
 800082c:	2201      	movs	r2, #1
 800082e:	f7ff ff97 	bl	8000760 <set_addr_window>

  set_spi_datasize(&hspi1, SPI_DATASIZE_16BIT);
 8000832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <draw_pixel+0x44>)
 8000838:	f7ff fee6 	bl	8000608 <set_spi_datasize>
  transmit_data(1, &color);
 800083c:	1cbb      	adds	r3, r7, #2
 800083e:	4619      	mov	r1, r3
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff59 	bl	80006f8 <transmit_data>

  end_spi_transaction();
 8000846:	f7ff ff2b 	bl	80006a0 <end_spi_transaction>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2001c27c 	.word	0x2001c27c

08000858 <draw_pixels>:

void draw_pixels(uint16_t x, uint16_t y, uint16_t *color, uint16_t width, uint16_t height) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60ba      	str	r2, [r7, #8]
 8000860:	461a      	mov	r2, r3
 8000862:	4603      	mov	r3, r0
 8000864:	81fb      	strh	r3, [r7, #14]
 8000866:	460b      	mov	r3, r1
 8000868:	81bb      	strh	r3, [r7, #12]
 800086a:	4613      	mov	r3, r2
 800086c:	80fb      	strh	r3, [r7, #6]
  start_spi_transaction();
 800086e:	f7ff ff0b 	bl	8000688 <start_spi_transaction>

  set_addr_window(x, y, width, height);
 8000872:	8c3b      	ldrh	r3, [r7, #32]
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	89b9      	ldrh	r1, [r7, #12]
 8000878:	89f8      	ldrh	r0, [r7, #14]
 800087a:	f7ff ff71 	bl	8000760 <set_addr_window>

  uint16_t *data_ptr = color;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	617b      	str	r3, [r7, #20]

  set_spi_datasize(&hspi1, SPI_DATASIZE_16BIT);
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <draw_pixels+0x68>)
 8000888:	f7ff febe 	bl	8000608 <set_spi_datasize>
  for (size_t i = 0; i < height; i += 1) {    // For each scanline...
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	e00c      	b.n	80008ac <draw_pixels+0x54>
    transmit_data(width, data_ptr);           // Push one row
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	6979      	ldr	r1, [r7, #20]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff2e 	bl	80006f8 <transmit_data>
    data_ptr += width;                        // Advance pointer by one full line
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	4413      	add	r3, r2
 80008a4:	617b      	str	r3, [r7, #20]
  for (size_t i = 0; i < height; i += 1) {    // For each scanline...
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	3301      	adds	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	8c3b      	ldrh	r3, [r7, #32]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3ee      	bcc.n	8000892 <draw_pixels+0x3a>
  }

  end_spi_transaction();
 80008b4:	f7ff fef4 	bl	80006a0 <end_spi_transaction>
}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2001c27c 	.word	0x2001c27c

080008c4 <draw_screen>:

void draw_screen(uint16_t *img) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  draw_pixels(0, 0, img, WIDTH, HEIGHT);
 80008cc:	23f0      	movs	r3, #240	; 0xf0
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	23f0      	movs	r3, #240	; 0xf0
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff ffbe 	bl	8000858 <draw_pixels>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <APP_init>:

uint16_t img[240 * 240];
uint8_t counter;


void APP_init() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0a6      	sub	sp, #152	; 0x98
 80008e8:	af00      	add	r7, sp, #0
  char str[128];

  sprintf(str, "GC9A01A Test!\n");
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	494c      	ldr	r1, [pc, #304]	; (8000a20 <APP_init+0x13c>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fad6 	bl	8002ea0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc8a 	bl	8000210 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	1d39      	adds	r1, r7, #4
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	4847      	ldr	r0, [pc, #284]	; (8000a24 <APP_init+0x140>)
 8000906:	f001 ff0f 	bl	8002728 <HAL_UART_Transmit>

  // digitalWrite(TFT_CS, HIGH); // Deselect
  HAL_GPIO_WritePin(TFT_CS_GPIO, TFT_CS_PIN, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4846      	ldr	r0, [pc, #280]	; (8000a28 <APP_init+0x144>)
 8000910:	f000 fe96 	bl	8001640 <HAL_GPIO_WritePin>

  // digitalWrite(TFT_DC, HIGH); // Data mode
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	4844      	ldr	r0, [pc, #272]	; (8000a2c <APP_init+0x148>)
 800091c:	f000 fe90 	bl	8001640 <HAL_GPIO_WritePin>


  // digitalWrite(TFT_RST, LOW);
  HAL_GPIO_WritePin(TFT_RST_GPIO, TFT_RST_PIN, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	4841      	ldr	r0, [pc, #260]	; (8000a2c <APP_init+0x148>)
 8000928:	f000 fe8a 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f000 fbe9 	bl	8001104 <HAL_Delay>
  // digitalWrite(TFT_RST, HIGH);
  HAL_GPIO_WritePin(TFT_RST_GPIO, TFT_RST_PIN, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <APP_init+0x148>)
 800093a:	f000 fe81 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800093e:	2064      	movs	r0, #100	; 0x64
 8000940:	f000 fbe0 	bl	8001104 <HAL_Delay>


  uint8_t x, numArgs;
  uint8_t *addr = initcmd;
 8000944:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <APP_init+0x14c>)
 8000946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint8_t cmd = *addr;
 800094a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

  while (cmd > 0) {
 8000954:	e030      	b.n	80009b8 <APP_init+0xd4>
    cmd = *addr;
 8000956:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    addr += 1;
 8000960:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000964:	3301      	adds	r3, #1
 8000966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    x = *addr;
 800096a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    addr += 1;
 8000974:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000978:	3301      	adds	r3, #1
 800097a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    numArgs = x & 0x7F;
 800097e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000986:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
    configure_param(cmd, addr, numArgs);
 800098a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800098e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000992:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fec0 	bl	800071c <configure_param>
    addr += numArgs;
 800099c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80009a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80009a4:	4413      	add	r3, r2
 80009a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (x & 0x80)
 80009aa:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	da02      	bge.n	80009b8 <APP_init+0xd4>
      HAL_Delay(150);
 80009b2:	2096      	movs	r0, #150	; 0x96
 80009b4:	f000 fba6 	bl	8001104 <HAL_Delay>
  while (cmd > 0) {
 80009b8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1ca      	bne.n	8000956 <APP_init+0x72>
  }

//  digitalWrite(TFT_BL, HIGH); // Backlight on
  HAL_GPIO_WritePin(TFT_BL_GPIO, TFT_BL_PIN, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	481b      	ldr	r0, [pc, #108]	; (8000a34 <APP_init+0x150>)
 80009c6:	f000 fe3b 	bl	8001640 <HAL_GPIO_WritePin>


  for (size_t r = 0; r < HEIGHT; r += 1) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80009d0:	e01c      	b.n	8000a0c <APP_init+0x128>
    for (size_t c = 0; c < WIDTH; c += 1) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80009d8:	e00f      	b.n	80009fa <APP_init+0x116>
      draw_pixel(c, r, 0xFFFF);
 80009da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009de:	b21b      	sxth	r3, r3
 80009e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80009e4:	b211      	sxth	r1, r2
 80009e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff10 	bl	8000810 <draw_pixel>
    for (size_t c = 0; c < WIDTH; c += 1) {
 80009f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009f4:	3301      	adds	r3, #1
 80009f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80009fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009fe:	2bef      	cmp	r3, #239	; 0xef
 8000a00:	d9eb      	bls.n	80009da <APP_init+0xf6>
  for (size_t r = 0; r < HEIGHT; r += 1) {
 8000a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a06:	3301      	adds	r3, #1
 8000a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a10:	2bef      	cmp	r3, #239	; 0xef
 8000a12:	d9de      	bls.n	80009d2 <APP_init+0xee>
    }
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3798      	adds	r7, #152	; 0x98
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08003800 	.word	0x08003800
 8000a24:	2001c2d4 	.word	0x2001c2d4
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	08003810 	.word	0x08003810
 8000a34:	40020800 	.word	0x40020800

08000a38 <APP_main>:


void APP_main() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
//  char str[128];
//  sprintf(str, "Done!\n");
//  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);

  for (size_t r = 0; r < HEIGHT; r += 1) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e025      	b.n	8000a90 <APP_main+0x58>
    for (size_t c = 0; c < WIDTH; c += 1) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	e01c      	b.n	8000a84 <APP_main+0x4c>
      size_t idx = r * WIDTH + c;
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	461a      	mov	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	4413      	add	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
      img[idx] = color565(counter, 40, 40 + r / 2);
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <APP_main+0x78>)
 8000a5e:	7818      	ldrb	r0, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	3328      	adds	r3, #40	; 0x28
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2128      	movs	r1, #40	; 0x28
 8000a6e:	f7ff fda5 	bl	80005bc <color565>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <APP_main+0x7c>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t c = 0; c < WIDTH; c += 1) {
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	2bef      	cmp	r3, #239	; 0xef
 8000a88:	d9df      	bls.n	8000a4a <APP_main+0x12>
  for (size_t r = 0; r < HEIGHT; r += 1) {
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2bef      	cmp	r3, #239	; 0xef
 8000a94:	d9d6      	bls.n	8000a44 <APP_main+0xc>
    }
  }

  draw_screen(img);
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <APP_main+0x7c>)
 8000a98:	f7ff ff14 	bl	80008c4 <draw_screen>
//  for (int i=0; i<120; i+=1) {
//    draw_pixel(120, i, color565(255, 128, 0));
//  }


  counter += 1;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <APP_main+0x78>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <APP_main+0x78>)
 8000aa6:	701a      	strb	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2001c278 	.word	0x2001c278
 8000ab4:	20000078 	.word	0x20000078

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 fab0 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f80c 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f000 f8d6 	bl	8000c74 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ac8:	f000 f874 	bl	8000bb4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000acc:	f000 f8a8 	bl	8000c20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000ad0:	f7ff ff08 	bl	80008e4 <APP_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    APP_main();
 8000ad4:	f7ff ffb0 	bl	8000a38 <APP_main>
 8000ad8:	e7fc      	b.n	8000ad4 <main+0x1c>
	...

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f9f8 	bl	8002ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <SystemClock_Config+0xd0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <SystemClock_Config+0xd0>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <SystemClock_Config+0xd0>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b40:	2310      	movs	r3, #16
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8000b50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f848 	bl	8001bfc <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b72:	f000 f8fb 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2105      	movs	r1, #5
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fd6d 	bl	8001674 <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ba0:	f000 f8e4 	bl	8000d6c <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3750      	adds	r7, #80	; 0x50
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f001 fa97 	bl	8002138 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 f8ac 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2001c27c 	.word	0x2001c27c
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f001 fd16 	bl	8002688 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f883 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2001c2d4 	.word	0x2001c2d4
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a24      	ldr	r2, [pc, #144]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_GPIO_Init+0xec>)
 8000ce4:	f000 fcac 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000cee:	481d      	ldr	r0, [pc, #116]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cf0:	f000 fca6 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	481b      	ldr	r0, [pc, #108]	; (8000d68 <MX_GPIO_Init+0xf4>)
 8000cfa:	f000 fca1 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_GPIO_Init+0xec>)
 8000d16:	f000 faff 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000d34:	f000 faf0 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_GPIO_Init+0xf4>)
 8000d50:	f000 fae2 	bl	8001318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_SPI_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_SPI_MspInit+0x8c>)
 8000e3e:	f000 fa6b 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a19      	ldr	r2, [pc, #100]	; (8000edc <HAL_UART_MspInit+0x84>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d12b      	bne.n	8000ed2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_UART_MspInit+0x88>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_UART_MspInit+0x8c>)
 8000ece:	f000 fa23 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f8c6 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f001 ffc0 	bl	8002ef0 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	2001c31c 	.word	0x2001c31c
 8000fa4:	2001c470 	.word	0x2001c470

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f001 ff7f 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fd5b 	bl	8000ab8 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001010:	0800394c 	.word	0x0800394c
  ldr r2, =_sbss
 8001014:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001018:	2001c46c 	.word	0x2001c46c

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f931 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fe90 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f93b 	bl	80012fe <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f911 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	2001c320 	.word	0x2001c320

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2001c320 	.word	0x2001c320

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff47 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff5c 	bl	8001194 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb0 	bl	800126c <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	e165      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8154 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d005      	beq.n	800136a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	2b02      	cmp	r3, #2
 8001368:	d130      	bne.n	80013cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 0201 	and.w	r2, r3, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d017      	beq.n	8001408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	69b9      	ldr	r1, [r7, #24]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ae 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_GPIO_Init+0x300>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a5c      	ldr	r2, [pc, #368]	; (8001618 <HAL_GPIO_Init+0x300>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <HAL_GPIO_Init+0x300>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_GPIO_Init+0x304>)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <HAL_GPIO_Init+0x308>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d025      	beq.n	8001532 <HAL_GPIO_Init+0x21a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <HAL_GPIO_Init+0x30c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d01f      	beq.n	800152e <HAL_GPIO_Init+0x216>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x310>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x212>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	; (800162c <HAL_GPIO_Init+0x314>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x20e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_GPIO_Init+0x318>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x20a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_GPIO_Init+0x31c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x206>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a49      	ldr	r2, [pc, #292]	; (8001638 <HAL_GPIO_Init+0x320>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x202>
 8001516:	2306      	movs	r3, #6
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800151a:	2307      	movs	r3, #7
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	; (800161c <HAL_GPIO_Init+0x304>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_GPIO_Init+0x324>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a31      	ldr	r2, [pc, #196]	; (800163c <HAL_GPIO_Init+0x324>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_GPIO_Init+0x324>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a26      	ldr	r2, [pc, #152]	; (800163c <HAL_GPIO_Init+0x324>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_GPIO_Init+0x324>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_GPIO_Init+0x324>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_GPIO_Init+0x324>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_GPIO_Init+0x324>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae96 	bls.w	8001334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40013c00 	.word	0x40013c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cc      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d90c      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0b8      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	494d      	ldr	r1, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d044      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e07f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d003      	beq.n	8001732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e067      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4934      	ldr	r1, [pc, #208]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fcc2 	bl	80010ec <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fcbe 	bl	80010ec <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e04f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d20c      	bcs.n	80017bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e032      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4916      	ldr	r1, [pc, #88]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	490e      	ldr	r1, [pc, #56]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fa:	f000 f855 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	5ccb      	ldrb	r3, [r1, r3]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fc22 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00
 8001830:	40023800 	.word	0x40023800
 8001834:	080038f0 	.word	0x080038f0
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_RCC_GetHCLKFreq+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800185c:	f7ff fff0 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	0a9b      	lsrs	r3, r3, #10
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4903      	ldr	r1, [pc, #12]	; (800187c <HAL_RCC_GetPCLK1Freq+0x24>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	08003900 	.word	0x08003900

08001880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001884:	f7ff ffdc 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0b5b      	lsrs	r3, r3, #13
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4903      	ldr	r1, [pc, #12]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08003900 	.word	0x08003900

080018a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ac:	b0a6      	sub	sp, #152	; 0x98
 80018ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ce:	4bc8      	ldr	r3, [pc, #800]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	f200 817e 	bhi.w	8001bd8 <HAL_RCC_GetSysClockFreq+0x330>
 80018dc:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	08001919 	.word	0x08001919
 80018e8:	08001bd9 	.word	0x08001bd9
 80018ec:	08001bd9 	.word	0x08001bd9
 80018f0:	08001bd9 	.word	0x08001bd9
 80018f4:	08001921 	.word	0x08001921
 80018f8:	08001bd9 	.word	0x08001bd9
 80018fc:	08001bd9 	.word	0x08001bd9
 8001900:	08001bd9 	.word	0x08001bd9
 8001904:	08001929 	.word	0x08001929
 8001908:	08001bd9 	.word	0x08001bd9
 800190c:	08001bd9 	.word	0x08001bd9
 8001910:	08001bd9 	.word	0x08001bd9
 8001914:	08001a93 	.word	0x08001a93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4bb6      	ldr	r3, [pc, #728]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800191a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800191e:	e15f      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001920:	4bb5      	ldr	r3, [pc, #724]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001926:	e15b      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001928:	4bb1      	ldr	r3, [pc, #708]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001934:	4bae      	ldr	r3, [pc, #696]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d031      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001940:	4bab      	ldr	r3, [pc, #684]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	2200      	movs	r2, #0
 8001948:	66bb      	str	r3, [r7, #104]	; 0x68
 800194a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800194c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800194e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001952:	663b      	str	r3, [r7, #96]	; 0x60
 8001954:	2300      	movs	r3, #0
 8001956:	667b      	str	r3, [r7, #100]	; 0x64
 8001958:	4ba7      	ldr	r3, [pc, #668]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x350>)
 800195a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800195e:	462a      	mov	r2, r5
 8001960:	fb03 f202 	mul.w	r2, r3, r2
 8001964:	2300      	movs	r3, #0
 8001966:	4621      	mov	r1, r4
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	4aa2      	ldr	r2, [pc, #648]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001970:	4621      	mov	r1, r4
 8001972:	fba1 1202 	umull	r1, r2, r1, r2
 8001976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001978:	460a      	mov	r2, r1
 800197a:	67ba      	str	r2, [r7, #120]	; 0x78
 800197c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800197e:	4413      	add	r3, r2
 8001980:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001986:	2200      	movs	r2, #0
 8001988:	65bb      	str	r3, [r7, #88]	; 0x58
 800198a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800198c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001990:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001994:	f7fe fc94 	bl	80002c0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019a2:	e064      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a4:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	2200      	movs	r2, #0
 80019ac:	653b      	str	r3, [r7, #80]	; 0x50
 80019ae:	657a      	str	r2, [r7, #84]	; 0x54
 80019b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80019b8:	2300      	movs	r3, #0
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80019c0:	4622      	mov	r2, r4
 80019c2:	462b      	mov	r3, r5
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0159      	lsls	r1, r3, #5
 80019ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d2:	0150      	lsls	r0, r2, #5
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4621      	mov	r1, r4
 80019da:	1a51      	subs	r1, r2, r1
 80019dc:	6139      	str	r1, [r7, #16]
 80019de:	4629      	mov	r1, r5
 80019e0:	eb63 0301 	sbc.w	r3, r3, r1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f2:	4659      	mov	r1, fp
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fc:	4651      	mov	r1, sl
 80019fe:	018a      	lsls	r2, r1, #6
 8001a00:	4651      	mov	r1, sl
 8001a02:	ebb2 0801 	subs.w	r8, r2, r1
 8001a06:	4659      	mov	r1, fp
 8001a08:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a20:	4690      	mov	r8, r2
 8001a22:	4699      	mov	r9, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	eb18 0303 	adds.w	r3, r8, r3
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	eb49 0303 	adc.w	r3, r9, r3
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a40:	4629      	mov	r1, r5
 8001a42:	028b      	lsls	r3, r1, #10
 8001a44:	4621      	mov	r1, r4
 8001a46:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	028a      	lsls	r2, r1, #10
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a56:	2200      	movs	r2, #0
 8001a58:	643b      	str	r3, [r7, #64]	; 0x40
 8001a5a:	647a      	str	r2, [r7, #68]	; 0x44
 8001a5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a60:	f7fe fc2e 	bl	80002c0 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	0c1b      	lsrs	r3, r3, #16
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a90:	e0a6      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d02a      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001abc:	2100      	movs	r1, #0
 8001abe:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ac0:	fb03 f201 	mul.w	r2, r3, r1
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	fb00 f303 	mul.w	r3, r0, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ace:	fba0 1202 	umull	r1, r2, r0, r2
 8001ad2:	677a      	str	r2, [r7, #116]	; 0x74
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	673a      	str	r2, [r7, #112]	; 0x70
 8001ad8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ada:	4413      	add	r3, r2
 8001adc:	677b      	str	r3, [r7, #116]	; 0x74
 8001ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae6:	637a      	str	r2, [r7, #52]	; 0x34
 8001ae8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001aec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001af0:	f7fe fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001afe:	e05b      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	2200      	movs	r2, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b1c:	4642      	mov	r2, r8
 8001b1e:	464b      	mov	r3, r9
 8001b20:	f04f 0000 	mov.w	r0, #0
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	0159      	lsls	r1, r3, #5
 8001b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2e:	0150      	lsls	r0, r2, #5
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4641      	mov	r1, r8
 8001b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b54:	ebb2 040a 	subs.w	r4, r2, sl
 8001b58:	eb63 050b 	sbc.w	r5, r3, fp
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	00eb      	lsls	r3, r5, #3
 8001b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6a:	00e2      	lsls	r2, r4, #3
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	461d      	mov	r5, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	18e3      	adds	r3, r4, r3
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	464b      	mov	r3, r9
 8001b78:	eb45 0303 	adc.w	r3, r5, r3
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	028b      	lsls	r3, r1, #10
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b94:	4621      	mov	r1, r4
 8001b96:	028a      	lsls	r2, r1, #10
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	61fa      	str	r2, [r7, #28]
 8001ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001baa:	f7fe fb89 	bl	80002c0 <__aeabi_uldivmod>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0f1b      	lsrs	r3, r3, #28
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001bd6:	e003      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3798      	adds	r7, #152	; 0x98
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	017d7840 	.word	0x017d7840

08001bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e28d      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8083 	beq.w	8001d22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c1c:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d019      	beq.n	8001c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c28:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c34:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x124>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d157      	bne.n	8001d20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e25a      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_OscConfig+0x90>
 8001c7e:	4b7c      	ldr	r3, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7b      	ldr	r2, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xcc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xb4>
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xcc>
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fa0c 	bl	80010ec <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fa08 	bl	80010ec <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e21f      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xdc>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f9f8 	bl	80010ec <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff f9f4 	bl	80010ec <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e20b      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x104>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06f      	beq.n	8001e0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d017      	beq.n	8001d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d11c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x186>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1d3      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x278>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f9a1 	bl	80010ec <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff f99d 	bl	80010ec <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1b4      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4925      	ldr	r1, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_OscConfig+0x278>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f980 	bl	80010ec <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff f97c 	bl	80010ec <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e193      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d036      	beq.n	8001e88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f960 	bl	80010ec <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff f95c 	bl	80010ec <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e173      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x234>
 8001e4e:	e01b      	b.n	8001e88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff f949 	bl	80010ec <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	e00e      	b.n	8001e7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff f945 	bl	80010ec <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d907      	bls.n	8001e7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e15c      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470000 	.word	0x42470000
 8001e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b8a      	ldr	r3, [pc, #552]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ea      	bne.n	8001e5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8097 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b76      	ldr	r3, [pc, #472]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff f905 	bl	80010ec <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff f901 	bl	80010ec <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e118      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x31e>
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e01c      	b.n	8001f54 <HAL_RCC_OscConfig+0x358>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x340>
 8001f22:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0x358>
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a56      	ldr	r2, [pc, #344]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d015      	beq.n	8001f88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f8c6 	bl	80010ec <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7ff f8c2 	bl	80010ec <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0d7      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ee      	beq.n	8001f64 <HAL_RCC_OscConfig+0x368>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f8b0 	bl	80010ec <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7ff f8ac 	bl	80010ec <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0c1      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ee      	bne.n	8001f90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80ad 	beq.w	8002128 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d060      	beq.n	800209c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d145      	bne.n	800206e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x4b4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f880 	bl	80010ec <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f87c 	bl	80010ec <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e093      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	3b01      	subs	r3, #1
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	071b      	lsls	r3, r3, #28
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x4b4>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f851 	bl	80010ec <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff f84d 	bl	80010ec <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e064      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x452>
 800206c:	e05c      	b.n	8002128 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_OscConfig+0x4b4>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7ff f83a 	bl	80010ec <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff f836 	bl	80010ec <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04d      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x480>
 800209a:	e045      	b.n	8002128 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e040      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_RCC_OscConfig+0x538>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d030      	beq.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d129      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d122      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d119      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	3b01      	subs	r3, #1
 80020fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d10f      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07b      	b.n	8002242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215a:	d009      	beq.n	8002170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	e005      	b.n	8002170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fe1c 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	ea42 0103 	orr.w	r1, r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0104 	and.w	r1, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f003 0210 	and.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_SPI_Transmit+0x22>
 8002268:	2302      	movs	r3, #2
 800226a:	e12d      	b.n	80024c8 <HAL_SPI_Transmit+0x27e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002274:	f7fe ff3a 	bl	80010ec <HAL_GetTick>
 8002278:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d002      	beq.n	8002290 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800228a:	2302      	movs	r3, #2
 800228c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800228e:	e116      	b.n	80024be <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_SPI_Transmit+0x52>
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022a0:	e10d      	b.n	80024be <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	88fa      	ldrh	r2, [r7, #6]
 80022ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e8:	d10f      	bne.n	800230a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d007      	beq.n	8002328 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002330:	d14f      	bne.n	80023d2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_SPI_Transmit+0xf6>
 800233a:	8afb      	ldrh	r3, [r7, #22]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d142      	bne.n	80023c6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	1c9a      	adds	r2, r3, #2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002364:	e02f      	b.n	80023c6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d112      	bne.n	800239a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
 8002398:	e015      	b.n	80023c6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800239a:	f7fe fea7 	bl	80010ec <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d803      	bhi.n	80023b2 <HAL_SPI_Transmit+0x168>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d102      	bne.n	80023b8 <HAL_SPI_Transmit+0x16e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023c4:	e07b      	b.n	80024be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ca      	bne.n	8002366 <HAL_SPI_Transmit+0x11c>
 80023d0:	e050      	b.n	8002474 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_SPI_Transmit+0x196>
 80023da:	8afb      	ldrh	r3, [r7, #22]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d144      	bne.n	800246a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002406:	e030      	b.n	800246a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d113      	bne.n	800243e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	86da      	strh	r2, [r3, #54]	; 0x36
 800243c:	e015      	b.n	800246a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800243e:	f7fe fe55 	bl	80010ec <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d803      	bhi.n	8002456 <HAL_SPI_Transmit+0x20c>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d102      	bne.n	800245c <HAL_SPI_Transmit+0x212>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d106      	bne.n	800246a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002468:	e029      	b.n	80024be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1c9      	bne.n	8002408 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f8b1 	bl	80025e0 <SPI_EndRxTxTransaction>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	77fb      	strb	r3, [r7, #31]
 80024b4:	e003      	b.n	80024be <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024e0:	f7fe fe04 	bl	80010ec <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024f0:	f7fe fdfc 	bl	80010ec <HAL_GetTick>
 80024f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	0d1b      	lsrs	r3, r3, #20
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002506:	e054      	b.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d050      	beq.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002510:	f7fe fdec 	bl	80010ec <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	429a      	cmp	r2, r3
 800251e:	d902      	bls.n	8002526 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d13d      	bne.n	80025a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800253e:	d111      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002548:	d004      	beq.n	8002554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d107      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256c:	d10f      	bne.n	800258e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800258c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e017      	b.n	80025d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d19b      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2201      	movs	r2, #1
 80025f4:	2102      	movs	r1, #2
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff ff6a 	bl	80024d0 <SPI_WaitFlagStateUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e032      	b.n	8002678 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <SPI_EndRxTxTransaction+0xa0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <SPI_EndRxTxTransaction+0xa4>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002630:	d112      	bne.n	8002658 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff ff47 	bl	80024d0 <SPI_WaitFlagStateUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e00f      	b.n	8002678 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3b01      	subs	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d0f2      	beq.n	8002658 <SPI_EndRxTxTransaction+0x78>
 8002672:	e000      	b.n	8002676 <SPI_EndRxTxTransaction+0x96>
        break;
 8002674:	bf00      	nop
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000000 	.word	0x20000000
 8002684:	165e9f81 	.word	0x165e9f81

08002688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e042      	b.n	8002720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fbd2 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f973 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b20      	cmp	r3, #32
 8002746:	d175      	bne.n	8002834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0x2c>
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e06e      	b.n	8002836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2221      	movs	r2, #33	; 0x21
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002766:	f7fe fcc1 	bl	80010ec <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002780:	d108      	bne.n	8002794 <HAL_UART_Transmit+0x6c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e003      	b.n	800279c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800279c:	e02e      	b.n	80027fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f848 	bl	800283e <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e03a      	b.n	8002836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	3302      	adds	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e007      	b.n	80027ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1cb      	bne.n	800279e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	2140      	movs	r1, #64	; 0x40
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f814 	bl	800283e <UART_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e006      	b.n	8002836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284e:	e03b      	b.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d037      	beq.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002858:	f7fe fc48 	bl	80010ec <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	6a3a      	ldr	r2, [r7, #32]
 8002864:	429a      	cmp	r2, r3
 8002866:	d302      	bcc.n	800286e <UART_WaitOnFlagUntilTimeout+0x30>
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e03a      	b.n	80028e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d023      	beq.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b80      	cmp	r3, #128	; 0x80
 8002884:	d020      	beq.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d01d      	beq.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d116      	bne.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f81d 	bl	80028f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2208      	movs	r2, #8
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e00f      	b.n	80028e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d0b4      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b095      	sub	sp, #84	; 0x54
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	e853 3f00 	ldrex	r3, [r3]
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	330c      	adds	r3, #12
 8002916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002918:	643a      	str	r2, [r7, #64]	; 0x40
 800291a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800291e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002920:	e841 2300 	strex	r3, r2, [r1]
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e5      	bne.n	80028f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3314      	adds	r3, #20
 8002932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	61fb      	str	r3, [r7, #28]
   return(result);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3314      	adds	r3, #20
 800294a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800294c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e5      	bne.n	800292c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	2b01      	cmp	r3, #1
 8002966:	d119      	bne.n	800299c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	60bb      	str	r3, [r7, #8]
   return(result);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f023 0310 	bic.w	r3, r3, #16
 800297e:	647b      	str	r3, [r7, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002988:	61ba      	str	r2, [r7, #24]
 800298a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	6979      	ldr	r1, [r7, #20]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	613b      	str	r3, [r7, #16]
   return(result);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e5      	bne.n	8002968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029aa:	bf00      	nop
 80029ac:	3754      	adds	r7, #84	; 0x54
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b0c0      	sub	sp, #256	; 0x100
 80029be:	af00      	add	r7, sp, #0
 80029c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	ea40 0301 	orr.w	r3, r0, r1
 80029e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a10:	f021 010c 	bic.w	r1, r1, #12
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a32:	6999      	ldr	r1, [r3, #24]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	ea40 0301 	orr.w	r3, r0, r1
 8002a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b8f      	ldr	r3, [pc, #572]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0xa0>
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <UART_SetConfig+0x2d0>)
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d104      	bne.n	8002a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a58:	f7fe ff12 	bl	8001880 <HAL_RCC_GetPCLK2Freq>
 8002a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a60:	e003      	b.n	8002a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a62:	f7fe fef9 	bl	8001858 <HAL_RCC_GetPCLK1Freq>
 8002a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a74:	f040 810c 	bne.w	8002c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	1891      	adds	r1, r2, r2
 8002a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a92:	415b      	adcs	r3, r3
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	eb12 0801 	adds.w	r8, r2, r1
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb43 0901 	adc.w	r9, r3, r1
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	eb18 0303 	adds.w	r3, r8, r3
 8002ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ac8:	462b      	mov	r3, r5
 8002aca:	eb49 0303 	adc.w	r3, r9, r3
 8002ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	18db      	adds	r3, r3, r3
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
 8002aec:	4613      	mov	r3, r2
 8002aee:	eb42 0303 	adc.w	r3, r2, r3
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
 8002af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002afc:	f7fd fbe0 	bl	80002c0 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002b06:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	011c      	lsls	r4, r3, #4
 8002b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	1891      	adds	r1, r2, r2
 8002b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b28:	415b      	adcs	r3, r3
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b30:	4641      	mov	r1, r8
 8002b32:	eb12 0a01 	adds.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb43 0b01 	adc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b50:	4692      	mov	sl, r2
 8002b52:	469b      	mov	fp, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	eb1a 0303 	adds.w	r3, sl, r3
 8002b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb4b 0303 	adc.w	r3, fp, r3
 8002b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	18db      	adds	r3, r3, r3
 8002b80:	643b      	str	r3, [r7, #64]	; 0x40
 8002b82:	4613      	mov	r3, r2
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
 8002b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b92:	f7fd fb95 	bl	80002c0 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	; 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bc0:	441c      	add	r4, r3
 8002bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	1891      	adds	r1, r2, r2
 8002bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bdc:	415b      	adcs	r3, r3
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002be4:	4641      	mov	r1, r8
 8002be6:	1851      	adds	r1, r2, r1
 8002be8:	6339      	str	r1, [r7, #48]	; 0x30
 8002bea:	4649      	mov	r1, r9
 8002bec:	414b      	adcs	r3, r1
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	00cb      	lsls	r3, r1, #3
 8002c00:	4651      	mov	r1, sl
 8002c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c06:	4651      	mov	r1, sl
 8002c08:	00ca      	lsls	r2, r1, #3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4642      	mov	r2, r8
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c18:	464b      	mov	r3, r9
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	eb42 0303 	adc.w	r3, r2, r3
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c4e:	f7fd fb37 	bl	80002c0 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002c58:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	2164      	movs	r1, #100	; 0x64
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	3332      	adds	r3, #50	; 0x32
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	f003 0207 	and.w	r2, r3, #7
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4422      	add	r2, r4
 8002c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c80:	e106      	b.n	8002e90 <UART_SetConfig+0x4d8>
 8002c82:	bf00      	nop
 8002c84:	40011000 	.word	0x40011000
 8002c88:	40011400 	.word	0x40011400
 8002c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	1891      	adds	r1, r2, r2
 8002ca8:	6239      	str	r1, [r7, #32]
 8002caa:	415b      	adcs	r3, r3
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	1854      	adds	r4, r2, r1
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	eb43 0501 	adc.w	r5, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	00eb      	lsls	r3, r5, #3
 8002cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	18e3      	adds	r3, r4, r3
 8002cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cd8:	464b      	mov	r3, r9
 8002cda:	eb45 0303 	adc.w	r3, r5, r3
 8002cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cfe:	4629      	mov	r1, r5
 8002d00:	008b      	lsls	r3, r1, #2
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d08:	4621      	mov	r1, r4
 8002d0a:	008a      	lsls	r2, r1, #2
 8002d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d10:	f7fd fad6 	bl	80002c0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011c      	lsls	r4, r3, #4
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	61b9      	str	r1, [r7, #24]
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d44:	4641      	mov	r1, r8
 8002d46:	1851      	adds	r1, r2, r1
 8002d48:	6139      	str	r1, [r7, #16]
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	414b      	adcs	r3, r1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	00cb      	lsls	r3, r1, #3
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d66:	4651      	mov	r1, sl
 8002d68:	00ca      	lsls	r2, r1, #3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4642      	mov	r2, r8
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d78:	464b      	mov	r3, r9
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	008b      	lsls	r3, r1, #2
 8002da0:	4641      	mov	r1, r8
 8002da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da6:	4641      	mov	r1, r8
 8002da8:	008a      	lsls	r2, r1, #2
 8002daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dae:	f7fd fa87 	bl	80002c0 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002dba:	fba3 2301 	umull	r2, r3, r3, r1
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2264      	movs	r2, #100	; 0x64
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	1acb      	subs	r3, r1, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	; 0x32
 8002dcc:	4a33      	ldr	r2, [pc, #204]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd8:	441c      	add	r4, r3
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dde:	2200      	movs	r2, #0
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
 8002de2:	677a      	str	r2, [r7, #116]	; 0x74
 8002de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	415b      	adcs	r3, r3
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	eb42 0303 	adc.w	r3, r2, r3
 8002e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e3e:	667a      	str	r2, [r7, #100]	; 0x64
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	008b      	lsls	r3, r1, #2
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e56:	4641      	mov	r1, r8
 8002e58:	008a      	lsls	r2, r1, #2
 8002e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e5e:	f7fd fa2f 	bl	80002c0 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002e68:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2164      	movs	r1, #100	; 0x64
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4422      	add	r2, r4
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e96:	46bd      	mov	sp, r7
 8002e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9c:	51eb851f 	.word	0x51eb851f

08002ea0 <siprintf>:
 8002ea0:	b40e      	push	{r1, r2, r3}
 8002ea2:	b500      	push	{lr}
 8002ea4:	b09c      	sub	sp, #112	; 0x70
 8002ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ea8:	9002      	str	r0, [sp, #8]
 8002eaa:	9006      	str	r0, [sp, #24]
 8002eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eb0:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <siprintf+0x38>)
 8002eb2:	9107      	str	r1, [sp, #28]
 8002eb4:	9104      	str	r1, [sp, #16]
 8002eb6:	4909      	ldr	r1, [pc, #36]	; (8002edc <siprintf+0x3c>)
 8002eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ebc:	9105      	str	r1, [sp, #20]
 8002ebe:	6800      	ldr	r0, [r0, #0]
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	a902      	add	r1, sp, #8
 8002ec4:	f000 f992 	bl	80031ec <_svfiprintf_r>
 8002ec8:	9b02      	ldr	r3, [sp, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	b01c      	add	sp, #112	; 0x70
 8002ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ed4:	b003      	add	sp, #12
 8002ed6:	4770      	bx	lr
 8002ed8:	20000058 	.word	0x20000058
 8002edc:	ffff0208 	.word	0xffff0208

08002ee0 <memset>:
 8002ee0:	4402      	add	r2, r0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d100      	bne.n	8002eea <memset+0xa>
 8002ee8:	4770      	bx	lr
 8002eea:	f803 1b01 	strb.w	r1, [r3], #1
 8002eee:	e7f9      	b.n	8002ee4 <memset+0x4>

08002ef0 <__errno>:
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <__errno+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000058 	.word	0x20000058

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	; (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	; (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 fc6a 	bl	80037e8 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003944 	.word	0x08003944
 8002f38:	08003944 	.word	0x08003944
 8002f3c:	08003944 	.word	0x08003944
 8002f40:	08003948 	.word	0x08003948

08002f44 <__retarget_lock_acquire_recursive>:
 8002f44:	4770      	bx	lr

08002f46 <__retarget_lock_release_recursive>:
 8002f46:	4770      	bx	lr

08002f48 <_free_r>:
 8002f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	d044      	beq.n	8002fd8 <_free_r+0x90>
 8002f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f52:	9001      	str	r0, [sp, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f1a1 0404 	sub.w	r4, r1, #4
 8002f5a:	bfb8      	it	lt
 8002f5c:	18e4      	addlt	r4, r4, r3
 8002f5e:	f000 f8df 	bl	8003120 <__malloc_lock>
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <_free_r+0x94>)
 8002f64:	9801      	ldr	r0, [sp, #4]
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	b933      	cbnz	r3, 8002f78 <_free_r+0x30>
 8002f6a:	6063      	str	r3, [r4, #4]
 8002f6c:	6014      	str	r4, [r2, #0]
 8002f6e:	b003      	add	sp, #12
 8002f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f74:	f000 b8da 	b.w	800312c <__malloc_unlock>
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	d908      	bls.n	8002f8e <_free_r+0x46>
 8002f7c:	6825      	ldr	r5, [r4, #0]
 8002f7e:	1961      	adds	r1, r4, r5
 8002f80:	428b      	cmp	r3, r1
 8002f82:	bf01      	itttt	eq
 8002f84:	6819      	ldreq	r1, [r3, #0]
 8002f86:	685b      	ldreq	r3, [r3, #4]
 8002f88:	1949      	addeq	r1, r1, r5
 8002f8a:	6021      	streq	r1, [r4, #0]
 8002f8c:	e7ed      	b.n	8002f6a <_free_r+0x22>
 8002f8e:	461a      	mov	r2, r3
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	b10b      	cbz	r3, 8002f98 <_free_r+0x50>
 8002f94:	42a3      	cmp	r3, r4
 8002f96:	d9fa      	bls.n	8002f8e <_free_r+0x46>
 8002f98:	6811      	ldr	r1, [r2, #0]
 8002f9a:	1855      	adds	r5, r2, r1
 8002f9c:	42a5      	cmp	r5, r4
 8002f9e:	d10b      	bne.n	8002fb8 <_free_r+0x70>
 8002fa0:	6824      	ldr	r4, [r4, #0]
 8002fa2:	4421      	add	r1, r4
 8002fa4:	1854      	adds	r4, r2, r1
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	6011      	str	r1, [r2, #0]
 8002faa:	d1e0      	bne.n	8002f6e <_free_r+0x26>
 8002fac:	681c      	ldr	r4, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	6053      	str	r3, [r2, #4]
 8002fb2:	440c      	add	r4, r1
 8002fb4:	6014      	str	r4, [r2, #0]
 8002fb6:	e7da      	b.n	8002f6e <_free_r+0x26>
 8002fb8:	d902      	bls.n	8002fc0 <_free_r+0x78>
 8002fba:	230c      	movs	r3, #12
 8002fbc:	6003      	str	r3, [r0, #0]
 8002fbe:	e7d6      	b.n	8002f6e <_free_r+0x26>
 8002fc0:	6825      	ldr	r5, [r4, #0]
 8002fc2:	1961      	adds	r1, r4, r5
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	bf04      	itt	eq
 8002fc8:	6819      	ldreq	r1, [r3, #0]
 8002fca:	685b      	ldreq	r3, [r3, #4]
 8002fcc:	6063      	str	r3, [r4, #4]
 8002fce:	bf04      	itt	eq
 8002fd0:	1949      	addeq	r1, r1, r5
 8002fd2:	6021      	streq	r1, [r4, #0]
 8002fd4:	6054      	str	r4, [r2, #4]
 8002fd6:	e7ca      	b.n	8002f6e <_free_r+0x26>
 8002fd8:	b003      	add	sp, #12
 8002fda:	bd30      	pop	{r4, r5, pc}
 8002fdc:	2001c464 	.word	0x2001c464

08002fe0 <sbrk_aligned>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	4e0e      	ldr	r6, [pc, #56]	; (800301c <sbrk_aligned+0x3c>)
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	6831      	ldr	r1, [r6, #0]
 8002fe8:	4605      	mov	r5, r0
 8002fea:	b911      	cbnz	r1, 8002ff2 <sbrk_aligned+0x12>
 8002fec:	f000 fba6 	bl	800373c <_sbrk_r>
 8002ff0:	6030      	str	r0, [r6, #0]
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f000 fba1 	bl	800373c <_sbrk_r>
 8002ffa:	1c43      	adds	r3, r0, #1
 8002ffc:	d00a      	beq.n	8003014 <sbrk_aligned+0x34>
 8002ffe:	1cc4      	adds	r4, r0, #3
 8003000:	f024 0403 	bic.w	r4, r4, #3
 8003004:	42a0      	cmp	r0, r4
 8003006:	d007      	beq.n	8003018 <sbrk_aligned+0x38>
 8003008:	1a21      	subs	r1, r4, r0
 800300a:	4628      	mov	r0, r5
 800300c:	f000 fb96 	bl	800373c <_sbrk_r>
 8003010:	3001      	adds	r0, #1
 8003012:	d101      	bne.n	8003018 <sbrk_aligned+0x38>
 8003014:	f04f 34ff 	mov.w	r4, #4294967295
 8003018:	4620      	mov	r0, r4
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	2001c468 	.word	0x2001c468

08003020 <_malloc_r>:
 8003020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003024:	1ccd      	adds	r5, r1, #3
 8003026:	f025 0503 	bic.w	r5, r5, #3
 800302a:	3508      	adds	r5, #8
 800302c:	2d0c      	cmp	r5, #12
 800302e:	bf38      	it	cc
 8003030:	250c      	movcc	r5, #12
 8003032:	2d00      	cmp	r5, #0
 8003034:	4607      	mov	r7, r0
 8003036:	db01      	blt.n	800303c <_malloc_r+0x1c>
 8003038:	42a9      	cmp	r1, r5
 800303a:	d905      	bls.n	8003048 <_malloc_r+0x28>
 800303c:	230c      	movs	r3, #12
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	2600      	movs	r6, #0
 8003042:	4630      	mov	r0, r6
 8003044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003048:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800311c <_malloc_r+0xfc>
 800304c:	f000 f868 	bl	8003120 <__malloc_lock>
 8003050:	f8d8 3000 	ldr.w	r3, [r8]
 8003054:	461c      	mov	r4, r3
 8003056:	bb5c      	cbnz	r4, 80030b0 <_malloc_r+0x90>
 8003058:	4629      	mov	r1, r5
 800305a:	4638      	mov	r0, r7
 800305c:	f7ff ffc0 	bl	8002fe0 <sbrk_aligned>
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	4604      	mov	r4, r0
 8003064:	d155      	bne.n	8003112 <_malloc_r+0xf2>
 8003066:	f8d8 4000 	ldr.w	r4, [r8]
 800306a:	4626      	mov	r6, r4
 800306c:	2e00      	cmp	r6, #0
 800306e:	d145      	bne.n	80030fc <_malloc_r+0xdc>
 8003070:	2c00      	cmp	r4, #0
 8003072:	d048      	beq.n	8003106 <_malloc_r+0xe6>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	4631      	mov	r1, r6
 8003078:	4638      	mov	r0, r7
 800307a:	eb04 0903 	add.w	r9, r4, r3
 800307e:	f000 fb5d 	bl	800373c <_sbrk_r>
 8003082:	4581      	cmp	r9, r0
 8003084:	d13f      	bne.n	8003106 <_malloc_r+0xe6>
 8003086:	6821      	ldr	r1, [r4, #0]
 8003088:	1a6d      	subs	r5, r5, r1
 800308a:	4629      	mov	r1, r5
 800308c:	4638      	mov	r0, r7
 800308e:	f7ff ffa7 	bl	8002fe0 <sbrk_aligned>
 8003092:	3001      	adds	r0, #1
 8003094:	d037      	beq.n	8003106 <_malloc_r+0xe6>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	442b      	add	r3, r5
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	f8d8 3000 	ldr.w	r3, [r8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d038      	beq.n	8003116 <_malloc_r+0xf6>
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	42a2      	cmp	r2, r4
 80030a8:	d12b      	bne.n	8003102 <_malloc_r+0xe2>
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e00f      	b.n	80030d0 <_malloc_r+0xb0>
 80030b0:	6822      	ldr	r2, [r4, #0]
 80030b2:	1b52      	subs	r2, r2, r5
 80030b4:	d41f      	bmi.n	80030f6 <_malloc_r+0xd6>
 80030b6:	2a0b      	cmp	r2, #11
 80030b8:	d917      	bls.n	80030ea <_malloc_r+0xca>
 80030ba:	1961      	adds	r1, r4, r5
 80030bc:	42a3      	cmp	r3, r4
 80030be:	6025      	str	r5, [r4, #0]
 80030c0:	bf18      	it	ne
 80030c2:	6059      	strne	r1, [r3, #4]
 80030c4:	6863      	ldr	r3, [r4, #4]
 80030c6:	bf08      	it	eq
 80030c8:	f8c8 1000 	streq.w	r1, [r8]
 80030cc:	5162      	str	r2, [r4, r5]
 80030ce:	604b      	str	r3, [r1, #4]
 80030d0:	4638      	mov	r0, r7
 80030d2:	f104 060b 	add.w	r6, r4, #11
 80030d6:	f000 f829 	bl	800312c <__malloc_unlock>
 80030da:	f026 0607 	bic.w	r6, r6, #7
 80030de:	1d23      	adds	r3, r4, #4
 80030e0:	1af2      	subs	r2, r6, r3
 80030e2:	d0ae      	beq.n	8003042 <_malloc_r+0x22>
 80030e4:	1b9b      	subs	r3, r3, r6
 80030e6:	50a3      	str	r3, [r4, r2]
 80030e8:	e7ab      	b.n	8003042 <_malloc_r+0x22>
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	d1dd      	bne.n	80030ac <_malloc_r+0x8c>
 80030f0:	f8c8 2000 	str.w	r2, [r8]
 80030f4:	e7ec      	b.n	80030d0 <_malloc_r+0xb0>
 80030f6:	4623      	mov	r3, r4
 80030f8:	6864      	ldr	r4, [r4, #4]
 80030fa:	e7ac      	b.n	8003056 <_malloc_r+0x36>
 80030fc:	4634      	mov	r4, r6
 80030fe:	6876      	ldr	r6, [r6, #4]
 8003100:	e7b4      	b.n	800306c <_malloc_r+0x4c>
 8003102:	4613      	mov	r3, r2
 8003104:	e7cc      	b.n	80030a0 <_malloc_r+0x80>
 8003106:	230c      	movs	r3, #12
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4638      	mov	r0, r7
 800310c:	f000 f80e 	bl	800312c <__malloc_unlock>
 8003110:	e797      	b.n	8003042 <_malloc_r+0x22>
 8003112:	6025      	str	r5, [r4, #0]
 8003114:	e7dc      	b.n	80030d0 <_malloc_r+0xb0>
 8003116:	605b      	str	r3, [r3, #4]
 8003118:	deff      	udf	#255	; 0xff
 800311a:	bf00      	nop
 800311c:	2001c464 	.word	0x2001c464

08003120 <__malloc_lock>:
 8003120:	4801      	ldr	r0, [pc, #4]	; (8003128 <__malloc_lock+0x8>)
 8003122:	f7ff bf0f 	b.w	8002f44 <__retarget_lock_acquire_recursive>
 8003126:	bf00      	nop
 8003128:	2001c460 	.word	0x2001c460

0800312c <__malloc_unlock>:
 800312c:	4801      	ldr	r0, [pc, #4]	; (8003134 <__malloc_unlock+0x8>)
 800312e:	f7ff bf0a 	b.w	8002f46 <__retarget_lock_release_recursive>
 8003132:	bf00      	nop
 8003134:	2001c460 	.word	0x2001c460

08003138 <__ssputs_r>:
 8003138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800313c:	688e      	ldr	r6, [r1, #8]
 800313e:	461f      	mov	r7, r3
 8003140:	42be      	cmp	r6, r7
 8003142:	680b      	ldr	r3, [r1, #0]
 8003144:	4682      	mov	sl, r0
 8003146:	460c      	mov	r4, r1
 8003148:	4690      	mov	r8, r2
 800314a:	d82c      	bhi.n	80031a6 <__ssputs_r+0x6e>
 800314c:	898a      	ldrh	r2, [r1, #12]
 800314e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003152:	d026      	beq.n	80031a2 <__ssputs_r+0x6a>
 8003154:	6965      	ldr	r5, [r4, #20]
 8003156:	6909      	ldr	r1, [r1, #16]
 8003158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800315c:	eba3 0901 	sub.w	r9, r3, r1
 8003160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003164:	1c7b      	adds	r3, r7, #1
 8003166:	444b      	add	r3, r9
 8003168:	106d      	asrs	r5, r5, #1
 800316a:	429d      	cmp	r5, r3
 800316c:	bf38      	it	cc
 800316e:	461d      	movcc	r5, r3
 8003170:	0553      	lsls	r3, r2, #21
 8003172:	d527      	bpl.n	80031c4 <__ssputs_r+0x8c>
 8003174:	4629      	mov	r1, r5
 8003176:	f7ff ff53 	bl	8003020 <_malloc_r>
 800317a:	4606      	mov	r6, r0
 800317c:	b360      	cbz	r0, 80031d8 <__ssputs_r+0xa0>
 800317e:	6921      	ldr	r1, [r4, #16]
 8003180:	464a      	mov	r2, r9
 8003182:	f000 faeb 	bl	800375c <memcpy>
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	81a3      	strh	r3, [r4, #12]
 8003192:	6126      	str	r6, [r4, #16]
 8003194:	6165      	str	r5, [r4, #20]
 8003196:	444e      	add	r6, r9
 8003198:	eba5 0509 	sub.w	r5, r5, r9
 800319c:	6026      	str	r6, [r4, #0]
 800319e:	60a5      	str	r5, [r4, #8]
 80031a0:	463e      	mov	r6, r7
 80031a2:	42be      	cmp	r6, r7
 80031a4:	d900      	bls.n	80031a8 <__ssputs_r+0x70>
 80031a6:	463e      	mov	r6, r7
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	4632      	mov	r2, r6
 80031ac:	4641      	mov	r1, r8
 80031ae:	f000 faab 	bl	8003708 <memmove>
 80031b2:	68a3      	ldr	r3, [r4, #8]
 80031b4:	1b9b      	subs	r3, r3, r6
 80031b6:	60a3      	str	r3, [r4, #8]
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	4433      	add	r3, r6
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	2000      	movs	r0, #0
 80031c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c4:	462a      	mov	r2, r5
 80031c6:	f000 fad7 	bl	8003778 <_realloc_r>
 80031ca:	4606      	mov	r6, r0
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d1e0      	bne.n	8003192 <__ssputs_r+0x5a>
 80031d0:	6921      	ldr	r1, [r4, #16]
 80031d2:	4650      	mov	r0, sl
 80031d4:	f7ff feb8 	bl	8002f48 <_free_r>
 80031d8:	230c      	movs	r3, #12
 80031da:	f8ca 3000 	str.w	r3, [sl]
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e4:	81a3      	strh	r3, [r4, #12]
 80031e6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ea:	e7e9      	b.n	80031c0 <__ssputs_r+0x88>

080031ec <_svfiprintf_r>:
 80031ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	4698      	mov	r8, r3
 80031f2:	898b      	ldrh	r3, [r1, #12]
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	b09d      	sub	sp, #116	; 0x74
 80031f8:	4607      	mov	r7, r0
 80031fa:	460d      	mov	r5, r1
 80031fc:	4614      	mov	r4, r2
 80031fe:	d50e      	bpl.n	800321e <_svfiprintf_r+0x32>
 8003200:	690b      	ldr	r3, [r1, #16]
 8003202:	b963      	cbnz	r3, 800321e <_svfiprintf_r+0x32>
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	f7ff ff0b 	bl	8003020 <_malloc_r>
 800320a:	6028      	str	r0, [r5, #0]
 800320c:	6128      	str	r0, [r5, #16]
 800320e:	b920      	cbnz	r0, 800321a <_svfiprintf_r+0x2e>
 8003210:	230c      	movs	r3, #12
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	e0d0      	b.n	80033bc <_svfiprintf_r+0x1d0>
 800321a:	2340      	movs	r3, #64	; 0x40
 800321c:	616b      	str	r3, [r5, #20]
 800321e:	2300      	movs	r3, #0
 8003220:	9309      	str	r3, [sp, #36]	; 0x24
 8003222:	2320      	movs	r3, #32
 8003224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003228:	f8cd 800c 	str.w	r8, [sp, #12]
 800322c:	2330      	movs	r3, #48	; 0x30
 800322e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033d4 <_svfiprintf_r+0x1e8>
 8003232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003236:	f04f 0901 	mov.w	r9, #1
 800323a:	4623      	mov	r3, r4
 800323c:	469a      	mov	sl, r3
 800323e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003242:	b10a      	cbz	r2, 8003248 <_svfiprintf_r+0x5c>
 8003244:	2a25      	cmp	r2, #37	; 0x25
 8003246:	d1f9      	bne.n	800323c <_svfiprintf_r+0x50>
 8003248:	ebba 0b04 	subs.w	fp, sl, r4
 800324c:	d00b      	beq.n	8003266 <_svfiprintf_r+0x7a>
 800324e:	465b      	mov	r3, fp
 8003250:	4622      	mov	r2, r4
 8003252:	4629      	mov	r1, r5
 8003254:	4638      	mov	r0, r7
 8003256:	f7ff ff6f 	bl	8003138 <__ssputs_r>
 800325a:	3001      	adds	r0, #1
 800325c:	f000 80a9 	beq.w	80033b2 <_svfiprintf_r+0x1c6>
 8003260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003262:	445a      	add	r2, fp
 8003264:	9209      	str	r2, [sp, #36]	; 0x24
 8003266:	f89a 3000 	ldrb.w	r3, [sl]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a1 	beq.w	80033b2 <_svfiprintf_r+0x1c6>
 8003270:	2300      	movs	r3, #0
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800327a:	f10a 0a01 	add.w	sl, sl, #1
 800327e:	9304      	str	r3, [sp, #16]
 8003280:	9307      	str	r3, [sp, #28]
 8003282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003286:	931a      	str	r3, [sp, #104]	; 0x68
 8003288:	4654      	mov	r4, sl
 800328a:	2205      	movs	r2, #5
 800328c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003290:	4850      	ldr	r0, [pc, #320]	; (80033d4 <_svfiprintf_r+0x1e8>)
 8003292:	f7fc ffc5 	bl	8000220 <memchr>
 8003296:	9a04      	ldr	r2, [sp, #16]
 8003298:	b9d8      	cbnz	r0, 80032d2 <_svfiprintf_r+0xe6>
 800329a:	06d0      	lsls	r0, r2, #27
 800329c:	bf44      	itt	mi
 800329e:	2320      	movmi	r3, #32
 80032a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032a4:	0711      	lsls	r1, r2, #28
 80032a6:	bf44      	itt	mi
 80032a8:	232b      	movmi	r3, #43	; 0x2b
 80032aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	2b2a      	cmp	r3, #42	; 0x2a
 80032b4:	d015      	beq.n	80032e2 <_svfiprintf_r+0xf6>
 80032b6:	9a07      	ldr	r2, [sp, #28]
 80032b8:	4654      	mov	r4, sl
 80032ba:	2000      	movs	r0, #0
 80032bc:	f04f 0c0a 	mov.w	ip, #10
 80032c0:	4621      	mov	r1, r4
 80032c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d94d      	bls.n	8003368 <_svfiprintf_r+0x17c>
 80032cc:	b1b0      	cbz	r0, 80032fc <_svfiprintf_r+0x110>
 80032ce:	9207      	str	r2, [sp, #28]
 80032d0:	e014      	b.n	80032fc <_svfiprintf_r+0x110>
 80032d2:	eba0 0308 	sub.w	r3, r0, r8
 80032d6:	fa09 f303 	lsl.w	r3, r9, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	9304      	str	r3, [sp, #16]
 80032de:	46a2      	mov	sl, r4
 80032e0:	e7d2      	b.n	8003288 <_svfiprintf_r+0x9c>
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	1d19      	adds	r1, r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	9103      	str	r1, [sp, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bfbb      	ittet	lt
 80032ee:	425b      	neglt	r3, r3
 80032f0:	f042 0202 	orrlt.w	r2, r2, #2
 80032f4:	9307      	strge	r3, [sp, #28]
 80032f6:	9307      	strlt	r3, [sp, #28]
 80032f8:	bfb8      	it	lt
 80032fa:	9204      	strlt	r2, [sp, #16]
 80032fc:	7823      	ldrb	r3, [r4, #0]
 80032fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003300:	d10c      	bne.n	800331c <_svfiprintf_r+0x130>
 8003302:	7863      	ldrb	r3, [r4, #1]
 8003304:	2b2a      	cmp	r3, #42	; 0x2a
 8003306:	d134      	bne.n	8003372 <_svfiprintf_r+0x186>
 8003308:	9b03      	ldr	r3, [sp, #12]
 800330a:	1d1a      	adds	r2, r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	9203      	str	r2, [sp, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	bfb8      	it	lt
 8003314:	f04f 33ff 	movlt.w	r3, #4294967295
 8003318:	3402      	adds	r4, #2
 800331a:	9305      	str	r3, [sp, #20]
 800331c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80033e4 <_svfiprintf_r+0x1f8>
 8003320:	7821      	ldrb	r1, [r4, #0]
 8003322:	2203      	movs	r2, #3
 8003324:	4650      	mov	r0, sl
 8003326:	f7fc ff7b 	bl	8000220 <memchr>
 800332a:	b138      	cbz	r0, 800333c <_svfiprintf_r+0x150>
 800332c:	9b04      	ldr	r3, [sp, #16]
 800332e:	eba0 000a 	sub.w	r0, r0, sl
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	4082      	lsls	r2, r0
 8003336:	4313      	orrs	r3, r2
 8003338:	3401      	adds	r4, #1
 800333a:	9304      	str	r3, [sp, #16]
 800333c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003340:	4825      	ldr	r0, [pc, #148]	; (80033d8 <_svfiprintf_r+0x1ec>)
 8003342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003346:	2206      	movs	r2, #6
 8003348:	f7fc ff6a 	bl	8000220 <memchr>
 800334c:	2800      	cmp	r0, #0
 800334e:	d038      	beq.n	80033c2 <_svfiprintf_r+0x1d6>
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <_svfiprintf_r+0x1f0>)
 8003352:	bb1b      	cbnz	r3, 800339c <_svfiprintf_r+0x1b0>
 8003354:	9b03      	ldr	r3, [sp, #12]
 8003356:	3307      	adds	r3, #7
 8003358:	f023 0307 	bic.w	r3, r3, #7
 800335c:	3308      	adds	r3, #8
 800335e:	9303      	str	r3, [sp, #12]
 8003360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003362:	4433      	add	r3, r6
 8003364:	9309      	str	r3, [sp, #36]	; 0x24
 8003366:	e768      	b.n	800323a <_svfiprintf_r+0x4e>
 8003368:	fb0c 3202 	mla	r2, ip, r2, r3
 800336c:	460c      	mov	r4, r1
 800336e:	2001      	movs	r0, #1
 8003370:	e7a6      	b.n	80032c0 <_svfiprintf_r+0xd4>
 8003372:	2300      	movs	r3, #0
 8003374:	3401      	adds	r4, #1
 8003376:	9305      	str	r3, [sp, #20]
 8003378:	4619      	mov	r1, r3
 800337a:	f04f 0c0a 	mov.w	ip, #10
 800337e:	4620      	mov	r0, r4
 8003380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003384:	3a30      	subs	r2, #48	; 0x30
 8003386:	2a09      	cmp	r2, #9
 8003388:	d903      	bls.n	8003392 <_svfiprintf_r+0x1a6>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0c6      	beq.n	800331c <_svfiprintf_r+0x130>
 800338e:	9105      	str	r1, [sp, #20]
 8003390:	e7c4      	b.n	800331c <_svfiprintf_r+0x130>
 8003392:	fb0c 2101 	mla	r1, ip, r1, r2
 8003396:	4604      	mov	r4, r0
 8003398:	2301      	movs	r3, #1
 800339a:	e7f0      	b.n	800337e <_svfiprintf_r+0x192>
 800339c:	ab03      	add	r3, sp, #12
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	462a      	mov	r2, r5
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <_svfiprintf_r+0x1f4>)
 80033a4:	a904      	add	r1, sp, #16
 80033a6:	4638      	mov	r0, r7
 80033a8:	f3af 8000 	nop.w
 80033ac:	1c42      	adds	r2, r0, #1
 80033ae:	4606      	mov	r6, r0
 80033b0:	d1d6      	bne.n	8003360 <_svfiprintf_r+0x174>
 80033b2:	89ab      	ldrh	r3, [r5, #12]
 80033b4:	065b      	lsls	r3, r3, #25
 80033b6:	f53f af2d 	bmi.w	8003214 <_svfiprintf_r+0x28>
 80033ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033bc:	b01d      	add	sp, #116	; 0x74
 80033be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c2:	ab03      	add	r3, sp, #12
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	462a      	mov	r2, r5
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <_svfiprintf_r+0x1f4>)
 80033ca:	a904      	add	r1, sp, #16
 80033cc:	4638      	mov	r0, r7
 80033ce:	f000 f879 	bl	80034c4 <_printf_i>
 80033d2:	e7eb      	b.n	80033ac <_svfiprintf_r+0x1c0>
 80033d4:	08003908 	.word	0x08003908
 80033d8:	08003912 	.word	0x08003912
 80033dc:	00000000 	.word	0x00000000
 80033e0:	08003139 	.word	0x08003139
 80033e4:	0800390e 	.word	0x0800390e

080033e8 <_printf_common>:
 80033e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ec:	4616      	mov	r6, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	688a      	ldr	r2, [r1, #8]
 80033f2:	690b      	ldr	r3, [r1, #16]
 80033f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bfb8      	it	lt
 80033fc:	4613      	movlt	r3, r2
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003404:	4607      	mov	r7, r0
 8003406:	460c      	mov	r4, r1
 8003408:	b10a      	cbz	r2, 800340e <_printf_common+0x26>
 800340a:	3301      	adds	r3, #1
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	0699      	lsls	r1, r3, #26
 8003412:	bf42      	ittt	mi
 8003414:	6833      	ldrmi	r3, [r6, #0]
 8003416:	3302      	addmi	r3, #2
 8003418:	6033      	strmi	r3, [r6, #0]
 800341a:	6825      	ldr	r5, [r4, #0]
 800341c:	f015 0506 	ands.w	r5, r5, #6
 8003420:	d106      	bne.n	8003430 <_printf_common+0x48>
 8003422:	f104 0a19 	add.w	sl, r4, #25
 8003426:	68e3      	ldr	r3, [r4, #12]
 8003428:	6832      	ldr	r2, [r6, #0]
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	42ab      	cmp	r3, r5
 800342e:	dc26      	bgt.n	800347e <_printf_common+0x96>
 8003430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003434:	1e13      	subs	r3, r2, #0
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	bf18      	it	ne
 800343a:	2301      	movne	r3, #1
 800343c:	0692      	lsls	r2, r2, #26
 800343e:	d42b      	bmi.n	8003498 <_printf_common+0xb0>
 8003440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003444:	4649      	mov	r1, r9
 8003446:	4638      	mov	r0, r7
 8003448:	47c0      	blx	r8
 800344a:	3001      	adds	r0, #1
 800344c:	d01e      	beq.n	800348c <_printf_common+0xa4>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	6922      	ldr	r2, [r4, #16]
 8003452:	f003 0306 	and.w	r3, r3, #6
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf02      	ittt	eq
 800345a:	68e5      	ldreq	r5, [r4, #12]
 800345c:	6833      	ldreq	r3, [r6, #0]
 800345e:	1aed      	subeq	r5, r5, r3
 8003460:	68a3      	ldr	r3, [r4, #8]
 8003462:	bf0c      	ite	eq
 8003464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003468:	2500      	movne	r5, #0
 800346a:	4293      	cmp	r3, r2
 800346c:	bfc4      	itt	gt
 800346e:	1a9b      	subgt	r3, r3, r2
 8003470:	18ed      	addgt	r5, r5, r3
 8003472:	2600      	movs	r6, #0
 8003474:	341a      	adds	r4, #26
 8003476:	42b5      	cmp	r5, r6
 8003478:	d11a      	bne.n	80034b0 <_printf_common+0xc8>
 800347a:	2000      	movs	r0, #0
 800347c:	e008      	b.n	8003490 <_printf_common+0xa8>
 800347e:	2301      	movs	r3, #1
 8003480:	4652      	mov	r2, sl
 8003482:	4649      	mov	r1, r9
 8003484:	4638      	mov	r0, r7
 8003486:	47c0      	blx	r8
 8003488:	3001      	adds	r0, #1
 800348a:	d103      	bne.n	8003494 <_printf_common+0xac>
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003494:	3501      	adds	r5, #1
 8003496:	e7c6      	b.n	8003426 <_printf_common+0x3e>
 8003498:	18e1      	adds	r1, r4, r3
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	2030      	movs	r0, #48	; 0x30
 800349e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a2:	4422      	add	r2, r4
 80034a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ac:	3302      	adds	r3, #2
 80034ae:	e7c7      	b.n	8003440 <_printf_common+0x58>
 80034b0:	2301      	movs	r3, #1
 80034b2:	4622      	mov	r2, r4
 80034b4:	4649      	mov	r1, r9
 80034b6:	4638      	mov	r0, r7
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d0e6      	beq.n	800348c <_printf_common+0xa4>
 80034be:	3601      	adds	r6, #1
 80034c0:	e7d9      	b.n	8003476 <_printf_common+0x8e>
	...

080034c4 <_printf_i>:
 80034c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	7e0f      	ldrb	r7, [r1, #24]
 80034ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034cc:	2f78      	cmp	r7, #120	; 0x78
 80034ce:	4691      	mov	r9, r2
 80034d0:	4680      	mov	r8, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	469a      	mov	sl, r3
 80034d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034da:	d807      	bhi.n	80034ec <_printf_i+0x28>
 80034dc:	2f62      	cmp	r7, #98	; 0x62
 80034de:	d80a      	bhi.n	80034f6 <_printf_i+0x32>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	f000 80d4 	beq.w	800368e <_printf_i+0x1ca>
 80034e6:	2f58      	cmp	r7, #88	; 0x58
 80034e8:	f000 80c0 	beq.w	800366c <_printf_i+0x1a8>
 80034ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034f4:	e03a      	b.n	800356c <_printf_i+0xa8>
 80034f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034fa:	2b15      	cmp	r3, #21
 80034fc:	d8f6      	bhi.n	80034ec <_printf_i+0x28>
 80034fe:	a101      	add	r1, pc, #4	; (adr r1, 8003504 <_printf_i+0x40>)
 8003500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003504:	0800355d 	.word	0x0800355d
 8003508:	08003571 	.word	0x08003571
 800350c:	080034ed 	.word	0x080034ed
 8003510:	080034ed 	.word	0x080034ed
 8003514:	080034ed 	.word	0x080034ed
 8003518:	080034ed 	.word	0x080034ed
 800351c:	08003571 	.word	0x08003571
 8003520:	080034ed 	.word	0x080034ed
 8003524:	080034ed 	.word	0x080034ed
 8003528:	080034ed 	.word	0x080034ed
 800352c:	080034ed 	.word	0x080034ed
 8003530:	08003675 	.word	0x08003675
 8003534:	0800359d 	.word	0x0800359d
 8003538:	0800362f 	.word	0x0800362f
 800353c:	080034ed 	.word	0x080034ed
 8003540:	080034ed 	.word	0x080034ed
 8003544:	08003697 	.word	0x08003697
 8003548:	080034ed 	.word	0x080034ed
 800354c:	0800359d 	.word	0x0800359d
 8003550:	080034ed 	.word	0x080034ed
 8003554:	080034ed 	.word	0x080034ed
 8003558:	08003637 	.word	0x08003637
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	602a      	str	r2, [r5, #0]
 8003564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800356c:	2301      	movs	r3, #1
 800356e:	e09f      	b.n	80036b0 <_printf_i+0x1ec>
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	0607      	lsls	r7, r0, #24
 8003576:	f103 0104 	add.w	r1, r3, #4
 800357a:	6029      	str	r1, [r5, #0]
 800357c:	d501      	bpl.n	8003582 <_printf_i+0xbe>
 800357e:	681e      	ldr	r6, [r3, #0]
 8003580:	e003      	b.n	800358a <_printf_i+0xc6>
 8003582:	0646      	lsls	r6, r0, #25
 8003584:	d5fb      	bpl.n	800357e <_printf_i+0xba>
 8003586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800358a:	2e00      	cmp	r6, #0
 800358c:	da03      	bge.n	8003596 <_printf_i+0xd2>
 800358e:	232d      	movs	r3, #45	; 0x2d
 8003590:	4276      	negs	r6, r6
 8003592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003596:	485a      	ldr	r0, [pc, #360]	; (8003700 <_printf_i+0x23c>)
 8003598:	230a      	movs	r3, #10
 800359a:	e012      	b.n	80035c2 <_printf_i+0xfe>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	6820      	ldr	r0, [r4, #0]
 80035a0:	1d19      	adds	r1, r3, #4
 80035a2:	6029      	str	r1, [r5, #0]
 80035a4:	0605      	lsls	r5, r0, #24
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0xe8>
 80035a8:	681e      	ldr	r6, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <_printf_i+0xee>
 80035ac:	0641      	lsls	r1, r0, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0xe4>
 80035b0:	881e      	ldrh	r6, [r3, #0]
 80035b2:	4853      	ldr	r0, [pc, #332]	; (8003700 <_printf_i+0x23c>)
 80035b4:	2f6f      	cmp	r7, #111	; 0x6f
 80035b6:	bf0c      	ite	eq
 80035b8:	2308      	moveq	r3, #8
 80035ba:	230a      	movne	r3, #10
 80035bc:	2100      	movs	r1, #0
 80035be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035c2:	6865      	ldr	r5, [r4, #4]
 80035c4:	60a5      	str	r5, [r4, #8]
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	bfa2      	ittt	ge
 80035ca:	6821      	ldrge	r1, [r4, #0]
 80035cc:	f021 0104 	bicge.w	r1, r1, #4
 80035d0:	6021      	strge	r1, [r4, #0]
 80035d2:	b90e      	cbnz	r6, 80035d8 <_printf_i+0x114>
 80035d4:	2d00      	cmp	r5, #0
 80035d6:	d04b      	beq.n	8003670 <_printf_i+0x1ac>
 80035d8:	4615      	mov	r5, r2
 80035da:	fbb6 f1f3 	udiv	r1, r6, r3
 80035de:	fb03 6711 	mls	r7, r3, r1, r6
 80035e2:	5dc7      	ldrb	r7, [r0, r7]
 80035e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035e8:	4637      	mov	r7, r6
 80035ea:	42bb      	cmp	r3, r7
 80035ec:	460e      	mov	r6, r1
 80035ee:	d9f4      	bls.n	80035da <_printf_i+0x116>
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d10b      	bne.n	800360c <_printf_i+0x148>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07de      	lsls	r6, r3, #31
 80035f8:	d508      	bpl.n	800360c <_printf_i+0x148>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	6861      	ldr	r1, [r4, #4]
 80035fe:	4299      	cmp	r1, r3
 8003600:	bfde      	ittt	le
 8003602:	2330      	movle	r3, #48	; 0x30
 8003604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003608:	f105 35ff 	addle.w	r5, r5, #4294967295
 800360c:	1b52      	subs	r2, r2, r5
 800360e:	6122      	str	r2, [r4, #16]
 8003610:	f8cd a000 	str.w	sl, [sp]
 8003614:	464b      	mov	r3, r9
 8003616:	aa03      	add	r2, sp, #12
 8003618:	4621      	mov	r1, r4
 800361a:	4640      	mov	r0, r8
 800361c:	f7ff fee4 	bl	80033e8 <_printf_common>
 8003620:	3001      	adds	r0, #1
 8003622:	d14a      	bne.n	80036ba <_printf_i+0x1f6>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	b004      	add	sp, #16
 800362a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	4833      	ldr	r0, [pc, #204]	; (8003704 <_printf_i+0x240>)
 8003638:	2778      	movs	r7, #120	; 0x78
 800363a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	6829      	ldr	r1, [r5, #0]
 8003642:	061f      	lsls	r7, r3, #24
 8003644:	f851 6b04 	ldr.w	r6, [r1], #4
 8003648:	d402      	bmi.n	8003650 <_printf_i+0x18c>
 800364a:	065f      	lsls	r7, r3, #25
 800364c:	bf48      	it	mi
 800364e:	b2b6      	uxthmi	r6, r6
 8003650:	07df      	lsls	r7, r3, #31
 8003652:	bf48      	it	mi
 8003654:	f043 0320 	orrmi.w	r3, r3, #32
 8003658:	6029      	str	r1, [r5, #0]
 800365a:	bf48      	it	mi
 800365c:	6023      	strmi	r3, [r4, #0]
 800365e:	b91e      	cbnz	r6, 8003668 <_printf_i+0x1a4>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	2310      	movs	r3, #16
 800366a:	e7a7      	b.n	80035bc <_printf_i+0xf8>
 800366c:	4824      	ldr	r0, [pc, #144]	; (8003700 <_printf_i+0x23c>)
 800366e:	e7e4      	b.n	800363a <_printf_i+0x176>
 8003670:	4615      	mov	r5, r2
 8003672:	e7bd      	b.n	80035f0 <_printf_i+0x12c>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	6826      	ldr	r6, [r4, #0]
 8003678:	6961      	ldr	r1, [r4, #20]
 800367a:	1d18      	adds	r0, r3, #4
 800367c:	6028      	str	r0, [r5, #0]
 800367e:	0635      	lsls	r5, r6, #24
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	d501      	bpl.n	8003688 <_printf_i+0x1c4>
 8003684:	6019      	str	r1, [r3, #0]
 8003686:	e002      	b.n	800368e <_printf_i+0x1ca>
 8003688:	0670      	lsls	r0, r6, #25
 800368a:	d5fb      	bpl.n	8003684 <_printf_i+0x1c0>
 800368c:	8019      	strh	r1, [r3, #0]
 800368e:	2300      	movs	r3, #0
 8003690:	6123      	str	r3, [r4, #16]
 8003692:	4615      	mov	r5, r2
 8003694:	e7bc      	b.n	8003610 <_printf_i+0x14c>
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	1d1a      	adds	r2, r3, #4
 800369a:	602a      	str	r2, [r5, #0]
 800369c:	681d      	ldr	r5, [r3, #0]
 800369e:	6862      	ldr	r2, [r4, #4]
 80036a0:	2100      	movs	r1, #0
 80036a2:	4628      	mov	r0, r5
 80036a4:	f7fc fdbc 	bl	8000220 <memchr>
 80036a8:	b108      	cbz	r0, 80036ae <_printf_i+0x1ea>
 80036aa:	1b40      	subs	r0, r0, r5
 80036ac:	6060      	str	r0, [r4, #4]
 80036ae:	6863      	ldr	r3, [r4, #4]
 80036b0:	6123      	str	r3, [r4, #16]
 80036b2:	2300      	movs	r3, #0
 80036b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036b8:	e7aa      	b.n	8003610 <_printf_i+0x14c>
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	462a      	mov	r2, r5
 80036be:	4649      	mov	r1, r9
 80036c0:	4640      	mov	r0, r8
 80036c2:	47d0      	blx	sl
 80036c4:	3001      	adds	r0, #1
 80036c6:	d0ad      	beq.n	8003624 <_printf_i+0x160>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	079b      	lsls	r3, r3, #30
 80036cc:	d413      	bmi.n	80036f6 <_printf_i+0x232>
 80036ce:	68e0      	ldr	r0, [r4, #12]
 80036d0:	9b03      	ldr	r3, [sp, #12]
 80036d2:	4298      	cmp	r0, r3
 80036d4:	bfb8      	it	lt
 80036d6:	4618      	movlt	r0, r3
 80036d8:	e7a6      	b.n	8003628 <_printf_i+0x164>
 80036da:	2301      	movs	r3, #1
 80036dc:	4632      	mov	r2, r6
 80036de:	4649      	mov	r1, r9
 80036e0:	4640      	mov	r0, r8
 80036e2:	47d0      	blx	sl
 80036e4:	3001      	adds	r0, #1
 80036e6:	d09d      	beq.n	8003624 <_printf_i+0x160>
 80036e8:	3501      	adds	r5, #1
 80036ea:	68e3      	ldr	r3, [r4, #12]
 80036ec:	9903      	ldr	r1, [sp, #12]
 80036ee:	1a5b      	subs	r3, r3, r1
 80036f0:	42ab      	cmp	r3, r5
 80036f2:	dcf2      	bgt.n	80036da <_printf_i+0x216>
 80036f4:	e7eb      	b.n	80036ce <_printf_i+0x20a>
 80036f6:	2500      	movs	r5, #0
 80036f8:	f104 0619 	add.w	r6, r4, #25
 80036fc:	e7f5      	b.n	80036ea <_printf_i+0x226>
 80036fe:	bf00      	nop
 8003700:	08003919 	.word	0x08003919
 8003704:	0800392a 	.word	0x0800392a

08003708 <memmove>:
 8003708:	4288      	cmp	r0, r1
 800370a:	b510      	push	{r4, lr}
 800370c:	eb01 0402 	add.w	r4, r1, r2
 8003710:	d902      	bls.n	8003718 <memmove+0x10>
 8003712:	4284      	cmp	r4, r0
 8003714:	4623      	mov	r3, r4
 8003716:	d807      	bhi.n	8003728 <memmove+0x20>
 8003718:	1e43      	subs	r3, r0, #1
 800371a:	42a1      	cmp	r1, r4
 800371c:	d008      	beq.n	8003730 <memmove+0x28>
 800371e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003726:	e7f8      	b.n	800371a <memmove+0x12>
 8003728:	4402      	add	r2, r0
 800372a:	4601      	mov	r1, r0
 800372c:	428a      	cmp	r2, r1
 800372e:	d100      	bne.n	8003732 <memmove+0x2a>
 8003730:	bd10      	pop	{r4, pc}
 8003732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800373a:	e7f7      	b.n	800372c <memmove+0x24>

0800373c <_sbrk_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d06      	ldr	r5, [pc, #24]	; (8003758 <_sbrk_r+0x1c>)
 8003740:	2300      	movs	r3, #0
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	f7fd fbf8 	bl	8000f3c <_sbrk>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_sbrk_r+0x1a>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_sbrk_r+0x1a>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	2001c45c 	.word	0x2001c45c

0800375c <memcpy>:
 800375c:	440a      	add	r2, r1
 800375e:	4291      	cmp	r1, r2
 8003760:	f100 33ff 	add.w	r3, r0, #4294967295
 8003764:	d100      	bne.n	8003768 <memcpy+0xc>
 8003766:	4770      	bx	lr
 8003768:	b510      	push	{r4, lr}
 800376a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800376e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003772:	4291      	cmp	r1, r2
 8003774:	d1f9      	bne.n	800376a <memcpy+0xe>
 8003776:	bd10      	pop	{r4, pc}

08003778 <_realloc_r>:
 8003778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377c:	4680      	mov	r8, r0
 800377e:	4614      	mov	r4, r2
 8003780:	460e      	mov	r6, r1
 8003782:	b921      	cbnz	r1, 800378e <_realloc_r+0x16>
 8003784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	4611      	mov	r1, r2
 800378a:	f7ff bc49 	b.w	8003020 <_malloc_r>
 800378e:	b92a      	cbnz	r2, 800379c <_realloc_r+0x24>
 8003790:	f7ff fbda 	bl	8002f48 <_free_r>
 8003794:	4625      	mov	r5, r4
 8003796:	4628      	mov	r0, r5
 8003798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800379c:	f000 f81b 	bl	80037d6 <_malloc_usable_size_r>
 80037a0:	4284      	cmp	r4, r0
 80037a2:	4607      	mov	r7, r0
 80037a4:	d802      	bhi.n	80037ac <_realloc_r+0x34>
 80037a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037aa:	d812      	bhi.n	80037d2 <_realloc_r+0x5a>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4640      	mov	r0, r8
 80037b0:	f7ff fc36 	bl	8003020 <_malloc_r>
 80037b4:	4605      	mov	r5, r0
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d0ed      	beq.n	8003796 <_realloc_r+0x1e>
 80037ba:	42bc      	cmp	r4, r7
 80037bc:	4622      	mov	r2, r4
 80037be:	4631      	mov	r1, r6
 80037c0:	bf28      	it	cs
 80037c2:	463a      	movcs	r2, r7
 80037c4:	f7ff ffca 	bl	800375c <memcpy>
 80037c8:	4631      	mov	r1, r6
 80037ca:	4640      	mov	r0, r8
 80037cc:	f7ff fbbc 	bl	8002f48 <_free_r>
 80037d0:	e7e1      	b.n	8003796 <_realloc_r+0x1e>
 80037d2:	4635      	mov	r5, r6
 80037d4:	e7df      	b.n	8003796 <_realloc_r+0x1e>

080037d6 <_malloc_usable_size_r>:
 80037d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037da:	1f18      	subs	r0, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bfbc      	itt	lt
 80037e0:	580b      	ldrlt	r3, [r1, r0]
 80037e2:	18c0      	addlt	r0, r0, r3
 80037e4:	4770      	bx	lr
	...

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
