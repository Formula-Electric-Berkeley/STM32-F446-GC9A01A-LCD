
F446-TFT-LCD-Round.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003910  08003910  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08003918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c40c  2000013c  08003a54  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c548  08003a54  0002c548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a64c  00000000  00000000  000201af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a97  00000000  00000000  0002a7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  0002cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021eb4  00000000  00000000  0002d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0e6  00000000  00000000  0004f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca788  00000000  00000000  0005b25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a04  00000000  00000000  001259e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001283ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003884 	.word	0x08003884

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000140 	.word	0x20000140
 800020c:	08003884 	.word	0x08003884

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <color565>:
#define MADCTL_BGR 0x08 ///< Blue-Green-Red pixel order
#define MADCTL_MH 0x04  ///< LCD refresh right to left



static inline uint16_t color565(uint8_t red, uint8_t green, uint8_t blue) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	460b      	mov	r3, r1
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	4613      	mov	r3, r2
 80005cc:	717b      	strb	r3, [r7, #5]
  return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005d8:	f023 0307 	bic.w	r3, r3, #7
 80005dc:	b21a      	sxth	r2, r3
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	b29b      	uxth	r3, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <swap_bytes>:
  GC9A01A_DISPON, 0x80, // Display on
  0x00                  // End of list
};


static inline void swap_bytes(size_t len, uint16_t *dest, uint16_t *src) {
 8000608:	b480      	push	{r7}
 800060a:	b087      	sub	sp, #28
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < len; i += 1) {
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00e      	b.n	8000638 <swap_bytes+0x30>
    dest[i] = __builtin_bswap16(src[i]);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	68b9      	ldr	r1, [r7, #8]
 800062a:	440b      	add	r3, r1
 800062c:	ba52      	rev16	r2, r2
 800062e:	b292      	uxth	r2, r2
 8000630:	801a      	strh	r2, [r3, #0]
  for (size_t i = 0; i < len; i += 1) {
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	429a      	cmp	r2, r3
 800063e:	d3ec      	bcc.n	800061a <swap_bytes+0x12>
  }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <spi_start>:


void spi_start() {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
//  digitalWrite(TFT_CS, LOW);
  HAL_GPIO_WritePin(TFT_CS_GPIO, TFT_CS_PIN, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <spi_start+0x14>)
 800065a:	f001 f83f 	bl	80016dc <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020400 	.word	0x40020400

08000668 <spi_end>:

void spi_end() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
//  digitalWrite(TFT_CS, HIGH);
  HAL_GPIO_WritePin(TFT_CS_GPIO, TFT_CS_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <spi_end+0x14>)
 8000672:	f001 f833 	bl	80016dc <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020400 	.word	0x40020400

08000680 <write_command>:


void write_command(uint8_t cmd) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
//  digitalWrite(TFT_DC, LOW);
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <write_command+0x38>)
 8000692:	f001 f823 	bl	80016dc <HAL_GPIO_WritePin>

//  SPI.transfer(cmd);
  HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8000696:	1df9      	adds	r1, r7, #7
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	2201      	movs	r2, #1
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <write_command+0x3c>)
 800069e:	f001 fe22 	bl	80022e6 <HAL_SPI_Transmit>

//  digitalWrite(TFT_DC, HIGH);
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <write_command+0x38>)
 80006aa:	f001 f817 	bl	80016dc <HAL_GPIO_WritePin>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40020000 	.word	0x40020000
 80006bc:	2001c358 	.word	0x2001c358

080006c0 <send_command>:


void send_command(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
  spi_start();
 80006d0:	f7ff ffbe 	bl	8000650 <spi_start>

  // digitalWrite(TFT_DC, LOW);
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <send_command+0x6c>)
 80006dc:	f000 fffe 	bl	80016dc <HAL_GPIO_WritePin>


  // SPI.transfer(commandByte);
  HAL_SPI_Transmit(&hspi1, &commandByte, 1, 100);
 80006e0:	1df9      	adds	r1, r7, #7
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <send_command+0x70>)
 80006e8:	f001 fdfd 	bl	80022e6 <HAL_SPI_Transmit>

  // digitalWrite(TFT_DC, HIGH);
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <send_command+0x6c>)
 80006f4:	f000 fff2 	bl	80016dc <HAL_GPIO_WritePin>

  for (int i = 0; i < numDataBytes; i += 1) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e00b      	b.n	8000716 <send_command+0x56>
    // SPI.transfer(pgm_read_byte(dataBytes++));
    HAL_SPI_Transmit(&hspi1, (uint8_t *)dataBytes, 1, 100);
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	2201      	movs	r2, #1
 8000702:	6839      	ldr	r1, [r7, #0]
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <send_command+0x70>)
 8000706:	f001 fdee 	bl	80022e6 <HAL_SPI_Transmit>
    dataBytes += 1;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < numDataBytes; i += 1) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbef      	blt.n	80006fe <send_command+0x3e>
  }

  spi_end();
 800071e:	f7ff ffa3 	bl	8000668 <spi_end>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40020000 	.word	0x40020000
 8000730:	2001c358 	.word	0x2001c358

08000734 <SPI_WRITE16>:


static inline void SPI_WRITE16(uint16_t w) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
  swap_bytes(1, &w, &w);
 800073e:	1dba      	adds	r2, r7, #6
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	4619      	mov	r1, r3
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ff5f 	bl	8000608 <swap_bytes>

  HAL_SPI_Transmit(&hspi1, (uint8_t *)&w, 2, 100);
 800074a:	1db9      	adds	r1, r7, #6
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	2202      	movs	r2, #2
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <SPI_WRITE16+0x2c>)
 8000752:	f001 fdc8 	bl	80022e6 <HAL_SPI_Transmit>

//  HAL_SPI_Transmit(&hspi1, &w_hi, 1, 100);
//  HAL_SPI_Transmit(&hspi1, &w_lo, 1, 100);
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2001c358 	.word	0x2001c358

08000764 <set_addr_window>:


void set_addr_window(uint16_t x1, uint16_t y1, uint16_t w,
                                     uint16_t h) {
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	4604      	mov	r4, r0
 800076c:	4608      	mov	r0, r1
 800076e:	4611      	mov	r1, r2
 8000770:	461a      	mov	r2, r3
 8000772:	4623      	mov	r3, r4
 8000774:	80fb      	strh	r3, [r7, #6]
 8000776:	4603      	mov	r3, r0
 8000778:	80bb      	strh	r3, [r7, #4]
 800077a:	460b      	mov	r3, r1
 800077c:	807b      	strh	r3, [r7, #2]
 800077e:	4613      	mov	r3, r2
 8000780:	803b      	strh	r3, [r7, #0]
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	4413      	add	r3, r2
 8000788:	b29b      	uxth	r3, r3
 800078a:	3b01      	subs	r3, #1
 800078c:	81fb      	strh	r3, [r7, #14]
 800078e:	88ba      	ldrh	r2, [r7, #4]
 8000790:	883b      	ldrh	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	3b01      	subs	r3, #1
 8000798:	81bb      	strh	r3, [r7, #12]
  write_command(GC9A01A_CASET); // Column address set
 800079a:	202a      	movs	r0, #42	; 0x2a
 800079c:	f7ff ff70 	bl	8000680 <write_command>
  SPI_WRITE16(x1);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ffc6 	bl	8000734 <SPI_WRITE16>
  SPI_WRITE16(x2);
 80007a8:	89fb      	ldrh	r3, [r7, #14]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffc2 	bl	8000734 <SPI_WRITE16>
  write_command(GC9A01A_RASET); // Row address set
 80007b0:	202b      	movs	r0, #43	; 0x2b
 80007b2:	f7ff ff65 	bl	8000680 <write_command>
  SPI_WRITE16(y1);
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffbb 	bl	8000734 <SPI_WRITE16>
  SPI_WRITE16(y2);
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffb7 	bl	8000734 <SPI_WRITE16>
  write_command(GC9A01A_RAMWR); // Write to RAM
 80007c6:	202c      	movs	r0, #44	; 0x2c
 80007c8:	f7ff ff5a 	bl	8000680 <write_command>
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <write_pixels>:

void write_pixels(uint16_t *colors, uint32_t len) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
//  while (len--) {
//    SPI_WRITE16(*colors++);
//  }
  HAL_SPI_Transmit(&hspi1, (uint8_t *)colors, len*2, 100);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <write_pixels+0x24>)
 80007ec:	f001 fd7b 	bl	80022e6 <HAL_SPI_Transmit>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2001c358 	.word	0x2001c358

080007fc <draw_pixel>:

void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	80bb      	strh	r3, [r7, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	807b      	strh	r3, [r7, #2]
  spi_start();
 800080e:	f7ff ff1f 	bl	8000650 <spi_start>

  set_addr_window(x, y, 1, 1);
 8000812:	88f8      	ldrh	r0, [r7, #6]
 8000814:	88b9      	ldrh	r1, [r7, #4]
 8000816:	2301      	movs	r3, #1
 8000818:	2201      	movs	r2, #1
 800081a:	f7ff ffa3 	bl	8000764 <set_addr_window>
  SPI_WRITE16(color);
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff87 	bl	8000734 <SPI_WRITE16>

  spi_end();
 8000826:	f7ff ff1f 	bl	8000668 <spi_end>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <fill_screen>:
    }
  }
}


void fill_screen(uint16_t pcolor) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	80fb      	strh	r3, [r7, #6]
  spi_start();
 800083c:	f7ff ff08 	bl	8000650 <spi_start>
  set_addr_window(0, 0, WIDTH, HEIGHT);// Clipped area
 8000840:	23f0      	movs	r3, #240	; 0xf0
 8000842:	22f0      	movs	r2, #240	; 0xf0
 8000844:	2100      	movs	r1, #0
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff ff8c 	bl	8000764 <set_addr_window>

  for (size_t i = 0; i < HEIGHT; i += 1) {             // For each (clipped) scanline...
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e00f      	b.n	8000872 <fill_screen+0x40>
    for (size_t j = 0; j < WIDTH; j += 1) {
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	e006      	b.n	8000866 <fill_screen+0x34>
      SPI_WRITE16(pcolor);  // Push one (clipped) row
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff6a 	bl	8000734 <SPI_WRITE16>
    for (size_t j = 0; j < WIDTH; j += 1) {
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3301      	adds	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2bef      	cmp	r3, #239	; 0xef
 800086a:	d9f5      	bls.n	8000858 <fill_screen+0x26>
  for (size_t i = 0; i < HEIGHT; i += 1) {             // For each (clipped) scanline...
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2bef      	cmp	r3, #239	; 0xef
 8000876:	d9ec      	bls.n	8000852 <fill_screen+0x20>
    }
  }

  spi_end();
 8000878:	f7ff fef6 	bl	8000668 <spi_end>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <draw_rgb_bitmap>:

void draw_rgb_bitmap(int16_t x, int16_t y, uint16_t *pcolors, int16_t w, int16_t h) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60ba      	str	r2, [r7, #8]
 800088c:	461a      	mov	r2, r3
 800088e:	4603      	mov	r3, r0
 8000890:	81fb      	strh	r3, [r7, #14]
 8000892:	460b      	mov	r3, r1
 8000894:	81bb      	strh	r3, [r7, #12]
 8000896:	4613      	mov	r3, r2
 8000898:	80fb      	strh	r3, [r7, #6]
  spi_start();
 800089a:	f7ff fed9 	bl	8000650 <spi_start>
  set_addr_window(0, 0, w, h);// Clipped area
 800089e:	88fa      	ldrh	r2, [r7, #6]
 80008a0:	8c3b      	ldrh	r3, [r7, #32]
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff ff5d 	bl	8000764 <set_addr_window>


  for (size_t i = 0; i < h; i += 1) {             // For each (clipped) scanline...
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e00e      	b.n	80008ce <draw_rgb_bitmap+0x4a>
    write_pixels(pcolors, w);  // Push one (clipped) row
 80008b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b4:	4619      	mov	r1, r3
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f7ff ff8c 	bl	80007d4 <write_pixels>
    pcolors += w;             // Advance pointer by one full (unclipped) line
 80008bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	4413      	add	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  for (size_t i = 0; i < h; i += 1) {             // For each (clipped) scanline...
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d3eb      	bcc.n	80008b0 <draw_rgb_bitmap+0x2c>
  }

//  HAL_SPI_Transmit(&hspi1, (uint8_t *)pcolors, h*w*2, 100);
  spi_end();
 80008d8:	f7ff fec6 	bl	8000668 <spi_end>
}
 80008dc:	bf00      	nop
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <APP_init>:

uint16_t img[240 * 240];


void APP_init() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0a4      	sub	sp, #144	; 0x90
 80008e8:	af00      	add	r7, sp, #0
  char str[128];

  sprintf(str, "GC9A01A Test!\n");
 80008ea:	463b      	mov	r3, r7
 80008ec:	4946      	ldr	r1, [pc, #280]	; (8000a08 <APP_init+0x124>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fb24 	bl	8002f3c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 80008f4:	463b      	mov	r3, r7
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc8a 	bl	8000210 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4639      	mov	r1, r7
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <APP_init+0x128>)
 8000906:	f001 ff5d 	bl	80027c4 <HAL_UART_Transmit>

  // digitalWrite(TFT_CS, HIGH); // Deselect
  HAL_GPIO_WritePin(TFT_CS_GPIO, TFT_CS_PIN, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4840      	ldr	r0, [pc, #256]	; (8000a10 <APP_init+0x12c>)
 8000910:	f000 fee4 	bl	80016dc <HAL_GPIO_WritePin>

  // digitalWrite(TFT_DC, HIGH); // Data mode
  HAL_GPIO_WritePin(TFT_DC_GPIO, TFT_DC_PIN, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	483e      	ldr	r0, [pc, #248]	; (8000a14 <APP_init+0x130>)
 800091c:	f000 fede 	bl	80016dc <HAL_GPIO_WritePin>


  // digitalWrite(TFT_RST, LOW);
  HAL_GPIO_WritePin(TFT_RST_GPIO, TFT_RST_PIN, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	483b      	ldr	r0, [pc, #236]	; (8000a14 <APP_init+0x130>)
 8000928:	f000 fed8 	bl	80016dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f000 fc37 	bl	80011a0 <HAL_Delay>
  // digitalWrite(TFT_RST, HIGH);
  HAL_GPIO_WritePin(TFT_RST_GPIO, TFT_RST_PIN, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	4836      	ldr	r0, [pc, #216]	; (8000a14 <APP_init+0x130>)
 800093a:	f000 fecf 	bl	80016dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800093e:	2064      	movs	r0, #100	; 0x64
 8000940:	f000 fc2e 	bl	80011a0 <HAL_Delay>


  uint8_t x, numArgs;
  uint8_t *addr = initcmd;
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <APP_init+0x134>)
 8000946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint8_t cmd = *addr;
 800094a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

  while (cmd > 0) {
 8000954:	e030      	b.n	80009b8 <APP_init+0xd4>
    cmd = *addr;
 8000956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    addr += 1;
 8000960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000964:	3301      	adds	r3, #1
 8000966:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    x = *addr;
 800096a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    addr += 1;
 8000974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000978:	3301      	adds	r3, #1
 800097a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    numArgs = x & 0x7F;
 800097e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000986:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    send_command(cmd, addr, numArgs);
 800098a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800098e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000992:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe92 	bl	80006c0 <send_command>
    addr += numArgs;
 800099c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80009a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80009a4:	4413      	add	r3, r2
 80009a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (x & 0x80)
 80009aa:	f997 3083 	ldrsb.w	r3, [r7, #131]	; 0x83
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	da02      	bge.n	80009b8 <APP_init+0xd4>
      HAL_Delay(150);
 80009b2:	2096      	movs	r0, #150	; 0x96
 80009b4:	f000 fbf4 	bl	80011a0 <HAL_Delay>
  while (cmd > 0) {
 80009b8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1ca      	bne.n	8000956 <APP_init+0x72>
  }

//  digitalWrite(TFT_BL, HIGH); // Backlight on
  HAL_GPIO_WritePin(TFT_BL_GPIO, TFT_BL_PIN, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <APP_init+0x138>)
 80009c6:	f000 fe89 	bl	80016dc <HAL_GPIO_WritePin>


  for (int i=0; i<240*240; i+=1) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80009d0:	e010      	b.n	80009f4 <APP_init+0x110>
    img[i] = color565(0, 128, 255);
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fdf0 	bl	80005bc <color565>
 80009dc:	4603      	mov	r3, r0
 80009de:	4619      	mov	r1, r3
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <APP_init+0x13c>)
 80009e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<240*240; i+=1) {
 80009ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009ee:	3301      	adds	r3, #1
 80009f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80009f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009f8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 80009fc:	dbe9      	blt.n	80009d2 <APP_init+0xee>
  }

}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3790      	adds	r7, #144	; 0x90
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	0800389c 	.word	0x0800389c
 8000a0c:	2001c3b0 	.word	0x2001c3b0
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40020000 	.word	0x40020000
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	20000158 	.word	0x20000158

08000a24 <APP_main>:


void APP_main() {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0a2      	sub	sp, #136	; 0x88
 8000a28:	af02      	add	r7, sp, #8
  char str[128];
  fill_screen(0xFFFF);
 8000a2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a2e:	f7ff ff00 	bl	8000832 <fill_screen>

  draw_rgb_bitmap(0, 0, img, 240, 240);
 8000a32:	23f0      	movs	r3, #240	; 0xf0
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	23f0      	movs	r3, #240	; 0xf0
 8000a38:	4a42      	ldr	r2, [pc, #264]	; (8000b44 <APP_main+0x120>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ff21 	bl	8000884 <draw_rgb_bitmap>


  sprintf(str, "fill\n");
 8000a42:	463b      	mov	r3, r7
 8000a44:	4940      	ldr	r1, [pc, #256]	; (8000b48 <APP_main+0x124>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 fa78 	bl	8002f3c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbde 	bl	8000210 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4639      	mov	r1, r7
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	483b      	ldr	r0, [pc, #236]	; (8000b4c <APP_main+0x128>)
 8000a5e:	f001 feb1 	bl	80027c4 <HAL_UART_Transmit>


  draw_pixel(120, 120, color565(0, 128, 255));
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fda8 	bl	80005bc <color565>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2178      	movs	r1, #120	; 0x78
 8000a72:	2078      	movs	r0, #120	; 0x78
 8000a74:	f7ff fec2 	bl	80007fc <draw_pixel>
  HAL_Delay(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f000 fb91 	bl	80011a0 <HAL_Delay>
  draw_pixel(120, 121, color565(0, 128, 255));
 8000a7e:	22ff      	movs	r2, #255	; 0xff
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fd9a 	bl	80005bc <color565>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2179      	movs	r1, #121	; 0x79
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f7ff feb4 	bl	80007fc <draw_pixel>
  HAL_Delay(10);
 8000a94:	200a      	movs	r0, #10
 8000a96:	f000 fb83 	bl	80011a0 <HAL_Delay>
  draw_pixel(120, 122, color565(0, 128, 255));
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fd8c 	bl	80005bc <color565>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	217a      	movs	r1, #122	; 0x7a
 8000aaa:	2078      	movs	r0, #120	; 0x78
 8000aac:	f7ff fea6 	bl	80007fc <draw_pixel>
  HAL_Delay(500);
 8000ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab4:	f000 fb74 	bl	80011a0 <HAL_Delay>

  draw_pixel(120, 120, color565(255, 128, 0));
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	f7ff fd7d 	bl	80005bc <color565>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2178      	movs	r1, #120	; 0x78
 8000ac8:	2078      	movs	r0, #120	; 0x78
 8000aca:	f7ff fe97 	bl	80007fc <draw_pixel>
  HAL_Delay(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f000 fb66 	bl	80011a0 <HAL_Delay>
  draw_pixel(120, 121, color565(255, 128, 0));
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	f7ff fd6f 	bl	80005bc <color565>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2179      	movs	r1, #121	; 0x79
 8000ae4:	2078      	movs	r0, #120	; 0x78
 8000ae6:	f7ff fe89 	bl	80007fc <draw_pixel>
  HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 fb58 	bl	80011a0 <HAL_Delay>
  draw_pixel(120, 122, color565(255, 128, 0));
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	20ff      	movs	r0, #255	; 0xff
 8000af6:	f7ff fd61 	bl	80005bc <color565>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	217a      	movs	r1, #122	; 0x7a
 8000b00:	2078      	movs	r0, #120	; 0x78
 8000b02:	f7ff fe7b 	bl	80007fc <draw_pixel>
  HAL_Delay(500);
 8000b06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b0a:	f000 fb49 	bl	80011a0 <HAL_Delay>
//  }
//  HAL_Delay(1000);
//  for (int i=0; i<120; i+=1) {
//    draw_pixel(120, i, color565(255, 128, 0));
//  }
  HAL_Delay(1000);
 8000b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b12:	f000 fb45 	bl	80011a0 <HAL_Delay>


  sprintf(str, "Done!\n");
 8000b16:	463b      	mov	r3, r7
 8000b18:	490d      	ldr	r1, [pc, #52]	; (8000b50 <APP_main+0x12c>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fa0e 	bl	8002f3c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb74 	bl	8000210 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <APP_main+0x128>)
 8000b32:	f001 fe47 	bl	80027c4 <HAL_UART_Transmit>


  HAL_Delay(100);
 8000b36:	2064      	movs	r0, #100	; 0x64
 8000b38:	f000 fb32 	bl	80011a0 <HAL_Delay>
}
 8000b3c:	bf00      	nop
 8000b3e:	3780      	adds	r7, #128	; 0x80
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000158 	.word	0x20000158
 8000b48:	080038ac 	.word	0x080038ac
 8000b4c:	2001c3b0 	.word	0x2001c3b0
 8000b50:	080038b4 	.word	0x080038b4

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fab0 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f80c 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f000 f8d6 	bl	8000d10 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b64:	f000 f874 	bl	8000c50 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b68:	f000 f8a8 	bl	8000cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000b6c:	f7ff feba 	bl	80008e4 <APP_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    APP_main();
 8000b70:	f7ff ff58 	bl	8000a24 <APP_main>
 8000b74:	e7fc      	b.n	8000b70 <main+0x1c>
	...

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 f9f8 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <SystemClock_Config+0xd0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <SystemClock_Config+0xd0>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <SystemClock_Config+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <SystemClock_Config+0xd4>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <SystemClock_Config+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000be8:	2310      	movs	r3, #16
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8000bec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bf0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f848 	bl	8001c98 <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c0e:	f000 f8fb 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2105      	movs	r1, #5
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fd6d 	bl	8001710 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c3c:	f000 f8e4 	bl	8000e08 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f001 fa97 	bl	80021d4 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 f8ac 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2001c358 	.word	0x2001c358
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART2_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	f001 fd16 	bl	8002724 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f883 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2001c3b0 	.word	0x2001c3b0
 8000d0c:	40004400 	.word	0x40004400

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_GPIO_Init+0xe8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	481f      	ldr	r0, [pc, #124]	; (8000dfc <MX_GPIO_Init+0xec>)
 8000d80:	f000 fcac 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d8a:	481d      	ldr	r0, [pc, #116]	; (8000e00 <MX_GPIO_Init+0xf0>)
 8000d8c:	f000 fca6 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	481b      	ldr	r0, [pc, #108]	; (8000e04 <MX_GPIO_Init+0xf4>)
 8000d96:	f000 fca1 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <MX_GPIO_Init+0xec>)
 8000db2:	f000 faff 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_GPIO_Init+0xf0>)
 8000dd0:	f000 faf0 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_GPIO_Init+0xf4>)
 8000dec:	f000 fae2 	bl	80013b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_SPI_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_SPI_MspInit+0x8c>)
 8000eda:	f000 fa6b 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0x84>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12b      	bne.n	8000f6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f4e:	230c      	movs	r3, #12
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_UART_MspInit+0x8c>)
 8000f6a:	f000 fa23 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f8c6 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f001 ffc0 	bl	8002f8c <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	2001c3f8 	.word	0x2001c3f8
 8001040:	2001c548 	.word	0x2001c548

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001096:	f001 ff7f 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fd5b 	bl	8000b54 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 80010ac:	08003918 	.word	0x08003918
  ldr r2, =_sbss
 80010b0:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 80010b4:	2001c548 	.word	0x2001c548

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f931 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fe90 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f93b 	bl	800139a <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f911 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000e0 	.word	0x200000e0
 8001158:	200000e8 	.word	0x200000e8
 800115c:	200000e4 	.word	0x200000e4

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200000e8 	.word	0x200000e8
 8001184:	2001c3fc 	.word	0x2001c3fc

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2001c3fc 	.word	0x2001c3fc

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000e8 	.word	0x200000e8

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff47 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff5c 	bl	8001230 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffb0 	bl	8001308 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e165      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8154 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	2b02      	cmp	r3, #2
 8001404:	d130      	bne.n	8001468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d017      	beq.n	80014a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80ae 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a5c      	ldr	r2, [pc, #368]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b5a      	ldr	r3, [pc, #360]	; (80016b4 <HAL_GPIO_Init+0x300>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_GPIO_Init+0x304>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <HAL_GPIO_Init+0x308>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d025      	beq.n	80015ce <HAL_GPIO_Init+0x21a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <HAL_GPIO_Init+0x30c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01f      	beq.n	80015ca <HAL_GPIO_Init+0x216>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4d      	ldr	r2, [pc, #308]	; (80016c4 <HAL_GPIO_Init+0x310>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x212>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_GPIO_Init+0x314>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x20e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_GPIO_Init+0x318>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x20a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_GPIO_Init+0x31c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x206>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a49      	ldr	r2, [pc, #292]	; (80016d4 <HAL_GPIO_Init+0x320>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x202>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e00c      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e00a      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015ba:	2305      	movs	r3, #5
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015be:	2304      	movs	r3, #4
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015ce:	2300      	movs	r3, #0
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e0:	4935      	ldr	r1, [pc, #212]	; (80016b8 <HAL_GPIO_Init+0x304>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ee:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_GPIO_Init+0x324>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001612:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_GPIO_Init+0x324>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <HAL_GPIO_Init+0x324>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_GPIO_Init+0x324>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f ae96 	bls.w	80013d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021800 	.word	0x40021800
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0cc      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90c      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e067      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff fcc2 	bl	8001188 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fcbe 	bl	8001188 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d20c      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f855 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc22 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	080038bc 	.word	0x080038bc
 80018d4:	200000e0 	.word	0x200000e0
 80018d8:	200000e4 	.word	0x200000e4

080018dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200000e0 	.word	0x200000e0

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff0 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	080038cc 	.word	0x080038cc

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffdc 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0b5b      	lsrs	r3, r3, #13
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	080038cc 	.word	0x080038cc

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b0a6      	sub	sp, #152	; 0x98
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196a:	4bc8      	ldr	r3, [pc, #800]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b0c      	cmp	r3, #12
 8001974:	f200 817e 	bhi.w	8001c74 <HAL_RCC_GetSysClockFreq+0x330>
 8001978:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <HAL_RCC_GetSysClockFreq+0x3c>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	080019b5 	.word	0x080019b5
 8001984:	08001c75 	.word	0x08001c75
 8001988:	08001c75 	.word	0x08001c75
 800198c:	08001c75 	.word	0x08001c75
 8001990:	080019bd 	.word	0x080019bd
 8001994:	08001c75 	.word	0x08001c75
 8001998:	08001c75 	.word	0x08001c75
 800199c:	08001c75 	.word	0x08001c75
 80019a0:	080019c5 	.word	0x080019c5
 80019a4:	08001c75 	.word	0x08001c75
 80019a8:	08001c75 	.word	0x08001c75
 80019ac:	08001c75 	.word	0x08001c75
 80019b0:	08001b2f 	.word	0x08001b2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4bb6      	ldr	r3, [pc, #728]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80019ba:	e15f      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019bc:	4bb5      	ldr	r3, [pc, #724]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x350>)
 80019be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80019c2:	e15b      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4bb1      	ldr	r3, [pc, #708]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d0:	4bae      	ldr	r3, [pc, #696]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d031      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4bab      	ldr	r3, [pc, #684]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	2200      	movs	r2, #0
 80019e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80019e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ee:	663b      	str	r3, [r7, #96]	; 0x60
 80019f0:	2300      	movs	r3, #0
 80019f2:	667b      	str	r3, [r7, #100]	; 0x64
 80019f4:	4ba7      	ldr	r3, [pc, #668]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x350>)
 80019f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019fa:	462a      	mov	r2, r5
 80019fc:	fb03 f202 	mul.w	r2, r3, r2
 8001a00:	2300      	movs	r3, #0
 8001a02:	4621      	mov	r1, r4
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	4aa2      	ldr	r2, [pc, #648]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	fba1 1202 	umull	r1, r2, r1, r2
 8001a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a14:	460a      	mov	r2, r1
 8001a16:	67ba      	str	r2, [r7, #120]	; 0x78
 8001a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a22:	2200      	movs	r2, #0
 8001a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a30:	f7fe fc46 	bl	80002c0 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a3e:	e064      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	2200      	movs	r2, #0
 8001a48:	653b      	str	r3, [r7, #80]	; 0x50
 8001a4a:	657a      	str	r2, [r7, #84]	; 0x54
 8001a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a54:	2300      	movs	r3, #0
 8001a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a58:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	462b      	mov	r3, r5
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	0159      	lsls	r1, r3, #5
 8001a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6e:	0150      	lsls	r0, r2, #5
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4621      	mov	r1, r4
 8001a76:	1a51      	subs	r1, r2, r1
 8001a78:	6139      	str	r1, [r7, #16]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a8e:	4659      	mov	r1, fp
 8001a90:	018b      	lsls	r3, r1, #6
 8001a92:	4651      	mov	r1, sl
 8001a94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a98:	4651      	mov	r1, sl
 8001a9a:	018a      	lsls	r2, r1, #6
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa2:	4659      	mov	r1, fp
 8001aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001abc:	4690      	mov	r8, r2
 8001abe:	4699      	mov	r9, r3
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	eb18 0303 	adds.w	r3, r8, r3
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	462b      	mov	r3, r5
 8001aca:	eb49 0303 	adc.w	r3, r9, r3
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001adc:	4629      	mov	r1, r5
 8001ade:	028b      	lsls	r3, r1, #10
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	028a      	lsls	r2, r1, #10
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af2:	2200      	movs	r2, #0
 8001af4:	643b      	str	r3, [r7, #64]	; 0x40
 8001af6:	647a      	str	r2, [r7, #68]	; 0x44
 8001af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001afc:	f7fe fbe0 	bl	80002c0 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b0a:	4b60      	ldr	r3, [pc, #384]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0c1b      	lsrs	r3, r3, #16
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	3301      	adds	r3, #1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b2c:	e0a6      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d02a      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b5c:	fb03 f201 	mul.w	r2, r3, r1
 8001b60:	2300      	movs	r3, #0
 8001b62:	fb00 f303 	mul.w	r3, r0, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	4a4a      	ldr	r2, [pc, #296]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b6e:	677a      	str	r2, [r7, #116]	; 0x74
 8001b70:	460a      	mov	r2, r1
 8001b72:	673a      	str	r2, [r7, #112]	; 0x70
 8001b74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b76:	4413      	add	r3, r2
 8001b78:	677b      	str	r3, [r7, #116]	; 0x74
 8001b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b7e:	2200      	movs	r2, #0
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
 8001b82:	637a      	str	r2, [r7, #52]	; 0x34
 8001b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b8c:	f7fe fb98 	bl	80002c0 <__aeabi_uldivmod>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4613      	mov	r3, r2
 8001b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b9a:	e05b      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bb8:	4642      	mov	r2, r8
 8001bba:	464b      	mov	r3, r9
 8001bbc:	f04f 0000 	mov.w	r0, #0
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	0159      	lsls	r1, r3, #5
 8001bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bca:	0150      	lsls	r0, r2, #5
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	00eb      	lsls	r3, r5, #3
 8001c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c06:	00e2      	lsls	r2, r4, #3
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	18e3      	adds	r3, r4, r3
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	464b      	mov	r3, r9
 8001c14:	eb45 0303 	adc.w	r3, r5, r3
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	61fa      	str	r2, [r7, #28]
 8001c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c46:	f7fe fb3b 	bl	80002c0 <__aeabi_uldivmod>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4613      	mov	r3, r2
 8001c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0f1b      	lsrs	r3, r3, #28
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c72:	e003      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3798      	adds	r7, #152	; 0x98
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	017d7840 	.word	0x017d7840

08001c98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e28d      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8083 	beq.w	8001dbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cb8:	4b94      	ldr	r3, [pc, #592]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d019      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cc4:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cd0:	4b8e      	ldr	r3, [pc, #568]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cde:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b88      	ldr	r3, [pc, #544]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf6:	d10b      	bne.n	8001d10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	4b84      	ldr	r3, [pc, #528]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d05b      	beq.n	8001dbc <HAL_RCC_OscConfig+0x124>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d157      	bne.n	8001dbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e25a      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x90>
 8001d1a:	4b7c      	ldr	r3, [pc, #496]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7b      	ldr	r2, [pc, #492]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e01d      	b.n	8001d64 <HAL_RCC_OscConfig+0xcc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0xb4>
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a75      	ldr	r2, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b73      	ldr	r3, [pc, #460]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a72      	ldr	r2, [pc, #456]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xcc>
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fa0c 	bl	8001188 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fa08 	bl	8001188 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e21f      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0xdc>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f9f8 	bl	8001188 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f9f4 	bl	8001188 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e20b      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x104>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06f      	beq.n	8001eaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dca:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001de2:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x186>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1d3      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4937      	ldr	r1, [pc, #220]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e03a      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f9a1 	bl	8001188 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f99d 	bl	8001188 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1b4      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4925      	ldr	r1, [pc, #148]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f980 	bl	8001188 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f97c 	bl	8001188 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e193      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d036      	beq.n	8001f24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f960 	bl	8001188 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f95c 	bl	8001188 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e173      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x234>
 8001eea:	e01b      	b.n	8001f24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f949 	bl	8001188 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	e00e      	b.n	8001f18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff f945 	bl	8001188 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d907      	bls.n	8001f18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e15c      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	42470000 	.word	0x42470000
 8001f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b8a      	ldr	r3, [pc, #552]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ea      	bne.n	8001efa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8097 	beq.w	8002060 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b83      	ldr	r3, [pc, #524]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b7c      	ldr	r3, [pc, #496]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b79      	ldr	r3, [pc, #484]	; (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f905 	bl	8001188 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7ff f901 	bl	8001188 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e118      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x31e>
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb4:	e01c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x340>
 8001fbe:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a60      	ldr	r2, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fca:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a5d      	ldr	r2, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f8c6 	bl	8001188 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff f8c2 	bl	8001188 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0d7      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002016:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ee      	beq.n	8002000 <HAL_RCC_OscConfig+0x368>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f8b0 	bl	8001188 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff f8ac 	bl	8001188 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0c1      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ee      	bne.n	800202c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80ad 	beq.w	80021c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b08      	cmp	r3, #8
 8002074:	d060      	beq.n	8002138 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d145      	bne.n	800210a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f880 	bl	8001188 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff f87c 	bl	8001188 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e093      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	071b      	lsls	r3, r3, #28
 80020d6:	491b      	ldr	r1, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4b4>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f851 	bl	8001188 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff f84d 	bl	8001188 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e064      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x452>
 8002108:	e05c      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x4b4>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff f83a 	bl	8001188 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f836 	bl	8001188 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04d      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x480>
 8002136:	e045      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_RCC_OscConfig+0x538>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d030      	beq.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d129      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d122      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	4293      	cmp	r3, r2
 800218a:	d119      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d10f      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07b      	b.n	80022de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021f6:	d009      	beq.n	800220c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	e005      	b.n	800220c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fe1c 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0104 	and.w	r1, r3, #4
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f003 0210 	and.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_SPI_Transmit+0x22>
 8002304:	2302      	movs	r3, #2
 8002306:	e12d      	b.n	8002564 <HAL_SPI_Transmit+0x27e>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002310:	f7fe ff3a 	bl	8001188 <HAL_GetTick>
 8002314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d002      	beq.n	800232c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800232a:	e116      	b.n	800255a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x52>
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800233c:	e10d      	b.n	800255a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002384:	d10f      	bne.n	80023a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d007      	beq.n	80023c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023cc:	d14f      	bne.n	800246e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_SPI_Transmit+0xf6>
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d142      	bne.n	8002462 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002400:	e02f      	b.n	8002462 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d112      	bne.n	8002436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	; 0x36
 8002434:	e015      	b.n	8002462 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002436:	f7fe fea7 	bl	8001188 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d803      	bhi.n	800244e <HAL_SPI_Transmit+0x168>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Transmit+0x16e>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002460:	e07b      	b.n	800255a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ca      	bne.n	8002402 <HAL_SPI_Transmit+0x11c>
 800246c:	e050      	b.n	8002510 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_SPI_Transmit+0x196>
 8002476:	8afb      	ldrh	r3, [r7, #22]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d144      	bne.n	8002506 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024a2:	e030      	b.n	8002506 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d113      	bne.n	80024da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80024d8:	e015      	b.n	8002506 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024da:	f7fe fe55 	bl	8001188 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d803      	bhi.n	80024f2 <HAL_SPI_Transmit+0x20c>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d102      	bne.n	80024f8 <HAL_SPI_Transmit+0x212>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002504:	e029      	b.n	800255a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1c9      	bne.n	80024a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8b1 	bl	800267c <SPI_EndRxTxTransaction>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	77fb      	strb	r3, [r7, #31]
 8002550:	e003      	b.n	800255a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002562:	7ffb      	ldrb	r3, [r7, #31]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800257c:	f7fe fe04 	bl	8001188 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	4413      	add	r3, r2
 800258a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800258c:	f7fe fdfc 	bl	8001188 <HAL_GetTick>
 8002590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	015b      	lsls	r3, r3, #5
 8002598:	0d1b      	lsrs	r3, r3, #20
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a2:	e054      	b.n	800264e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d050      	beq.n	800264e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025ac:	f7fe fdec 	bl	8001188 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d902      	bls.n	80025c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d13d      	bne.n	800263e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025da:	d111      	bne.n	8002600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e4:	d004      	beq.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ee:	d107      	bne.n	8002600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002608:	d10f      	bne.n	800262a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e017      	b.n	800266e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3b01      	subs	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d19b      	bne.n	80025a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200000e0 	.word	0x200000e0

0800267c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2201      	movs	r2, #1
 8002690:	2102      	movs	r1, #2
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7ff ff6a 	bl	800256c <SPI_WaitFlagStateUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e032      	b.n	8002714 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <SPI_EndRxTxTransaction+0xa0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <SPI_EndRxTxTransaction+0xa4>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0d5b      	lsrs	r3, r3, #21
 80026ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026cc:	d112      	bne.n	80026f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff47 	bl	800256c <SPI_WaitFlagStateUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e00f      	b.n	8002714 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d0f2      	beq.n	80026f4 <SPI_EndRxTxTransaction+0x78>
 800270e:	e000      	b.n	8002712 <SPI_EndRxTxTransaction+0x96>
        break;
 8002710:	bf00      	nop
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200000e0 	.word	0x200000e0
 8002720:	165e9f81 	.word	0x165e9f81

08002724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e042      	b.n	80027bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fbd2 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f973 	bl	8002a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800277c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800278c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800279c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d175      	bne.n	80028d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Transmit+0x2c>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e06e      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	; 0x21
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002802:	f7fe fcc1 	bl	8001188 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281c:	d108      	bne.n	8002830 <HAL_UART_Transmit+0x6c>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e003      	b.n	8002838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002838:	e02e      	b.n	8002898 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f848 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03a      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	3302      	adds	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e007      	b.n	800288a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3301      	adds	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1cb      	bne.n	800283a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2140      	movs	r1, #64	; 0x40
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f814 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e006      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	e03b      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d037      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe fc48 	bl	8001188 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e03a      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d020      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d01d      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b08      	cmp	r3, #8
 8002934:	d116      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f81d 	bl	800298c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e00f      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d0b4      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b095      	sub	sp, #84	; 0x54
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b4:	643a      	str	r2, [r7, #64]	; 0x40
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d119      	bne.n	8002a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a46:	bf00      	nop
 8002a48:	3754      	adds	r7, #84	; 0x54
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b0c0      	sub	sp, #256	; 0x100
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	ea40 0301 	orr.w	r3, r0, r1
 8002a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002aac:	f021 010c 	bic.w	r1, r1, #12
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002aba:	430b      	orrs	r3, r1
 8002abc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ace:	6999      	ldr	r1, [r3, #24]
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	ea40 0301 	orr.w	r3, r0, r1
 8002ada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b8f      	ldr	r3, [pc, #572]	; (8002d20 <UART_SetConfig+0x2cc>)
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d005      	beq.n	8002af4 <UART_SetConfig+0xa0>
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b8d      	ldr	r3, [pc, #564]	; (8002d24 <UART_SetConfig+0x2d0>)
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d104      	bne.n	8002afe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af4:	f7fe ff12 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8002af8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002afc:	e003      	b.n	8002b06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002afe:	f7fe fef9 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 8002b02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b10:	f040 810c 	bne.w	8002d2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	1891      	adds	r1, r2, r2
 8002b2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b2e:	415b      	adcs	r3, r3
 8002b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b36:	4621      	mov	r1, r4
 8002b38:	eb12 0801 	adds.w	r8, r2, r1
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	eb43 0901 	adc.w	r9, r3, r1
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b56:	4690      	mov	r8, r2
 8002b58:	4699      	mov	r9, r3
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	eb18 0303 	adds.w	r3, r8, r3
 8002b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b64:	462b      	mov	r3, r5
 8002b66:	eb49 0303 	adc.w	r3, r9, r3
 8002b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b82:	460b      	mov	r3, r1
 8002b84:	18db      	adds	r3, r3, r3
 8002b86:	653b      	str	r3, [r7, #80]	; 0x50
 8002b88:	4613      	mov	r3, r2
 8002b8a:	eb42 0303 	adc.w	r3, r2, r3
 8002b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b98:	f7fd fb92 	bl	80002c0 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <UART_SetConfig+0x2d4>)
 8002ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	011c      	lsls	r4, r3, #4
 8002baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1891      	adds	r1, r2, r2
 8002bc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bc4:	415b      	adcs	r3, r3
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bcc:	4641      	mov	r1, r8
 8002bce:	eb12 0a01 	adds.w	sl, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bec:	4692      	mov	sl, r2
 8002bee:	469b      	mov	fp, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
 8002c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c2e:	f7fd fb47 	bl	80002c0 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <UART_SetConfig+0x2d4>)
 8002c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2264      	movs	r2, #100	; 0x64
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	1acb      	subs	r3, r1, r3
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <UART_SetConfig+0x2d4>)
 8002c50:	fba3 2302 	umull	r2, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c5c:	441c      	add	r4, r3
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c80:	4641      	mov	r1, r8
 8002c82:	1851      	adds	r1, r2, r1
 8002c84:	6339      	str	r1, [r7, #48]	; 0x30
 8002c86:	4649      	mov	r1, r9
 8002c88:	414b      	adcs	r3, r1
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c98:	4659      	mov	r1, fp
 8002c9a:	00cb      	lsls	r3, r1, #3
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	00ca      	lsls	r2, r1, #3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	4642      	mov	r2, r8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	18db      	adds	r3, r3, r3
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cda:	4613      	mov	r3, r2
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ce6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cea:	f7fd fae9 	bl	80002c0 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <UART_SetConfig+0x2d4>)
 8002cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	2164      	movs	r1, #100	; 0x64
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	3332      	adds	r3, #50	; 0x32
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <UART_SetConfig+0x2d4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 0207 	and.w	r2, r3, #7
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4422      	add	r2, r4
 8002d1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d1c:	e106      	b.n	8002f2c <UART_SetConfig+0x4d8>
 8002d1e:	bf00      	nop
 8002d20:	40011000 	.word	0x40011000
 8002d24:	40011400 	.word	0x40011400
 8002d28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d30:	2200      	movs	r2, #0
 8002d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d3e:	4642      	mov	r2, r8
 8002d40:	464b      	mov	r3, r9
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	6239      	str	r1, [r7, #32]
 8002d46:	415b      	adcs	r3, r3
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4e:	4641      	mov	r1, r8
 8002d50:	1854      	adds	r4, r2, r1
 8002d52:	4649      	mov	r1, r9
 8002d54:	eb43 0501 	adc.w	r5, r3, r1
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	00eb      	lsls	r3, r5, #3
 8002d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d66:	00e2      	lsls	r2, r4, #3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	18e3      	adds	r3, r4, r3
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d74:	464b      	mov	r3, r9
 8002d76:	eb45 0303 	adc.w	r3, r5, r3
 8002d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	008b      	lsls	r3, r1, #2
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da4:	4621      	mov	r1, r4
 8002da6:	008a      	lsls	r2, r1, #2
 8002da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dac:	f7fd fa88 	bl	80002c0 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4b60      	ldr	r3, [pc, #384]	; (8002f38 <UART_SetConfig+0x4e4>)
 8002db6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	011c      	lsls	r4, r3, #4
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	1891      	adds	r1, r2, r2
 8002dd6:	61b9      	str	r1, [r7, #24]
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de0:	4641      	mov	r1, r8
 8002de2:	1851      	adds	r1, r2, r1
 8002de4:	6139      	str	r1, [r7, #16]
 8002de6:	4649      	mov	r1, r9
 8002de8:	414b      	adcs	r3, r1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df8:	4659      	mov	r1, fp
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4651      	mov	r1, sl
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e14:	464b      	mov	r3, r9
 8002e16:	460a      	mov	r2, r1
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e38:	4649      	mov	r1, r9
 8002e3a:	008b      	lsls	r3, r1, #2
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e42:	4641      	mov	r1, r8
 8002e44:	008a      	lsls	r2, r1, #2
 8002e46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e4a:	f7fd fa39 	bl	80002c0 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <UART_SetConfig+0x4e4>)
 8002e56:	fba3 2301 	umull	r2, r3, r3, r1
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2264      	movs	r2, #100	; 0x64
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	1acb      	subs	r3, r1, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <UART_SetConfig+0x4e4>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	441c      	add	r4, r3
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e7e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e94:	4641      	mov	r1, r8
 8002e96:	1851      	adds	r1, r2, r1
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	414b      	adcs	r3, r1
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eac:	4659      	mov	r1, fp
 8002eae:	00cb      	lsls	r3, r1, #3
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	00ca      	lsls	r2, r1, #3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	460a      	mov	r2, r1
 8002eca:	eb42 0303 	adc.w	r3, r2, r3
 8002ece:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8002eda:	667a      	str	r2, [r7, #100]	; 0x64
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ee8:	4649      	mov	r1, r9
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	4641      	mov	r1, r8
 8002eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	008a      	lsls	r2, r1, #2
 8002ef6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002efa:	f7fd f9e1 	bl	80002c0 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <UART_SetConfig+0x4e4>)
 8002f04:	fba3 1302 	umull	r1, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2164      	movs	r1, #100	; 0x64
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	; 0x32
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <UART_SetConfig+0x4e4>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4422      	add	r2, r4
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f32:	46bd      	mov	sp, r7
 8002f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f38:	51eb851f 	.word	0x51eb851f

08002f3c <siprintf>:
 8002f3c:	b40e      	push	{r1, r2, r3}
 8002f3e:	b500      	push	{lr}
 8002f40:	b09c      	sub	sp, #112	; 0x70
 8002f42:	ab1d      	add	r3, sp, #116	; 0x74
 8002f44:	9002      	str	r0, [sp, #8]
 8002f46:	9006      	str	r0, [sp, #24]
 8002f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f4c:	4809      	ldr	r0, [pc, #36]	; (8002f74 <siprintf+0x38>)
 8002f4e:	9107      	str	r1, [sp, #28]
 8002f50:	9104      	str	r1, [sp, #16]
 8002f52:	4909      	ldr	r1, [pc, #36]	; (8002f78 <siprintf+0x3c>)
 8002f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f58:	9105      	str	r1, [sp, #20]
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	a902      	add	r1, sp, #8
 8002f60:	f000 f992 	bl	8003288 <_svfiprintf_r>
 8002f64:	9b02      	ldr	r3, [sp, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	b01c      	add	sp, #112	; 0x70
 8002f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f70:	b003      	add	sp, #12
 8002f72:	4770      	bx	lr
 8002f74:	20000138 	.word	0x20000138
 8002f78:	ffff0208 	.word	0xffff0208

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <__errno>:
 8002f8c:	4b01      	ldr	r3, [pc, #4]	; (8002f94 <__errno+0x8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000138 	.word	0x20000138

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	; (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	; (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	; (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	; (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 fc6a 	bl	8003884 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003910 	.word	0x08003910
 8002fd4:	08003910 	.word	0x08003910
 8002fd8:	08003910 	.word	0x08003910
 8002fdc:	08003914 	.word	0x08003914

08002fe0 <__retarget_lock_acquire_recursive>:
 8002fe0:	4770      	bx	lr

08002fe2 <__retarget_lock_release_recursive>:
 8002fe2:	4770      	bx	lr

08002fe4 <_free_r>:
 8002fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	d044      	beq.n	8003074 <_free_r+0x90>
 8002fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fee:	9001      	str	r0, [sp, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8002ff6:	bfb8      	it	lt
 8002ff8:	18e4      	addlt	r4, r4, r3
 8002ffa:	f000 f8df 	bl	80031bc <__malloc_lock>
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <_free_r+0x94>)
 8003000:	9801      	ldr	r0, [sp, #4]
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	b933      	cbnz	r3, 8003014 <_free_r+0x30>
 8003006:	6063      	str	r3, [r4, #4]
 8003008:	6014      	str	r4, [r2, #0]
 800300a:	b003      	add	sp, #12
 800300c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003010:	f000 b8da 	b.w	80031c8 <__malloc_unlock>
 8003014:	42a3      	cmp	r3, r4
 8003016:	d908      	bls.n	800302a <_free_r+0x46>
 8003018:	6825      	ldr	r5, [r4, #0]
 800301a:	1961      	adds	r1, r4, r5
 800301c:	428b      	cmp	r3, r1
 800301e:	bf01      	itttt	eq
 8003020:	6819      	ldreq	r1, [r3, #0]
 8003022:	685b      	ldreq	r3, [r3, #4]
 8003024:	1949      	addeq	r1, r1, r5
 8003026:	6021      	streq	r1, [r4, #0]
 8003028:	e7ed      	b.n	8003006 <_free_r+0x22>
 800302a:	461a      	mov	r2, r3
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b10b      	cbz	r3, 8003034 <_free_r+0x50>
 8003030:	42a3      	cmp	r3, r4
 8003032:	d9fa      	bls.n	800302a <_free_r+0x46>
 8003034:	6811      	ldr	r1, [r2, #0]
 8003036:	1855      	adds	r5, r2, r1
 8003038:	42a5      	cmp	r5, r4
 800303a:	d10b      	bne.n	8003054 <_free_r+0x70>
 800303c:	6824      	ldr	r4, [r4, #0]
 800303e:	4421      	add	r1, r4
 8003040:	1854      	adds	r4, r2, r1
 8003042:	42a3      	cmp	r3, r4
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	d1e0      	bne.n	800300a <_free_r+0x26>
 8003048:	681c      	ldr	r4, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	6053      	str	r3, [r2, #4]
 800304e:	440c      	add	r4, r1
 8003050:	6014      	str	r4, [r2, #0]
 8003052:	e7da      	b.n	800300a <_free_r+0x26>
 8003054:	d902      	bls.n	800305c <_free_r+0x78>
 8003056:	230c      	movs	r3, #12
 8003058:	6003      	str	r3, [r0, #0]
 800305a:	e7d6      	b.n	800300a <_free_r+0x26>
 800305c:	6825      	ldr	r5, [r4, #0]
 800305e:	1961      	adds	r1, r4, r5
 8003060:	428b      	cmp	r3, r1
 8003062:	bf04      	itt	eq
 8003064:	6819      	ldreq	r1, [r3, #0]
 8003066:	685b      	ldreq	r3, [r3, #4]
 8003068:	6063      	str	r3, [r4, #4]
 800306a:	bf04      	itt	eq
 800306c:	1949      	addeq	r1, r1, r5
 800306e:	6021      	streq	r1, [r4, #0]
 8003070:	6054      	str	r4, [r2, #4]
 8003072:	e7ca      	b.n	800300a <_free_r+0x26>
 8003074:	b003      	add	sp, #12
 8003076:	bd30      	pop	{r4, r5, pc}
 8003078:	2001c540 	.word	0x2001c540

0800307c <sbrk_aligned>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4e0e      	ldr	r6, [pc, #56]	; (80030b8 <sbrk_aligned+0x3c>)
 8003080:	460c      	mov	r4, r1
 8003082:	6831      	ldr	r1, [r6, #0]
 8003084:	4605      	mov	r5, r0
 8003086:	b911      	cbnz	r1, 800308e <sbrk_aligned+0x12>
 8003088:	f000 fba6 	bl	80037d8 <_sbrk_r>
 800308c:	6030      	str	r0, [r6, #0]
 800308e:	4621      	mov	r1, r4
 8003090:	4628      	mov	r0, r5
 8003092:	f000 fba1 	bl	80037d8 <_sbrk_r>
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	d00a      	beq.n	80030b0 <sbrk_aligned+0x34>
 800309a:	1cc4      	adds	r4, r0, #3
 800309c:	f024 0403 	bic.w	r4, r4, #3
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d007      	beq.n	80030b4 <sbrk_aligned+0x38>
 80030a4:	1a21      	subs	r1, r4, r0
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 fb96 	bl	80037d8 <_sbrk_r>
 80030ac:	3001      	adds	r0, #1
 80030ae:	d101      	bne.n	80030b4 <sbrk_aligned+0x38>
 80030b0:	f04f 34ff 	mov.w	r4, #4294967295
 80030b4:	4620      	mov	r0, r4
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	2001c544 	.word	0x2001c544

080030bc <_malloc_r>:
 80030bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c0:	1ccd      	adds	r5, r1, #3
 80030c2:	f025 0503 	bic.w	r5, r5, #3
 80030c6:	3508      	adds	r5, #8
 80030c8:	2d0c      	cmp	r5, #12
 80030ca:	bf38      	it	cc
 80030cc:	250c      	movcc	r5, #12
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	4607      	mov	r7, r0
 80030d2:	db01      	blt.n	80030d8 <_malloc_r+0x1c>
 80030d4:	42a9      	cmp	r1, r5
 80030d6:	d905      	bls.n	80030e4 <_malloc_r+0x28>
 80030d8:	230c      	movs	r3, #12
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	2600      	movs	r6, #0
 80030de:	4630      	mov	r0, r6
 80030e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031b8 <_malloc_r+0xfc>
 80030e8:	f000 f868 	bl	80031bc <__malloc_lock>
 80030ec:	f8d8 3000 	ldr.w	r3, [r8]
 80030f0:	461c      	mov	r4, r3
 80030f2:	bb5c      	cbnz	r4, 800314c <_malloc_r+0x90>
 80030f4:	4629      	mov	r1, r5
 80030f6:	4638      	mov	r0, r7
 80030f8:	f7ff ffc0 	bl	800307c <sbrk_aligned>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	4604      	mov	r4, r0
 8003100:	d155      	bne.n	80031ae <_malloc_r+0xf2>
 8003102:	f8d8 4000 	ldr.w	r4, [r8]
 8003106:	4626      	mov	r6, r4
 8003108:	2e00      	cmp	r6, #0
 800310a:	d145      	bne.n	8003198 <_malloc_r+0xdc>
 800310c:	2c00      	cmp	r4, #0
 800310e:	d048      	beq.n	80031a2 <_malloc_r+0xe6>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	4631      	mov	r1, r6
 8003114:	4638      	mov	r0, r7
 8003116:	eb04 0903 	add.w	r9, r4, r3
 800311a:	f000 fb5d 	bl	80037d8 <_sbrk_r>
 800311e:	4581      	cmp	r9, r0
 8003120:	d13f      	bne.n	80031a2 <_malloc_r+0xe6>
 8003122:	6821      	ldr	r1, [r4, #0]
 8003124:	1a6d      	subs	r5, r5, r1
 8003126:	4629      	mov	r1, r5
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ffa7 	bl	800307c <sbrk_aligned>
 800312e:	3001      	adds	r0, #1
 8003130:	d037      	beq.n	80031a2 <_malloc_r+0xe6>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	442b      	add	r3, r5
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	f8d8 3000 	ldr.w	r3, [r8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d038      	beq.n	80031b2 <_malloc_r+0xf6>
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	42a2      	cmp	r2, r4
 8003144:	d12b      	bne.n	800319e <_malloc_r+0xe2>
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e00f      	b.n	800316c <_malloc_r+0xb0>
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	1b52      	subs	r2, r2, r5
 8003150:	d41f      	bmi.n	8003192 <_malloc_r+0xd6>
 8003152:	2a0b      	cmp	r2, #11
 8003154:	d917      	bls.n	8003186 <_malloc_r+0xca>
 8003156:	1961      	adds	r1, r4, r5
 8003158:	42a3      	cmp	r3, r4
 800315a:	6025      	str	r5, [r4, #0]
 800315c:	bf18      	it	ne
 800315e:	6059      	strne	r1, [r3, #4]
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	bf08      	it	eq
 8003164:	f8c8 1000 	streq.w	r1, [r8]
 8003168:	5162      	str	r2, [r4, r5]
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	4638      	mov	r0, r7
 800316e:	f104 060b 	add.w	r6, r4, #11
 8003172:	f000 f829 	bl	80031c8 <__malloc_unlock>
 8003176:	f026 0607 	bic.w	r6, r6, #7
 800317a:	1d23      	adds	r3, r4, #4
 800317c:	1af2      	subs	r2, r6, r3
 800317e:	d0ae      	beq.n	80030de <_malloc_r+0x22>
 8003180:	1b9b      	subs	r3, r3, r6
 8003182:	50a3      	str	r3, [r4, r2]
 8003184:	e7ab      	b.n	80030de <_malloc_r+0x22>
 8003186:	42a3      	cmp	r3, r4
 8003188:	6862      	ldr	r2, [r4, #4]
 800318a:	d1dd      	bne.n	8003148 <_malloc_r+0x8c>
 800318c:	f8c8 2000 	str.w	r2, [r8]
 8003190:	e7ec      	b.n	800316c <_malloc_r+0xb0>
 8003192:	4623      	mov	r3, r4
 8003194:	6864      	ldr	r4, [r4, #4]
 8003196:	e7ac      	b.n	80030f2 <_malloc_r+0x36>
 8003198:	4634      	mov	r4, r6
 800319a:	6876      	ldr	r6, [r6, #4]
 800319c:	e7b4      	b.n	8003108 <_malloc_r+0x4c>
 800319e:	4613      	mov	r3, r2
 80031a0:	e7cc      	b.n	800313c <_malloc_r+0x80>
 80031a2:	230c      	movs	r3, #12
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4638      	mov	r0, r7
 80031a8:	f000 f80e 	bl	80031c8 <__malloc_unlock>
 80031ac:	e797      	b.n	80030de <_malloc_r+0x22>
 80031ae:	6025      	str	r5, [r4, #0]
 80031b0:	e7dc      	b.n	800316c <_malloc_r+0xb0>
 80031b2:	605b      	str	r3, [r3, #4]
 80031b4:	deff      	udf	#255	; 0xff
 80031b6:	bf00      	nop
 80031b8:	2001c540 	.word	0x2001c540

080031bc <__malloc_lock>:
 80031bc:	4801      	ldr	r0, [pc, #4]	; (80031c4 <__malloc_lock+0x8>)
 80031be:	f7ff bf0f 	b.w	8002fe0 <__retarget_lock_acquire_recursive>
 80031c2:	bf00      	nop
 80031c4:	2001c53c 	.word	0x2001c53c

080031c8 <__malloc_unlock>:
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <__malloc_unlock+0x8>)
 80031ca:	f7ff bf0a 	b.w	8002fe2 <__retarget_lock_release_recursive>
 80031ce:	bf00      	nop
 80031d0:	2001c53c 	.word	0x2001c53c

080031d4 <__ssputs_r>:
 80031d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	688e      	ldr	r6, [r1, #8]
 80031da:	461f      	mov	r7, r3
 80031dc:	42be      	cmp	r6, r7
 80031de:	680b      	ldr	r3, [r1, #0]
 80031e0:	4682      	mov	sl, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	4690      	mov	r8, r2
 80031e6:	d82c      	bhi.n	8003242 <__ssputs_r+0x6e>
 80031e8:	898a      	ldrh	r2, [r1, #12]
 80031ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031ee:	d026      	beq.n	800323e <__ssputs_r+0x6a>
 80031f0:	6965      	ldr	r5, [r4, #20]
 80031f2:	6909      	ldr	r1, [r1, #16]
 80031f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031f8:	eba3 0901 	sub.w	r9, r3, r1
 80031fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003200:	1c7b      	adds	r3, r7, #1
 8003202:	444b      	add	r3, r9
 8003204:	106d      	asrs	r5, r5, #1
 8003206:	429d      	cmp	r5, r3
 8003208:	bf38      	it	cc
 800320a:	461d      	movcc	r5, r3
 800320c:	0553      	lsls	r3, r2, #21
 800320e:	d527      	bpl.n	8003260 <__ssputs_r+0x8c>
 8003210:	4629      	mov	r1, r5
 8003212:	f7ff ff53 	bl	80030bc <_malloc_r>
 8003216:	4606      	mov	r6, r0
 8003218:	b360      	cbz	r0, 8003274 <__ssputs_r+0xa0>
 800321a:	6921      	ldr	r1, [r4, #16]
 800321c:	464a      	mov	r2, r9
 800321e:	f000 faeb 	bl	80037f8 <memcpy>
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	6126      	str	r6, [r4, #16]
 8003230:	6165      	str	r5, [r4, #20]
 8003232:	444e      	add	r6, r9
 8003234:	eba5 0509 	sub.w	r5, r5, r9
 8003238:	6026      	str	r6, [r4, #0]
 800323a:	60a5      	str	r5, [r4, #8]
 800323c:	463e      	mov	r6, r7
 800323e:	42be      	cmp	r6, r7
 8003240:	d900      	bls.n	8003244 <__ssputs_r+0x70>
 8003242:	463e      	mov	r6, r7
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	4632      	mov	r2, r6
 8003248:	4641      	mov	r1, r8
 800324a:	f000 faab 	bl	80037a4 <memmove>
 800324e:	68a3      	ldr	r3, [r4, #8]
 8003250:	1b9b      	subs	r3, r3, r6
 8003252:	60a3      	str	r3, [r4, #8]
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	4433      	add	r3, r6
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	2000      	movs	r0, #0
 800325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003260:	462a      	mov	r2, r5
 8003262:	f000 fad7 	bl	8003814 <_realloc_r>
 8003266:	4606      	mov	r6, r0
 8003268:	2800      	cmp	r0, #0
 800326a:	d1e0      	bne.n	800322e <__ssputs_r+0x5a>
 800326c:	6921      	ldr	r1, [r4, #16]
 800326e:	4650      	mov	r0, sl
 8003270:	f7ff feb8 	bl	8002fe4 <_free_r>
 8003274:	230c      	movs	r3, #12
 8003276:	f8ca 3000 	str.w	r3, [sl]
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	f04f 30ff 	mov.w	r0, #4294967295
 8003286:	e7e9      	b.n	800325c <__ssputs_r+0x88>

08003288 <_svfiprintf_r>:
 8003288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328c:	4698      	mov	r8, r3
 800328e:	898b      	ldrh	r3, [r1, #12]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	b09d      	sub	sp, #116	; 0x74
 8003294:	4607      	mov	r7, r0
 8003296:	460d      	mov	r5, r1
 8003298:	4614      	mov	r4, r2
 800329a:	d50e      	bpl.n	80032ba <_svfiprintf_r+0x32>
 800329c:	690b      	ldr	r3, [r1, #16]
 800329e:	b963      	cbnz	r3, 80032ba <_svfiprintf_r+0x32>
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	f7ff ff0b 	bl	80030bc <_malloc_r>
 80032a6:	6028      	str	r0, [r5, #0]
 80032a8:	6128      	str	r0, [r5, #16]
 80032aa:	b920      	cbnz	r0, 80032b6 <_svfiprintf_r+0x2e>
 80032ac:	230c      	movs	r3, #12
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	e0d0      	b.n	8003458 <_svfiprintf_r+0x1d0>
 80032b6:	2340      	movs	r3, #64	; 0x40
 80032b8:	616b      	str	r3, [r5, #20]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
 80032be:	2320      	movs	r3, #32
 80032c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c8:	2330      	movs	r3, #48	; 0x30
 80032ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003470 <_svfiprintf_r+0x1e8>
 80032ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032d2:	f04f 0901 	mov.w	r9, #1
 80032d6:	4623      	mov	r3, r4
 80032d8:	469a      	mov	sl, r3
 80032da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032de:	b10a      	cbz	r2, 80032e4 <_svfiprintf_r+0x5c>
 80032e0:	2a25      	cmp	r2, #37	; 0x25
 80032e2:	d1f9      	bne.n	80032d8 <_svfiprintf_r+0x50>
 80032e4:	ebba 0b04 	subs.w	fp, sl, r4
 80032e8:	d00b      	beq.n	8003302 <_svfiprintf_r+0x7a>
 80032ea:	465b      	mov	r3, fp
 80032ec:	4622      	mov	r2, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	4638      	mov	r0, r7
 80032f2:	f7ff ff6f 	bl	80031d4 <__ssputs_r>
 80032f6:	3001      	adds	r0, #1
 80032f8:	f000 80a9 	beq.w	800344e <_svfiprintf_r+0x1c6>
 80032fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032fe:	445a      	add	r2, fp
 8003300:	9209      	str	r2, [sp, #36]	; 0x24
 8003302:	f89a 3000 	ldrb.w	r3, [sl]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80a1 	beq.w	800344e <_svfiprintf_r+0x1c6>
 800330c:	2300      	movs	r3, #0
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003316:	f10a 0a01 	add.w	sl, sl, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	9307      	str	r3, [sp, #28]
 800331e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003322:	931a      	str	r3, [sp, #104]	; 0x68
 8003324:	4654      	mov	r4, sl
 8003326:	2205      	movs	r2, #5
 8003328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332c:	4850      	ldr	r0, [pc, #320]	; (8003470 <_svfiprintf_r+0x1e8>)
 800332e:	f7fc ff77 	bl	8000220 <memchr>
 8003332:	9a04      	ldr	r2, [sp, #16]
 8003334:	b9d8      	cbnz	r0, 800336e <_svfiprintf_r+0xe6>
 8003336:	06d0      	lsls	r0, r2, #27
 8003338:	bf44      	itt	mi
 800333a:	2320      	movmi	r3, #32
 800333c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003340:	0711      	lsls	r1, r2, #28
 8003342:	bf44      	itt	mi
 8003344:	232b      	movmi	r3, #43	; 0x2b
 8003346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800334a:	f89a 3000 	ldrb.w	r3, [sl]
 800334e:	2b2a      	cmp	r3, #42	; 0x2a
 8003350:	d015      	beq.n	800337e <_svfiprintf_r+0xf6>
 8003352:	9a07      	ldr	r2, [sp, #28]
 8003354:	4654      	mov	r4, sl
 8003356:	2000      	movs	r0, #0
 8003358:	f04f 0c0a 	mov.w	ip, #10
 800335c:	4621      	mov	r1, r4
 800335e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003362:	3b30      	subs	r3, #48	; 0x30
 8003364:	2b09      	cmp	r3, #9
 8003366:	d94d      	bls.n	8003404 <_svfiprintf_r+0x17c>
 8003368:	b1b0      	cbz	r0, 8003398 <_svfiprintf_r+0x110>
 800336a:	9207      	str	r2, [sp, #28]
 800336c:	e014      	b.n	8003398 <_svfiprintf_r+0x110>
 800336e:	eba0 0308 	sub.w	r3, r0, r8
 8003372:	fa09 f303 	lsl.w	r3, r9, r3
 8003376:	4313      	orrs	r3, r2
 8003378:	9304      	str	r3, [sp, #16]
 800337a:	46a2      	mov	sl, r4
 800337c:	e7d2      	b.n	8003324 <_svfiprintf_r+0x9c>
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	1d19      	adds	r1, r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	9103      	str	r1, [sp, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	bfbb      	ittet	lt
 800338a:	425b      	neglt	r3, r3
 800338c:	f042 0202 	orrlt.w	r2, r2, #2
 8003390:	9307      	strge	r3, [sp, #28]
 8003392:	9307      	strlt	r3, [sp, #28]
 8003394:	bfb8      	it	lt
 8003396:	9204      	strlt	r2, [sp, #16]
 8003398:	7823      	ldrb	r3, [r4, #0]
 800339a:	2b2e      	cmp	r3, #46	; 0x2e
 800339c:	d10c      	bne.n	80033b8 <_svfiprintf_r+0x130>
 800339e:	7863      	ldrb	r3, [r4, #1]
 80033a0:	2b2a      	cmp	r3, #42	; 0x2a
 80033a2:	d134      	bne.n	800340e <_svfiprintf_r+0x186>
 80033a4:	9b03      	ldr	r3, [sp, #12]
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	9203      	str	r2, [sp, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bfb8      	it	lt
 80033b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80033b4:	3402      	adds	r4, #2
 80033b6:	9305      	str	r3, [sp, #20]
 80033b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003480 <_svfiprintf_r+0x1f8>
 80033bc:	7821      	ldrb	r1, [r4, #0]
 80033be:	2203      	movs	r2, #3
 80033c0:	4650      	mov	r0, sl
 80033c2:	f7fc ff2d 	bl	8000220 <memchr>
 80033c6:	b138      	cbz	r0, 80033d8 <_svfiprintf_r+0x150>
 80033c8:	9b04      	ldr	r3, [sp, #16]
 80033ca:	eba0 000a 	sub.w	r0, r0, sl
 80033ce:	2240      	movs	r2, #64	; 0x40
 80033d0:	4082      	lsls	r2, r0
 80033d2:	4313      	orrs	r3, r2
 80033d4:	3401      	adds	r4, #1
 80033d6:	9304      	str	r3, [sp, #16]
 80033d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033dc:	4825      	ldr	r0, [pc, #148]	; (8003474 <_svfiprintf_r+0x1ec>)
 80033de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033e2:	2206      	movs	r2, #6
 80033e4:	f7fc ff1c 	bl	8000220 <memchr>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d038      	beq.n	800345e <_svfiprintf_r+0x1d6>
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <_svfiprintf_r+0x1f0>)
 80033ee:	bb1b      	cbnz	r3, 8003438 <_svfiprintf_r+0x1b0>
 80033f0:	9b03      	ldr	r3, [sp, #12]
 80033f2:	3307      	adds	r3, #7
 80033f4:	f023 0307 	bic.w	r3, r3, #7
 80033f8:	3308      	adds	r3, #8
 80033fa:	9303      	str	r3, [sp, #12]
 80033fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033fe:	4433      	add	r3, r6
 8003400:	9309      	str	r3, [sp, #36]	; 0x24
 8003402:	e768      	b.n	80032d6 <_svfiprintf_r+0x4e>
 8003404:	fb0c 3202 	mla	r2, ip, r2, r3
 8003408:	460c      	mov	r4, r1
 800340a:	2001      	movs	r0, #1
 800340c:	e7a6      	b.n	800335c <_svfiprintf_r+0xd4>
 800340e:	2300      	movs	r3, #0
 8003410:	3401      	adds	r4, #1
 8003412:	9305      	str	r3, [sp, #20]
 8003414:	4619      	mov	r1, r3
 8003416:	f04f 0c0a 	mov.w	ip, #10
 800341a:	4620      	mov	r0, r4
 800341c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003420:	3a30      	subs	r2, #48	; 0x30
 8003422:	2a09      	cmp	r2, #9
 8003424:	d903      	bls.n	800342e <_svfiprintf_r+0x1a6>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0c6      	beq.n	80033b8 <_svfiprintf_r+0x130>
 800342a:	9105      	str	r1, [sp, #20]
 800342c:	e7c4      	b.n	80033b8 <_svfiprintf_r+0x130>
 800342e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003432:	4604      	mov	r4, r0
 8003434:	2301      	movs	r3, #1
 8003436:	e7f0      	b.n	800341a <_svfiprintf_r+0x192>
 8003438:	ab03      	add	r3, sp, #12
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	462a      	mov	r2, r5
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <_svfiprintf_r+0x1f4>)
 8003440:	a904      	add	r1, sp, #16
 8003442:	4638      	mov	r0, r7
 8003444:	f3af 8000 	nop.w
 8003448:	1c42      	adds	r2, r0, #1
 800344a:	4606      	mov	r6, r0
 800344c:	d1d6      	bne.n	80033fc <_svfiprintf_r+0x174>
 800344e:	89ab      	ldrh	r3, [r5, #12]
 8003450:	065b      	lsls	r3, r3, #25
 8003452:	f53f af2d 	bmi.w	80032b0 <_svfiprintf_r+0x28>
 8003456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003458:	b01d      	add	sp, #116	; 0x74
 800345a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800345e:	ab03      	add	r3, sp, #12
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	462a      	mov	r2, r5
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <_svfiprintf_r+0x1f4>)
 8003466:	a904      	add	r1, sp, #16
 8003468:	4638      	mov	r0, r7
 800346a:	f000 f879 	bl	8003560 <_printf_i>
 800346e:	e7eb      	b.n	8003448 <_svfiprintf_r+0x1c0>
 8003470:	080038d4 	.word	0x080038d4
 8003474:	080038de 	.word	0x080038de
 8003478:	00000000 	.word	0x00000000
 800347c:	080031d5 	.word	0x080031d5
 8003480:	080038da 	.word	0x080038da

08003484 <_printf_common>:
 8003484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	4616      	mov	r6, r2
 800348a:	4699      	mov	r9, r3
 800348c:	688a      	ldr	r2, [r1, #8]
 800348e:	690b      	ldr	r3, [r1, #16]
 8003490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003494:	4293      	cmp	r3, r2
 8003496:	bfb8      	it	lt
 8003498:	4613      	movlt	r3, r2
 800349a:	6033      	str	r3, [r6, #0]
 800349c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034a0:	4607      	mov	r7, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	b10a      	cbz	r2, 80034aa <_printf_common+0x26>
 80034a6:	3301      	adds	r3, #1
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	0699      	lsls	r1, r3, #26
 80034ae:	bf42      	ittt	mi
 80034b0:	6833      	ldrmi	r3, [r6, #0]
 80034b2:	3302      	addmi	r3, #2
 80034b4:	6033      	strmi	r3, [r6, #0]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	f015 0506 	ands.w	r5, r5, #6
 80034bc:	d106      	bne.n	80034cc <_printf_common+0x48>
 80034be:	f104 0a19 	add.w	sl, r4, #25
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	6832      	ldr	r2, [r6, #0]
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	42ab      	cmp	r3, r5
 80034ca:	dc26      	bgt.n	800351a <_printf_common+0x96>
 80034cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034d0:	1e13      	subs	r3, r2, #0
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	0692      	lsls	r2, r2, #26
 80034da:	d42b      	bmi.n	8003534 <_printf_common+0xb0>
 80034dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034e0:	4649      	mov	r1, r9
 80034e2:	4638      	mov	r0, r7
 80034e4:	47c0      	blx	r8
 80034e6:	3001      	adds	r0, #1
 80034e8:	d01e      	beq.n	8003528 <_printf_common+0xa4>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	f003 0306 	and.w	r3, r3, #6
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf02      	ittt	eq
 80034f6:	68e5      	ldreq	r5, [r4, #12]
 80034f8:	6833      	ldreq	r3, [r6, #0]
 80034fa:	1aed      	subeq	r5, r5, r3
 80034fc:	68a3      	ldr	r3, [r4, #8]
 80034fe:	bf0c      	ite	eq
 8003500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003504:	2500      	movne	r5, #0
 8003506:	4293      	cmp	r3, r2
 8003508:	bfc4      	itt	gt
 800350a:	1a9b      	subgt	r3, r3, r2
 800350c:	18ed      	addgt	r5, r5, r3
 800350e:	2600      	movs	r6, #0
 8003510:	341a      	adds	r4, #26
 8003512:	42b5      	cmp	r5, r6
 8003514:	d11a      	bne.n	800354c <_printf_common+0xc8>
 8003516:	2000      	movs	r0, #0
 8003518:	e008      	b.n	800352c <_printf_common+0xa8>
 800351a:	2301      	movs	r3, #1
 800351c:	4652      	mov	r2, sl
 800351e:	4649      	mov	r1, r9
 8003520:	4638      	mov	r0, r7
 8003522:	47c0      	blx	r8
 8003524:	3001      	adds	r0, #1
 8003526:	d103      	bne.n	8003530 <_printf_common+0xac>
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003530:	3501      	adds	r5, #1
 8003532:	e7c6      	b.n	80034c2 <_printf_common+0x3e>
 8003534:	18e1      	adds	r1, r4, r3
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	2030      	movs	r0, #48	; 0x30
 800353a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800353e:	4422      	add	r2, r4
 8003540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003548:	3302      	adds	r3, #2
 800354a:	e7c7      	b.n	80034dc <_printf_common+0x58>
 800354c:	2301      	movs	r3, #1
 800354e:	4622      	mov	r2, r4
 8003550:	4649      	mov	r1, r9
 8003552:	4638      	mov	r0, r7
 8003554:	47c0      	blx	r8
 8003556:	3001      	adds	r0, #1
 8003558:	d0e6      	beq.n	8003528 <_printf_common+0xa4>
 800355a:	3601      	adds	r6, #1
 800355c:	e7d9      	b.n	8003512 <_printf_common+0x8e>
	...

08003560 <_printf_i>:
 8003560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003564:	7e0f      	ldrb	r7, [r1, #24]
 8003566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003568:	2f78      	cmp	r7, #120	; 0x78
 800356a:	4691      	mov	r9, r2
 800356c:	4680      	mov	r8, r0
 800356e:	460c      	mov	r4, r1
 8003570:	469a      	mov	sl, r3
 8003572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003576:	d807      	bhi.n	8003588 <_printf_i+0x28>
 8003578:	2f62      	cmp	r7, #98	; 0x62
 800357a:	d80a      	bhi.n	8003592 <_printf_i+0x32>
 800357c:	2f00      	cmp	r7, #0
 800357e:	f000 80d4 	beq.w	800372a <_printf_i+0x1ca>
 8003582:	2f58      	cmp	r7, #88	; 0x58
 8003584:	f000 80c0 	beq.w	8003708 <_printf_i+0x1a8>
 8003588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800358c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003590:	e03a      	b.n	8003608 <_printf_i+0xa8>
 8003592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003596:	2b15      	cmp	r3, #21
 8003598:	d8f6      	bhi.n	8003588 <_printf_i+0x28>
 800359a:	a101      	add	r1, pc, #4	; (adr r1, 80035a0 <_printf_i+0x40>)
 800359c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035a0:	080035f9 	.word	0x080035f9
 80035a4:	0800360d 	.word	0x0800360d
 80035a8:	08003589 	.word	0x08003589
 80035ac:	08003589 	.word	0x08003589
 80035b0:	08003589 	.word	0x08003589
 80035b4:	08003589 	.word	0x08003589
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	08003589 	.word	0x08003589
 80035c0:	08003589 	.word	0x08003589
 80035c4:	08003589 	.word	0x08003589
 80035c8:	08003589 	.word	0x08003589
 80035cc:	08003711 	.word	0x08003711
 80035d0:	08003639 	.word	0x08003639
 80035d4:	080036cb 	.word	0x080036cb
 80035d8:	08003589 	.word	0x08003589
 80035dc:	08003589 	.word	0x08003589
 80035e0:	08003733 	.word	0x08003733
 80035e4:	08003589 	.word	0x08003589
 80035e8:	08003639 	.word	0x08003639
 80035ec:	08003589 	.word	0x08003589
 80035f0:	08003589 	.word	0x08003589
 80035f4:	080036d3 	.word	0x080036d3
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	1d1a      	adds	r2, r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	602a      	str	r2, [r5, #0]
 8003600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003608:	2301      	movs	r3, #1
 800360a:	e09f      	b.n	800374c <_printf_i+0x1ec>
 800360c:	6820      	ldr	r0, [r4, #0]
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	0607      	lsls	r7, r0, #24
 8003612:	f103 0104 	add.w	r1, r3, #4
 8003616:	6029      	str	r1, [r5, #0]
 8003618:	d501      	bpl.n	800361e <_printf_i+0xbe>
 800361a:	681e      	ldr	r6, [r3, #0]
 800361c:	e003      	b.n	8003626 <_printf_i+0xc6>
 800361e:	0646      	lsls	r6, r0, #25
 8003620:	d5fb      	bpl.n	800361a <_printf_i+0xba>
 8003622:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003626:	2e00      	cmp	r6, #0
 8003628:	da03      	bge.n	8003632 <_printf_i+0xd2>
 800362a:	232d      	movs	r3, #45	; 0x2d
 800362c:	4276      	negs	r6, r6
 800362e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003632:	485a      	ldr	r0, [pc, #360]	; (800379c <_printf_i+0x23c>)
 8003634:	230a      	movs	r3, #10
 8003636:	e012      	b.n	800365e <_printf_i+0xfe>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1d19      	adds	r1, r3, #4
 800363e:	6029      	str	r1, [r5, #0]
 8003640:	0605      	lsls	r5, r0, #24
 8003642:	d501      	bpl.n	8003648 <_printf_i+0xe8>
 8003644:	681e      	ldr	r6, [r3, #0]
 8003646:	e002      	b.n	800364e <_printf_i+0xee>
 8003648:	0641      	lsls	r1, r0, #25
 800364a:	d5fb      	bpl.n	8003644 <_printf_i+0xe4>
 800364c:	881e      	ldrh	r6, [r3, #0]
 800364e:	4853      	ldr	r0, [pc, #332]	; (800379c <_printf_i+0x23c>)
 8003650:	2f6f      	cmp	r7, #111	; 0x6f
 8003652:	bf0c      	ite	eq
 8003654:	2308      	moveq	r3, #8
 8003656:	230a      	movne	r3, #10
 8003658:	2100      	movs	r1, #0
 800365a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365e:	6865      	ldr	r5, [r4, #4]
 8003660:	60a5      	str	r5, [r4, #8]
 8003662:	2d00      	cmp	r5, #0
 8003664:	bfa2      	ittt	ge
 8003666:	6821      	ldrge	r1, [r4, #0]
 8003668:	f021 0104 	bicge.w	r1, r1, #4
 800366c:	6021      	strge	r1, [r4, #0]
 800366e:	b90e      	cbnz	r6, 8003674 <_printf_i+0x114>
 8003670:	2d00      	cmp	r5, #0
 8003672:	d04b      	beq.n	800370c <_printf_i+0x1ac>
 8003674:	4615      	mov	r5, r2
 8003676:	fbb6 f1f3 	udiv	r1, r6, r3
 800367a:	fb03 6711 	mls	r7, r3, r1, r6
 800367e:	5dc7      	ldrb	r7, [r0, r7]
 8003680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003684:	4637      	mov	r7, r6
 8003686:	42bb      	cmp	r3, r7
 8003688:	460e      	mov	r6, r1
 800368a:	d9f4      	bls.n	8003676 <_printf_i+0x116>
 800368c:	2b08      	cmp	r3, #8
 800368e:	d10b      	bne.n	80036a8 <_printf_i+0x148>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	07de      	lsls	r6, r3, #31
 8003694:	d508      	bpl.n	80036a8 <_printf_i+0x148>
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	6861      	ldr	r1, [r4, #4]
 800369a:	4299      	cmp	r1, r3
 800369c:	bfde      	ittt	le
 800369e:	2330      	movle	r3, #48	; 0x30
 80036a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036a8:	1b52      	subs	r2, r2, r5
 80036aa:	6122      	str	r2, [r4, #16]
 80036ac:	f8cd a000 	str.w	sl, [sp]
 80036b0:	464b      	mov	r3, r9
 80036b2:	aa03      	add	r2, sp, #12
 80036b4:	4621      	mov	r1, r4
 80036b6:	4640      	mov	r0, r8
 80036b8:	f7ff fee4 	bl	8003484 <_printf_common>
 80036bc:	3001      	adds	r0, #1
 80036be:	d14a      	bne.n	8003756 <_printf_i+0x1f6>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b004      	add	sp, #16
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	4833      	ldr	r0, [pc, #204]	; (80037a0 <_printf_i+0x240>)
 80036d4:	2778      	movs	r7, #120	; 0x78
 80036d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	6829      	ldr	r1, [r5, #0]
 80036de:	061f      	lsls	r7, r3, #24
 80036e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80036e4:	d402      	bmi.n	80036ec <_printf_i+0x18c>
 80036e6:	065f      	lsls	r7, r3, #25
 80036e8:	bf48      	it	mi
 80036ea:	b2b6      	uxthmi	r6, r6
 80036ec:	07df      	lsls	r7, r3, #31
 80036ee:	bf48      	it	mi
 80036f0:	f043 0320 	orrmi.w	r3, r3, #32
 80036f4:	6029      	str	r1, [r5, #0]
 80036f6:	bf48      	it	mi
 80036f8:	6023      	strmi	r3, [r4, #0]
 80036fa:	b91e      	cbnz	r6, 8003704 <_printf_i+0x1a4>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	2310      	movs	r3, #16
 8003706:	e7a7      	b.n	8003658 <_printf_i+0xf8>
 8003708:	4824      	ldr	r0, [pc, #144]	; (800379c <_printf_i+0x23c>)
 800370a:	e7e4      	b.n	80036d6 <_printf_i+0x176>
 800370c:	4615      	mov	r5, r2
 800370e:	e7bd      	b.n	800368c <_printf_i+0x12c>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6826      	ldr	r6, [r4, #0]
 8003714:	6961      	ldr	r1, [r4, #20]
 8003716:	1d18      	adds	r0, r3, #4
 8003718:	6028      	str	r0, [r5, #0]
 800371a:	0635      	lsls	r5, r6, #24
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	d501      	bpl.n	8003724 <_printf_i+0x1c4>
 8003720:	6019      	str	r1, [r3, #0]
 8003722:	e002      	b.n	800372a <_printf_i+0x1ca>
 8003724:	0670      	lsls	r0, r6, #25
 8003726:	d5fb      	bpl.n	8003720 <_printf_i+0x1c0>
 8003728:	8019      	strh	r1, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	6123      	str	r3, [r4, #16]
 800372e:	4615      	mov	r5, r2
 8003730:	e7bc      	b.n	80036ac <_printf_i+0x14c>
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	1d1a      	adds	r2, r3, #4
 8003736:	602a      	str	r2, [r5, #0]
 8003738:	681d      	ldr	r5, [r3, #0]
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	2100      	movs	r1, #0
 800373e:	4628      	mov	r0, r5
 8003740:	f7fc fd6e 	bl	8000220 <memchr>
 8003744:	b108      	cbz	r0, 800374a <_printf_i+0x1ea>
 8003746:	1b40      	subs	r0, r0, r5
 8003748:	6060      	str	r0, [r4, #4]
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	2300      	movs	r3, #0
 8003750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003754:	e7aa      	b.n	80036ac <_printf_i+0x14c>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	462a      	mov	r2, r5
 800375a:	4649      	mov	r1, r9
 800375c:	4640      	mov	r0, r8
 800375e:	47d0      	blx	sl
 8003760:	3001      	adds	r0, #1
 8003762:	d0ad      	beq.n	80036c0 <_printf_i+0x160>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	079b      	lsls	r3, r3, #30
 8003768:	d413      	bmi.n	8003792 <_printf_i+0x232>
 800376a:	68e0      	ldr	r0, [r4, #12]
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	4298      	cmp	r0, r3
 8003770:	bfb8      	it	lt
 8003772:	4618      	movlt	r0, r3
 8003774:	e7a6      	b.n	80036c4 <_printf_i+0x164>
 8003776:	2301      	movs	r3, #1
 8003778:	4632      	mov	r2, r6
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	47d0      	blx	sl
 8003780:	3001      	adds	r0, #1
 8003782:	d09d      	beq.n	80036c0 <_printf_i+0x160>
 8003784:	3501      	adds	r5, #1
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	9903      	ldr	r1, [sp, #12]
 800378a:	1a5b      	subs	r3, r3, r1
 800378c:	42ab      	cmp	r3, r5
 800378e:	dcf2      	bgt.n	8003776 <_printf_i+0x216>
 8003790:	e7eb      	b.n	800376a <_printf_i+0x20a>
 8003792:	2500      	movs	r5, #0
 8003794:	f104 0619 	add.w	r6, r4, #25
 8003798:	e7f5      	b.n	8003786 <_printf_i+0x226>
 800379a:	bf00      	nop
 800379c:	080038e5 	.word	0x080038e5
 80037a0:	080038f6 	.word	0x080038f6

080037a4 <memmove>:
 80037a4:	4288      	cmp	r0, r1
 80037a6:	b510      	push	{r4, lr}
 80037a8:	eb01 0402 	add.w	r4, r1, r2
 80037ac:	d902      	bls.n	80037b4 <memmove+0x10>
 80037ae:	4284      	cmp	r4, r0
 80037b0:	4623      	mov	r3, r4
 80037b2:	d807      	bhi.n	80037c4 <memmove+0x20>
 80037b4:	1e43      	subs	r3, r0, #1
 80037b6:	42a1      	cmp	r1, r4
 80037b8:	d008      	beq.n	80037cc <memmove+0x28>
 80037ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037c2:	e7f8      	b.n	80037b6 <memmove+0x12>
 80037c4:	4402      	add	r2, r0
 80037c6:	4601      	mov	r1, r0
 80037c8:	428a      	cmp	r2, r1
 80037ca:	d100      	bne.n	80037ce <memmove+0x2a>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037d6:	e7f7      	b.n	80037c8 <memmove+0x24>

080037d8 <_sbrk_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d06      	ldr	r5, [pc, #24]	; (80037f4 <_sbrk_r+0x1c>)
 80037dc:	2300      	movs	r3, #0
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	f7fd fbf8 	bl	8000fd8 <_sbrk>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_sbrk_r+0x1a>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_sbrk_r+0x1a>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	2001c538 	.word	0x2001c538

080037f8 <memcpy>:
 80037f8:	440a      	add	r2, r1
 80037fa:	4291      	cmp	r1, r2
 80037fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003800:	d100      	bne.n	8003804 <memcpy+0xc>
 8003802:	4770      	bx	lr
 8003804:	b510      	push	{r4, lr}
 8003806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800380a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800380e:	4291      	cmp	r1, r2
 8003810:	d1f9      	bne.n	8003806 <memcpy+0xe>
 8003812:	bd10      	pop	{r4, pc}

08003814 <_realloc_r>:
 8003814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003818:	4680      	mov	r8, r0
 800381a:	4614      	mov	r4, r2
 800381c:	460e      	mov	r6, r1
 800381e:	b921      	cbnz	r1, 800382a <_realloc_r+0x16>
 8003820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003824:	4611      	mov	r1, r2
 8003826:	f7ff bc49 	b.w	80030bc <_malloc_r>
 800382a:	b92a      	cbnz	r2, 8003838 <_realloc_r+0x24>
 800382c:	f7ff fbda 	bl	8002fe4 <_free_r>
 8003830:	4625      	mov	r5, r4
 8003832:	4628      	mov	r0, r5
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003838:	f000 f81b 	bl	8003872 <_malloc_usable_size_r>
 800383c:	4284      	cmp	r4, r0
 800383e:	4607      	mov	r7, r0
 8003840:	d802      	bhi.n	8003848 <_realloc_r+0x34>
 8003842:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003846:	d812      	bhi.n	800386e <_realloc_r+0x5a>
 8003848:	4621      	mov	r1, r4
 800384a:	4640      	mov	r0, r8
 800384c:	f7ff fc36 	bl	80030bc <_malloc_r>
 8003850:	4605      	mov	r5, r0
 8003852:	2800      	cmp	r0, #0
 8003854:	d0ed      	beq.n	8003832 <_realloc_r+0x1e>
 8003856:	42bc      	cmp	r4, r7
 8003858:	4622      	mov	r2, r4
 800385a:	4631      	mov	r1, r6
 800385c:	bf28      	it	cs
 800385e:	463a      	movcs	r2, r7
 8003860:	f7ff ffca 	bl	80037f8 <memcpy>
 8003864:	4631      	mov	r1, r6
 8003866:	4640      	mov	r0, r8
 8003868:	f7ff fbbc 	bl	8002fe4 <_free_r>
 800386c:	e7e1      	b.n	8003832 <_realloc_r+0x1e>
 800386e:	4635      	mov	r5, r6
 8003870:	e7df      	b.n	8003832 <_realloc_r+0x1e>

08003872 <_malloc_usable_size_r>:
 8003872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003876:	1f18      	subs	r0, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	bfbc      	itt	lt
 800387c:	580b      	ldrlt	r3, [r1, r0]
 800387e:	18c0      	addlt	r0, r0, r3
 8003880:	4770      	bx	lr
	...

08003884 <_init>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr

08003890 <_fini>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr
