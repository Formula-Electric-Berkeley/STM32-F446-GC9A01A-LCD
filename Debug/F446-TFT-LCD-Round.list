
F446-TFT-LCD-Round.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c33c  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fca0  0801fca0  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801fca0  0801fca0  0002fca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fca8  0801fca8  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fca8  0801fca8  0002fca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fcac  0801fcac  0002fcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801fcb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000005c  0801fd0c  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0801fd0c  0003031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afe4  00000000  00000000  000300cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c09  00000000  00000000  0003b0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0003ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070c  00000000  00000000  0003d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022105  00000000  00000000  0003dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c81d  00000000  00000000  0005fe09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caa36  00000000  00000000  0006c626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029e0  00000000  00000000  0013705c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00139a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800394c 	.word	0x0800394c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800394c 	.word	0x0800394c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <APP_init>:

GC9A01A tft1;
GC9A01A tft2;


void APP_init() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a8      	sub	sp, #160	; 0xa0
 80005c0:	af06      	add	r7, sp, #24
  char str[128];

  sprintf(str, "GC9A01A Test!\n");
 80005c2:	463b      	mov	r3, r7
 80005c4:	4937      	ldr	r1, [pc, #220]	; (80006a4 <APP_init+0xe8>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fd1c 	bl	8003004 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe1e 	bl	8000210 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4639      	mov	r1, r7
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	4832      	ldr	r0, [pc, #200]	; (80006a8 <APP_init+0xec>)
 80005de:	f002 f955 	bl	800288c <HAL_UART_Transmit>

  GC9A01A_init(&tft1, &hspi1,
 80005e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e6:	9305      	str	r3, [sp, #20]
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <APP_init+0xf0>)
 80005ea:	9304      	str	r3, [sp, #16]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	9303      	str	r3, [sp, #12]
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <APP_init+0xf4>)
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <APP_init+0xf0>)
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2340      	movs	r3, #64	; 0x40
 8000600:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <APP_init+0xf8>)
 8000602:	492d      	ldr	r1, [pc, #180]	; (80006b8 <APP_init+0xfc>)
 8000604:	482d      	ldr	r0, [pc, #180]	; (80006bc <APP_init+0x100>)
 8000606:	f000 f913 	bl	8000830 <GC9A01A_init>
    TFT1_DC_GPIO, TFT1_DC_PIN,
    TFT1_BL_GPIO, TFT1_BL_PIN,
    TFT1_RST_GPIO, TFT1_RST_PIN
  );

  GC9A01A_init(&tft2, &hspi2,
 800060a:	2304      	movs	r3, #4
 800060c:	9305      	str	r3, [sp, #20]
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <APP_init+0xf8>)
 8000610:	9304      	str	r3, [sp, #16]
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	9303      	str	r3, [sp, #12]
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <APP_init+0xf8>)
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	2302      	movs	r3, #2
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <APP_init+0xf8>)
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <APP_init+0xf0>)
 800062a:	4925      	ldr	r1, [pc, #148]	; (80006c0 <APP_init+0x104>)
 800062c:	4825      	ldr	r0, [pc, #148]	; (80006c4 <APP_init+0x108>)
 800062e:	f000 f8ff 	bl	8000830 <GC9A01A_init>
    TFT2_DC_GPIO, TFT2_DC_PIN,
    TFT2_BL_GPIO, TFT2_BL_PIN,
    TFT2_RST_GPIO, TFT2_RST_PIN
  );

  for (size_t i=0; i<tft1.width; i+=1) {
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000638:	e029      	b.n	800068e <APP_init+0xd2>
    for (size_t j=0; j<tft1.height; j+=1) {
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000640:	e01a      	b.n	8000678 <APP_init+0xbc>
      GC9A01A_draw_pixel(&tft1, j, i, 0xFFFF);
 8000642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000646:	b219      	sxth	r1, r3
 8000648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800064c:	b21a      	sxth	r2, r3
 800064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000652:	481a      	ldr	r0, [pc, #104]	; (80006bc <APP_init+0x100>)
 8000654:	f000 f9fa 	bl	8000a4c <GC9A01A_draw_pixel>
      GC9A01A_draw_pixel(&tft2, j, i, 0xFFFF);
 8000658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800065c:	b219      	sxth	r1, r3
 800065e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000662:	b21a      	sxth	r2, r3
 8000664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <APP_init+0x108>)
 800066a:	f000 f9ef 	bl	8000a4c <GC9A01A_draw_pixel>
    for (size_t j=0; j<tft1.height; j+=1) {
 800066e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000672:	3301      	adds	r3, #1
 8000674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <APP_init+0x100>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000680:	429a      	cmp	r2, r3
 8000682:	d3de      	bcc.n	8000642 <APP_init+0x86>
  for (size_t i=0; i<tft1.width; i+=1) {
 8000684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000688:	3301      	adds	r3, #1
 800068a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <APP_init+0x100>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000696:	429a      	cmp	r2, r3
 8000698:	d3cf      	bcc.n	800063a <APP_init+0x7e>
    }
  }
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3788      	adds	r7, #136	; 0x88
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0801fb64 	.word	0x0801fb64
 80006a8:	20000184 	.word	0x20000184
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020400 	.word	0x40020400
 80006b8:	200000d4 	.word	0x200000d4
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	2000012c 	.word	0x2000012c
 80006c4:	200000a8 	.word	0x200000a8

080006c8 <APP_main>:


void APP_main() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
//  char str[128];
//  sprintf(str, "Done!\n");
//  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);


  GC9A01A_draw_screen(&tft2, (uint16_t *)image_data);
 80006cc:	4905      	ldr	r1, [pc, #20]	; (80006e4 <APP_main+0x1c>)
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <APP_main+0x20>)
 80006d0:	f000 fa1e 	bl	8000b10 <GC9A01A_draw_screen>
//  for (int i=0; i<120; i+=1) {
//    draw_pixel(120, i, color565(255, 128, 0));
//  }


  counter += 1;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <APP_main+0x24>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <APP_main+0x24>)
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08003964 	.word	0x08003964
 80006e8:	200000a8 	.word	0x200000a8
 80006ec:	20000078 	.word	0x20000078

080006f0 <GC9A01A_set_spi_datasize>:
    dest[i] = __builtin_bswap16(src[i]);
  }
}


static inline void GC9A01A_set_spi_datasize(GC9A01A *tft, uint32_t data_size) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  tft->hspi->Init.DataSize = data_size;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	60da      	str	r2, [r3, #12]
  WRITE_REG(tft->hspi->Instance->CR1, ((tft->hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	431a      	orrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	6a1b      	ldr	r3, [r3, #32]
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	ea42 0103 	orr.w	r1, r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000768:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	430a      	orrs	r2, r1
 8000774:	601a      	str	r2, [r3, #0]
                                    (tft->hspi->Init.CLKPhase & SPI_CR1_CPHA) |
                                    (tft->hspi->Init.NSS & SPI_CR1_SSM) |
                                    (tft->hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                    (tft->hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                    (tft->hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <GC9A01A_start_spi_transaction>:


static inline void GC9A01A_start_spi_transaction(GC9A01A *tft) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tft->cs_gpio, tft->cs_pin, GPIO_PIN_RESET);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68d8      	ldr	r0, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	b29b      	uxth	r3, r3
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	f001 f804 	bl	80017a4 <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <GC9A01A_end_spi_transaction>:

static inline void GC9A01A_end_spi_transaction(GC9A01A *tft) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tft->cs_gpio, tft->cs_pin, GPIO_PIN_SET);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	f000 fff3 	bl	80017a4 <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <GC9A01A_transmit_command>:

static inline void GC9A01A_transmit_command(GC9A01A *tft, uint8_t command) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	70fb      	strb	r3, [r7, #3]
  // set DC pin to LOW, enter command mode
  HAL_GPIO_WritePin(tft->dc_gpio, tft->dc_pin, GPIO_PIN_RESET);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6958      	ldr	r0, [r3, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f000 ffe0 	bl	80017a4 <HAL_GPIO_WritePin>

  // send command
  HAL_SPI_Transmit(tft->hspi, &command, 1, 100);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6898      	ldr	r0, [r3, #8]
 80007e8:	1cf9      	adds	r1, r7, #3
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	f001 fdde 	bl	80023ae <HAL_SPI_Transmit>

  // set DC pin to HIGH, return to data mode
  HAL_GPIO_WritePin(tft->dc_gpio, tft->dc_pin, GPIO_PIN_SET);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6958      	ldr	r0, [r3, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f000 ffd0 	bl	80017a4 <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <GC9A01A_transmit_data>:

static inline void GC9A01A_transmit_data(GC9A01A *tft, size_t n, uint16_t *data) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  HAL_SPI_Transmit(tft->hspi, (uint8_t *)data, n, 100);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6898      	ldr	r0, [r3, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	b29a      	uxth	r2, r3
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f001 fdc3 	bl	80023ae <HAL_SPI_Transmit>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <GC9A01A_init>:
    SPI_HandleTypeDef *hspi,
    GPIO_TypeDef *cs_gpio, uint32_t cs_pin,
    GPIO_TypeDef *dc_gpio, uint32_t dc_pin,
    GPIO_TypeDef *bl_gpio, uint32_t bl_pin,
    GPIO_TypeDef *rst_gpio, uint32_t rst_pin
    ) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
  tft->height = 240;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	22f0      	movs	r2, #240	; 0xf0
 8000842:	601a      	str	r2, [r3, #0]
  tft->width = 240;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	22f0      	movs	r2, #240	; 0xf0
 8000848:	605a      	str	r2, [r3, #4]

  tft->hspi = hspi;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	609a      	str	r2, [r3, #8]
  tft->cs_gpio = cs_gpio;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	60da      	str	r2, [r3, #12]
  tft->cs_pin = cs_pin;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	611a      	str	r2, [r3, #16]
  tft->dc_gpio = dc_gpio;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	6a3a      	ldr	r2, [r7, #32]
 8000860:	615a      	str	r2, [r3, #20]
  tft->dc_pin = dc_pin;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000866:	619a      	str	r2, [r3, #24]
  tft->bl_gpio = bl_gpio;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800086c:	61da      	str	r2, [r3, #28]
  tft->bl_pin = bl_pin;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000872:	621a      	str	r2, [r3, #32]
  tft->rst_gpio = rst_gpio;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  tft->rst_pin = rst_pin;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800087e:	629a      	str	r2, [r3, #40]	; 0x28


  // digitalWrite(TFT_CS, HIGH); // Deselect
  HAL_GPIO_WritePin(tft->cs_gpio, tft->cs_pin, GPIO_PIN_SET);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	68d8      	ldr	r0, [r3, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	b29b      	uxth	r3, r3
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f000 ff89 	bl	80017a4 <HAL_GPIO_WritePin>

  // digitalWrite(TFT_DC, HIGH); // Data mode
  HAL_GPIO_WritePin(tft->dc_gpio, tft->dc_pin, GPIO_PIN_SET);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6958      	ldr	r0, [r3, #20]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	b29b      	uxth	r3, r3
 800089c:	2201      	movs	r2, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	f000 ff80 	bl	80017a4 <HAL_GPIO_WritePin>


  // digitalWrite(TFT_RST, LOW);
  HAL_GPIO_WritePin(tft->rst_gpio, tft->rst_pin, GPIO_PIN_RESET);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	f000 ff77 	bl	80017a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f000 fcd6 	bl	8001268 <HAL_Delay>
  // digitalWrite(TFT_RST, HIGH);
  HAL_GPIO_WritePin(tft->rst_gpio, tft->rst_pin, GPIO_PIN_SET);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	f000 ff6b 	bl	80017a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fcca 	bl	8001268 <HAL_Delay>


  uint8_t x, numArgs;
  uint8_t *addr = (uint8_t *)INIT_CMD;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <GC9A01A_init+0x114>)
 80008d6:	617b      	str	r3, [r7, #20]
  uint8_t cmd = *addr;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	74fb      	strb	r3, [r7, #19]

  while (cmd > 0) {
 80008de:	e020      	b.n	8000922 <GC9A01A_init+0xf2>
    cmd = *addr;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	74fb      	strb	r3, [r7, #19]
    addr += 1;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
    x = *addr;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	74bb      	strb	r3, [r7, #18]
    addr += 1;
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
    numArgs = x & 0x7F;
 80008f8:	7cbb      	ldrb	r3, [r7, #18]
 80008fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008fe:	747b      	strb	r3, [r7, #17]
    GC9A01A_configure_param(tft, cmd, addr, numArgs);
 8000900:	7c7b      	ldrb	r3, [r7, #17]
 8000902:	7cf9      	ldrb	r1, [r7, #19]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f000 f81e 	bl	8000948 <GC9A01A_configure_param>
    addr += numArgs;
 800090c:	7c7b      	ldrb	r3, [r7, #17]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	4413      	add	r3, r2
 8000912:	617b      	str	r3, [r7, #20]
    if (x & 0x80)
 8000914:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000918:	2b00      	cmp	r3, #0
 800091a:	da02      	bge.n	8000922 <GC9A01A_init+0xf2>
      HAL_Delay(150);
 800091c:	2096      	movs	r0, #150	; 0x96
 800091e:	f000 fca3 	bl	8001268 <HAL_Delay>
  while (cmd > 0) {
 8000922:	7cfb      	ldrb	r3, [r7, #19]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1db      	bne.n	80008e0 <GC9A01A_init+0xb0>
  }

  // Backlight on
  HAL_GPIO_WritePin(tft->bl_gpio, tft->bl_pin, GPIO_PIN_SET);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	69d8      	ldr	r0, [r3, #28]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	b29b      	uxth	r3, r3
 8000932:	2201      	movs	r2, #1
 8000934:	4619      	mov	r1, r3
 8000936:	f000 ff35 	bl	80017a4 <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0801fb74 	.word	0x0801fb74

08000948 <GC9A01A_configure_param>:

void GC9A01A_configure_param(GC9A01A *tft, uint8_t command, uint8_t *data, uint8_t n_data) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	461a      	mov	r2, r3
 8000954:	460b      	mov	r3, r1
 8000956:	72fb      	strb	r3, [r7, #11]
 8000958:	4613      	mov	r3, r2
 800095a:	72bb      	strb	r3, [r7, #10]
  GC9A01A_start_spi_transaction(tft);
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f7ff ff10 	bl	8000782 <GC9A01A_start_spi_transaction>

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_8BIT);
 8000962:	2100      	movs	r1, #0
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff fec3 	bl	80006f0 <GC9A01A_set_spi_datasize>

  GC9A01A_transmit_command(tft, command);
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	4619      	mov	r1, r3
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ff29 	bl	80007c6 <GC9A01A_transmit_command>

  // write param value
  HAL_SPI_Transmit(tft->hspi, (uint8_t *)data, n_data, 100);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6898      	ldr	r0, [r3, #8]
 8000978:	7abb      	ldrb	r3, [r7, #10]
 800097a:	b29a      	uxth	r2, r3
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f001 fd15 	bl	80023ae <HAL_SPI_Transmit>

  GC9A01A_end_spi_transaction(tft);
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff0d 	bl	80007a4 <GC9A01A_end_spi_transaction>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <GC9A01A_set_addr_window>:

void GC9A01A_set_addr_window(GC9A01A *tft, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	4608      	mov	r0, r1
 800099c:	4611      	mov	r1, r2
 800099e:	461a      	mov	r2, r3
 80009a0:	4603      	mov	r3, r0
 80009a2:	817b      	strh	r3, [r7, #10]
 80009a4:	460b      	mov	r3, r1
 80009a6:	813b      	strh	r3, [r7, #8]
 80009a8:	4613      	mov	r3, r2
 80009aa:	80fb      	strh	r3, [r7, #6]
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 80009ac:	897a      	ldrh	r2, [r7, #10]
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	4413      	add	r3, r2
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	82fb      	strh	r3, [r7, #22]
 80009ba:	893a      	ldrh	r2, [r7, #8]
 80009bc:	8c3b      	ldrh	r3, [r7, #32]
 80009be:	4413      	add	r3, r2
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	82bb      	strh	r3, [r7, #20]


  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_8BIT);
 80009c8:	2100      	movs	r1, #0
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff fe90 	bl	80006f0 <GC9A01A_set_spi_datasize>
  GC9A01A_transmit_command(tft, GC9A01A_CASET); // Column address set
 80009d0:	212a      	movs	r1, #42	; 0x2a
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f7ff fef7 	bl	80007c6 <GC9A01A_transmit_command>

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_16BIT);
 80009d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fe87 	bl	80006f0 <GC9A01A_set_spi_datasize>
  GC9A01A_transmit_data(tft, 1, &x1);
 80009e2:	f107 030a 	add.w	r3, r7, #10
 80009e6:	461a      	mov	r2, r3
 80009e8:	2101      	movs	r1, #1
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff0e 	bl	800080c <GC9A01A_transmit_data>
  GC9A01A_transmit_data(tft, 1, &x2);
 80009f0:	f107 0316 	add.w	r3, r7, #22
 80009f4:	461a      	mov	r2, r3
 80009f6:	2101      	movs	r1, #1
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff ff07 	bl	800080c <GC9A01A_transmit_data>

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_8BIT);
 80009fe:	2100      	movs	r1, #0
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff fe75 	bl	80006f0 <GC9A01A_set_spi_datasize>
  GC9A01A_transmit_command(tft, GC9A01A_RASET); // Row address set
 8000a06:	212b      	movs	r1, #43	; 0x2b
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fedc 	bl	80007c6 <GC9A01A_transmit_command>

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_16BIT);
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fe6c 	bl	80006f0 <GC9A01A_set_spi_datasize>
  GC9A01A_transmit_data(tft, 1, &y1);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	2101      	movs	r1, #1
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff fef3 	bl	800080c <GC9A01A_transmit_data>
  GC9A01A_transmit_data(tft, 1, &y2);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff feec 	bl	800080c <GC9A01A_transmit_data>

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_8BIT);
 8000a34:	2100      	movs	r1, #0
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fe5a 	bl	80006f0 <GC9A01A_set_spi_datasize>
  GC9A01A_transmit_command(tft, GC9A01A_RAMWR); // Write to RAM
 8000a3c:	212c      	movs	r1, #44	; 0x2c
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff fec1 	bl	80007c6 <GC9A01A_transmit_command>
}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <GC9A01A_draw_pixel>:


void GC9A01A_draw_pixel(GC9A01A *tft, int16_t x, int16_t y, uint16_t color) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	817b      	strh	r3, [r7, #10]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	813b      	strh	r3, [r7, #8]
 8000a62:	4613      	mov	r3, r2
 8000a64:	80fb      	strh	r3, [r7, #6]
  GC9A01A_start_spi_transaction(tft);
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fe8b 	bl	8000782 <GC9A01A_start_spi_transaction>

  GC9A01A_set_addr_window(tft, x, y, 1, 1);
 8000a6c:	8979      	ldrh	r1, [r7, #10]
 8000a6e:	893a      	ldrh	r2, [r7, #8]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2301      	movs	r3, #1
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff ff8b 	bl	8000992 <GC9A01A_set_addr_window>

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_16BIT);
 8000a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fe35 	bl	80006f0 <GC9A01A_set_spi_datasize>
  GC9A01A_transmit_data(tft, 1, &color);
 8000a86:	1dbb      	adds	r3, r7, #6
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff febd 	bl	800080c <GC9A01A_transmit_data>

  GC9A01A_end_spi_transaction(tft);
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff fe86 	bl	80007a4 <GC9A01A_end_spi_transaction>
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <GC9A01A_draw_pixels>:

void GC9A01A_draw_pixels(GC9A01A *tft, uint16_t x, uint16_t y, uint16_t *color, uint16_t width, uint16_t height) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	817b      	strh	r3, [r7, #10]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	813b      	strh	r3, [r7, #8]
  GC9A01A_start_spi_transaction(tft);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fe65 	bl	8000782 <GC9A01A_start_spi_transaction>

  GC9A01A_set_addr_window(tft, x, y, width, height);
 8000ab8:	8c38      	ldrh	r0, [r7, #32]
 8000aba:	893a      	ldrh	r2, [r7, #8]
 8000abc:	8979      	ldrh	r1, [r7, #10]
 8000abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff ff64 	bl	8000992 <GC9A01A_set_addr_window>

  uint16_t *data_ptr = color;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	617b      	str	r3, [r7, #20]

  GC9A01A_set_spi_datasize(tft, SPI_DATASIZE_16BIT);
 8000ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff fe0c 	bl	80006f0 <GC9A01A_set_spi_datasize>
  for (size_t i = 0; i < height; i += 1) {    // For each scanline...
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	e00d      	b.n	8000afa <GC9A01A_draw_pixels+0x5a>
    GC9A01A_transmit_data(tft, width, data_ptr);           // Push one row
 8000ade:	8c3b      	ldrh	r3, [r7, #32]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fe91 	bl	800080c <GC9A01A_transmit_data>
    data_ptr += width;                        // Advance pointer by one full line
 8000aea:	8c3b      	ldrh	r3, [r7, #32]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4413      	add	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]
  for (size_t i = 0; i < height; i += 1) {    // For each scanline...
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	3301      	adds	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3ed      	bcc.n	8000ade <GC9A01A_draw_pixels+0x3e>
  }

  GC9A01A_end_spi_transaction(tft);
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fe4e 	bl	80007a4 <GC9A01A_end_spi_transaction>
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <GC9A01A_draw_screen>:

void GC9A01A_draw_screen(GC9A01A *tft, uint16_t *img) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  GC9A01A_draw_pixels(tft, 0, 0, img, tft->width, tft->height);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	9201      	str	r2, [sp, #4]
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ffb5 	bl	8000aa0 <GC9A01A_draw_pixels>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 fb1f 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f80d 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f000 f90d 	bl	8000d68 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b4e:	f000 f875 	bl	8000c3c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b52:	f000 f8df 	bl	8000d14 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000b56:	f000 f8a7 	bl	8000ca8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000b5a:	f7ff fd2f 	bl	80005bc <APP_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    APP_main();
 8000b5e:	f7ff fdb3 	bl	80006c8 <APP_main>
 8000b62:	e7fc      	b.n	8000b5e <main+0x20>

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2234      	movs	r2, #52	; 0x34
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fa66 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <SystemClock_Config+0xd0>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <SystemClock_Config+0xd0>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <SystemClock_Config+0xd0>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <SystemClock_Config+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <SystemClock_Config+0xd4>)
 8000bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <SystemClock_Config+0xd4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8000bd8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f8b6 	bl	8001d60 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bfa:	f000 f933 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fddb 	bl	80017d8 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c28:	f000 f91c 	bl	8000e64 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	; 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <MX_SPI1_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c8e:	f001 fb05 	bl	800229c <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 f8e4 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000d4 	.word	0x200000d4
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <MX_SPI2_Init+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cf4:	220a      	movs	r2, #10
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cfa:	f001 facf 	bl	800229c <HAL_SPI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d04:	f000 f8ae 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000012c 	.word	0x2000012c
 8000d10:	40003800 	.word	0x40003800

08000d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	f001 fd4e 	bl	80027ec <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f885 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000184 	.word	0x20000184
 8000d64:	40004400 	.word	0x40004400

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a33      	ldr	r2, [pc, #204]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2c      	ldr	r2, [pc, #176]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f241 0146 	movw	r1, #4166	; 0x1046
 8000dd8:	481f      	ldr	r0, [pc, #124]	; (8000e58 <MX_GPIO_Init+0xf0>)
 8000dda:	f000 fce3 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_GPIO_Init+0xf4>)
 8000de4:	f000 fcde 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000dee:	481c      	ldr	r0, [pc, #112]	; (8000e60 <MX_GPIO_Init+0xf8>)
 8000df0:	f000 fcd8 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB2 PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_6;
 8000df4:	f241 0346 	movw	r3, #4166	; 0x1046
 8000df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_GPIO_Init+0xf0>)
 8000e0e:	f000 fb35 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_GPIO_Init+0xf4>)
 8000e2a:	f000 fb27 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000e2e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_GPIO_Init+0xf8>)
 8000e48:	f000 fb18 	bl	800147c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <HAL_SPI_MspInit+0xe8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12c      	bne.n	8000f3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a30      	ldr	r2, [pc, #192]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a29      	ldr	r2, [pc, #164]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f1a:	23a0      	movs	r3, #160	; 0xa0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <HAL_SPI_MspInit+0xf0>)
 8000f36:	f000 faa1 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f3a:	e031      	b.n	8000fa0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_SPI_MspInit+0xf4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_SPI_MspInit+0xec>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f90:	2305      	movs	r3, #5
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <HAL_SPI_MspInit+0xf8>)
 8000f9c:	f000 fa6e 	bl	800147c <HAL_GPIO_Init>
}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013000 	.word	0x40013000
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40003800 	.word	0x40003800
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_UART_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12b      	bne.n	8001036 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_UART_MspInit+0x88>)
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_UART_MspInit+0x88>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001026:	2307      	movs	r3, #7
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_UART_MspInit+0x8c>)
 8001032:	f000 fa23 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 f8c6 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f001 ffc0 	bl	8003054 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20020000 	.word	0x20020000
 8001100:	00000400 	.word	0x00000400
 8001104:	200001cc 	.word	0x200001cc
 8001108:	20000320 	.word	0x20000320

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115e:	f001 ff7f 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fcec 	bl	8000b3e <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001174:	0801fcb0 	.word	0x0801fcb0
  ldr r2, =_sbss
 8001178:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800117c:	2000031c 	.word	0x2000031c

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f931 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fe5a 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f93b 	bl	8001462 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f911 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	200001d0 	.word	0x200001d0

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200001d0 	.word	0x200001d0

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e165      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8154 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d005      	beq.n	80014ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d130      	bne.n	8001530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b03      	cmp	r3, #3
 800153a:	d017      	beq.n	800156c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80ae 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_GPIO_Init+0x300>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a5c      	ldr	r2, [pc, #368]	; (800177c <HAL_GPIO_Init+0x300>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_GPIO_Init+0x300>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4f      	ldr	r2, [pc, #316]	; (8001784 <HAL_GPIO_Init+0x308>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_GPIO_Init+0x30c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x216>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4d      	ldr	r2, [pc, #308]	; (800178c <HAL_GPIO_Init+0x310>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x212>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_GPIO_Init+0x314>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x20e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_GPIO_Init+0x318>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x20a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x31c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x206>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x320>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x202>
 800167a:	2306      	movs	r3, #6
 800167c:	e00c      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800167e:	2307      	movs	r3, #7
 8001680:	e00a      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001682:	2305      	movs	r3, #5
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001686:	2304      	movs	r3, #4
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001696:	2300      	movs	r3, #0
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a8:	4935      	ldr	r1, [pc, #212]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016da:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	f67f ae96 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40013800 	.word	0x40013800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	40021800 	.word	0x40021800
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0cc      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d90c      	bls.n	8001814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d044      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e067      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4934      	ldr	r1, [pc, #208]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7ff fcc2 	bl	8001250 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff fcbe 	bl	8001250 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d20c      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f855 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fc22 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	0801fc54 	.word	0x0801fc54
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000

080019bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019c0:	f7ff fff0 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	0a9b      	lsrs	r3, r3, #10
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	4903      	ldr	r1, [pc, #12]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	0801fc64 	.word	0x0801fc64

080019e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e8:	f7ff ffdc 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	0b5b      	lsrs	r3, r3, #13
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	0801fc64 	.word	0x0801fc64

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a10:	b0a6      	sub	sp, #152	; 0x98
 8001a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a32:	4bc8      	ldr	r3, [pc, #800]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	f200 817e 	bhi.w	8001d3c <HAL_RCC_GetSysClockFreq+0x330>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a7d 	.word	0x08001a7d
 8001a4c:	08001d3d 	.word	0x08001d3d
 8001a50:	08001d3d 	.word	0x08001d3d
 8001a54:	08001d3d 	.word	0x08001d3d
 8001a58:	08001a85 	.word	0x08001a85
 8001a5c:	08001d3d 	.word	0x08001d3d
 8001a60:	08001d3d 	.word	0x08001d3d
 8001a64:	08001d3d 	.word	0x08001d3d
 8001a68:	08001a8d 	.word	0x08001a8d
 8001a6c:	08001d3d 	.word	0x08001d3d
 8001a70:	08001d3d 	.word	0x08001d3d
 8001a74:	08001d3d 	.word	0x08001d3d
 8001a78:	08001bf7 	.word	0x08001bf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4bb6      	ldr	r3, [pc, #728]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001a82:	e15f      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a84:	4bb5      	ldr	r3, [pc, #724]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a8a:	e15b      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a8c:	4bb1      	ldr	r3, [pc, #708]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a98:	4bae      	ldr	r3, [pc, #696]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d031      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa4:	4bab      	ldr	r3, [pc, #684]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	2200      	movs	r2, #0
 8001aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8001ab8:	2300      	movs	r3, #0
 8001aba:	667b      	str	r3, [r7, #100]	; 0x64
 8001abc:	4ba7      	ldr	r3, [pc, #668]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001abe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ac2:	462a      	mov	r2, r5
 8001ac4:	fb03 f202 	mul.w	r2, r3, r2
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4621      	mov	r1, r4
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4aa2      	ldr	r2, [pc, #648]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	fba1 1202 	umull	r1, r2, r1, r2
 8001ada:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001adc:	460a      	mov	r2, r1
 8001ade:	67ba      	str	r2, [r7, #120]	; 0x78
 8001ae0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aea:	2200      	movs	r2, #0
 8001aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001af0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001af8:	f7fe fbe2 	bl	80002c0 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b06:	e064      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	2200      	movs	r2, #0
 8001b10:	653b      	str	r3, [r7, #80]	; 0x50
 8001b12:	657a      	str	r2, [r7, #84]	; 0x54
 8001b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b20:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b24:	4622      	mov	r2, r4
 8001b26:	462b      	mov	r3, r5
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	0159      	lsls	r1, r3, #5
 8001b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b36:	0150      	lsls	r0, r2, #5
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	1a51      	subs	r1, r2, r1
 8001b40:	6139      	str	r1, [r7, #16]
 8001b42:	4629      	mov	r1, r5
 8001b44:	eb63 0301 	sbc.w	r3, r3, r1
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b56:	4659      	mov	r1, fp
 8001b58:	018b      	lsls	r3, r1, #6
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b60:	4651      	mov	r1, sl
 8001b62:	018a      	lsls	r2, r1, #6
 8001b64:	4651      	mov	r1, sl
 8001b66:	ebb2 0801 	subs.w	r8, r2, r1
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	eb63 0901 	sbc.w	r9, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b84:	4690      	mov	r8, r2
 8001b86:	4699      	mov	r9, r3
 8001b88:	4623      	mov	r3, r4
 8001b8a:	eb18 0303 	adds.w	r3, r8, r3
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	462b      	mov	r3, r5
 8001b92:	eb49 0303 	adc.w	r3, r9, r3
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	028b      	lsls	r3, r1, #10
 8001ba8:	4621      	mov	r1, r4
 8001baa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bae:	4621      	mov	r1, r4
 8001bb0:	028a      	lsls	r2, r1, #10
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8001bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8001bc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bc4:	f7fe fb7c 	bl	80002c0 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd2:	4b60      	ldr	r3, [pc, #384]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001be4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001bf4:	e0a6      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf6:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c02:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02a      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c20:	2100      	movs	r1, #0
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001c24:	fb03 f201 	mul.w	r2, r3, r1
 8001c28:	2300      	movs	r3, #0
 8001c2a:	fb00 f303 	mul.w	r3, r0, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001c32:	fba0 1202 	umull	r1, r2, r0, r2
 8001c36:	677a      	str	r2, [r7, #116]	; 0x74
 8001c38:	460a      	mov	r2, r1
 8001c3a:	673a      	str	r2, [r7, #112]	; 0x70
 8001c3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c3e:	4413      	add	r3, r2
 8001c40:	677b      	str	r3, [r7, #116]	; 0x74
 8001c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c46:	2200      	movs	r2, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4a:	637a      	str	r2, [r7, #52]	; 0x34
 8001c4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c50:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c54:	f7fe fb34 	bl	80002c0 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c62:	e05b      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c80:	4642      	mov	r2, r8
 8001c82:	464b      	mov	r3, r9
 8001c84:	f04f 0000 	mov.w	r0, #0
 8001c88:	f04f 0100 	mov.w	r1, #0
 8001c8c:	0159      	lsls	r1, r3, #5
 8001c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c92:	0150      	lsls	r0, r2, #5
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4641      	mov	r1, r8
 8001c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	00eb      	lsls	r3, r5, #3
 8001cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cce:	00e2      	lsls	r2, r4, #3
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	18e3      	adds	r3, r4, r3
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	464b      	mov	r3, r9
 8001cdc:	eb45 0303 	adc.w	r3, r5, r3
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	028b      	lsls	r3, r1, #10
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	028a      	lsls	r2, r1, #10
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d04:	2200      	movs	r2, #0
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	61fa      	str	r2, [r7, #28]
 8001d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d0e:	f7fe fad7 	bl	80002c0 <__aeabi_uldivmod>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4613      	mov	r3, r2
 8001d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	0f1b      	lsrs	r3, r3, #28
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d3a:	e003      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3798      	adds	r7, #152	; 0x98
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	017d7840 	.word	0x017d7840

08001d60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e28d      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8083 	beq.w	8001e86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d80:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d019      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d98:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da4:	d00c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da6:	4b8b      	ldr	r3, [pc, #556]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d112      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db2:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	4b84      	ldr	r3, [pc, #528]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d05b      	beq.n	8001e84 <HAL_RCC_OscConfig+0x124>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d157      	bne.n	8001e84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e25a      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x90>
 8001de2:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7b      	ldr	r2, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xcc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xb4>
 8001dfa:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a75      	ldr	r2, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xcc>
 8001e14:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b6c      	ldr	r3, [pc, #432]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6b      	ldr	r2, [pc, #428]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fa0c 	bl	8001250 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fa08 	bl	8001250 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e21f      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xdc>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f9f8 	bl	8001250 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff f9f4 	bl	8001250 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e20b      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x104>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d06f      	beq.n	8001f72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e92:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e9e:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x186>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1d3      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4937      	ldr	r1, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_OscConfig+0x278>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f9a1 	bl	8001250 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff f99d 	bl	8001250 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1b4      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_OscConfig+0x278>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f980 	bl	8001250 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff f97c 	bl	8001250 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e193      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d036      	beq.n	8001fec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f960 	bl	8001250 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff f95c 	bl	8001250 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e173      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x234>
 8001fb2:	e01b      	b.n	8001fec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7ff f949 	bl	8001250 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	e00e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7ff f945 	bl	8001250 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d907      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e15c      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	42470000 	.word	0x42470000
 8001fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b8a      	ldr	r3, [pc, #552]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ea      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8097 	beq.w	8002128 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b83      	ldr	r3, [pc, #524]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a7e      	ldr	r2, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b7c      	ldr	r3, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b79      	ldr	r3, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x4b0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x4b0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a75      	ldr	r2, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x4b0>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7ff f905 	bl	8001250 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7ff f901 	bl	8001250 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e118      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_RCC_OscConfig+0x4b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x31e>
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a65      	ldr	r2, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x358>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x340>
 8002086:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a60      	ldr	r2, [pc, #384]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6713      	str	r3, [r2, #112]	; 0x70
 8002092:	4b5e      	ldr	r3, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x358>
 80020a0:	4b5a      	ldr	r3, [pc, #360]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a59      	ldr	r2, [pc, #356]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b57      	ldr	r3, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a56      	ldr	r2, [pc, #344]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff f8c6 	bl	8001250 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff f8c2 	bl	8001250 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0d7      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ee      	beq.n	80020c8 <HAL_RCC_OscConfig+0x368>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff f8b0 	bl	8001250 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7ff f8ac 	bl	8001250 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0c1      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ee      	bne.n	80020f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a3a      	ldr	r2, [pc, #232]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80ad 	beq.w	800228c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002132:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b08      	cmp	r3, #8
 800213c:	d060      	beq.n	8002200 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d145      	bne.n	80021d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_OscConfig+0x4b4>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f880 	bl	8001250 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f87c 	bl	8001250 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e093      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4b4>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff f851 	bl	8001250 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff f84d 	bl	8001250 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e064      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x452>
 80021d0:	e05c      	b.n	800228c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x4b4>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f83a 	bl	8001250 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f836 	bl	8001250 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e04d      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x480>
 80021fe:	e045      	b.n	800228c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e040      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x538>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d030      	beq.n	8002288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d129      	bne.n	8002288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d122      	bne.n	8002288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d119      	bne.n	8002288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d10f      	bne.n	8002288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07b      	b.n	80023a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022be:	d009      	beq.n	80022d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
 80022c6:	e005      	b.n	80022d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fde6 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	ea42 0103 	orr.w	r1, r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0104 	and.w	r1, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f003 0210 	and.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b088      	sub	sp, #32
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_SPI_Transmit+0x22>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e12d      	b.n	800262c <HAL_SPI_Transmit+0x27e>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d8:	f7fe ff3a 	bl	8001250 <HAL_GetTick>
 80023dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d002      	beq.n	80023f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023f2:	e116      	b.n	8002622 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_SPI_Transmit+0x52>
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002404:	e10d      	b.n	8002622 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2203      	movs	r2, #3
 800240a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244c:	d10f      	bne.n	800246e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d007      	beq.n	800248c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002494:	d14f      	bne.n	8002536 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_Transmit+0xf6>
 800249e:	8afb      	ldrh	r3, [r7, #22]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d142      	bne.n	800252a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	1c9a      	adds	r2, r3, #2
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024c8:	e02f      	b.n	800252a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d112      	bne.n	80024fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	881a      	ldrh	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	1c9a      	adds	r2, r3, #2
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80024fc:	e015      	b.n	800252a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fe:	f7fe fea7 	bl	8001250 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d803      	bhi.n	8002516 <HAL_SPI_Transmit+0x168>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d102      	bne.n	800251c <HAL_SPI_Transmit+0x16e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d106      	bne.n	800252a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002528:	e07b      	b.n	8002622 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ca      	bne.n	80024ca <HAL_SPI_Transmit+0x11c>
 8002534:	e050      	b.n	80025d8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Transmit+0x196>
 800253e:	8afb      	ldrh	r3, [r7, #22]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d144      	bne.n	80025ce <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800256a:	e030      	b.n	80025ce <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d113      	bne.n	80025a2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	86da      	strh	r2, [r3, #54]	; 0x36
 80025a0:	e015      	b.n	80025ce <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a2:	f7fe fe55 	bl	8001250 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d803      	bhi.n	80025ba <HAL_SPI_Transmit+0x20c>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_Transmit+0x212>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025cc:	e029      	b.n	8002622 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1c9      	bne.n	800256c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f8b1 	bl	8002744 <SPI_EndRxTxTransaction>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	e003      	b.n	8002622 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800262a:	7ffb      	ldrb	r3, [r7, #31]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002644:	f7fe fe04 	bl	8001250 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002654:	f7fe fdfc 	bl	8001250 <HAL_GetTick>
 8002658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	015b      	lsls	r3, r3, #5
 8002660:	0d1b      	lsrs	r3, r3, #20
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800266a:	e054      	b.n	8002716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d050      	beq.n	8002716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002674:	f7fe fdec 	bl	8001250 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	d902      	bls.n	800268a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d13d      	bne.n	8002706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a2:	d111      	bne.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ac:	d004      	beq.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b6:	d107      	bne.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d0:	d10f      	bne.n	80026f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e017      	b.n	8002736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3b01      	subs	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	429a      	cmp	r2, r3
 8002732:	d19b      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2201      	movs	r2, #1
 8002758:	2102      	movs	r1, #2
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff ff6a 	bl	8002634 <SPI_WaitFlagStateUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e032      	b.n	80027dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <SPI_EndRxTxTransaction+0xa0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <SPI_EndRxTxTransaction+0xa4>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002794:	d112      	bne.n	80027bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff ff47 	bl	8002634 <SPI_WaitFlagStateUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e00f      	b.n	80027dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d0f2      	beq.n	80027bc <SPI_EndRxTxTransaction+0x78>
 80027d6:	e000      	b.n	80027da <SPI_EndRxTxTransaction+0x96>
        break;
 80027d8:	bf00      	nop
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000000 	.word	0x20000000
 80027e8:	165e9f81 	.word	0x165e9f81

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e042      	b.n	8002884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fbd2 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f973 	bl	8002b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d175      	bne.n	8002998 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_UART_Transmit+0x2c>
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e06e      	b.n	800299a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	; 0x21
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fe fcc1 	bl	8001250 <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e4:	d108      	bne.n	80028f8 <HAL_UART_Transmit+0x6c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e003      	b.n	8002900 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002900:	e02e      	b.n	8002960 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f848 	bl	80029a2 <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e03a      	b.n	800299a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3302      	adds	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e007      	b.n	8002952 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1cb      	bne.n	8002902 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f814 	bl	80029a2 <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b2:	e03b      	b.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d037      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7fe fc48 	bl	8001250 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	6a3a      	ldr	r2, [r7, #32]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e03a      	b.n	8002a4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x8a>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d020      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x8a>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d01d      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d116      	bne.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f81d 	bl	8002a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e00f      	b.n	8002a4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d0b4      	beq.n	80029b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b095      	sub	sp, #84	; 0x54
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330c      	adds	r3, #12
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e5      	bne.n	8002a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3314      	adds	r3, #20
 8002aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d119      	bne.n	8002b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0310 	bic.w	r3, r3, #16
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aec:	61ba      	str	r2, [r7, #24]
 8002aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	6979      	ldr	r1, [r7, #20]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	e841 2300 	strex	r3, r2, [r1]
 8002af8:	613b      	str	r3, [r7, #16]
   return(result);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e5      	bne.n	8002acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b0e:	bf00      	nop
 8002b10:	3754      	adds	r7, #84	; 0x54
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b20:	b0c0      	sub	sp, #256	; 0x100
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b38:	68d9      	ldr	r1, [r3, #12]
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	ea40 0301 	orr.w	r3, r0, r1
 8002b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b74:	f021 010c 	bic.w	r1, r1, #12
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b82:	430b      	orrs	r3, r1
 8002b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	6999      	ldr	r1, [r3, #24]
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	ea40 0301 	orr.w	r3, r0, r1
 8002ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <UART_SetConfig+0x2cc>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d005      	beq.n	8002bbc <UART_SetConfig+0xa0>
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b8d      	ldr	r3, [pc, #564]	; (8002dec <UART_SetConfig+0x2d0>)
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d104      	bne.n	8002bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7fe ff12 	bl	80019e4 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bc4:	e003      	b.n	8002bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc6:	f7fe fef9 	bl	80019bc <HAL_RCC_GetPCLK1Freq>
 8002bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd8:	f040 810c 	bne.w	8002df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	1891      	adds	r1, r2, r2
 8002bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bf6:	415b      	adcs	r3, r3
 8002bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bfe:	4621      	mov	r1, r4
 8002c00:	eb12 0801 	adds.w	r8, r2, r1
 8002c04:	4629      	mov	r1, r5
 8002c06:	eb43 0901 	adc.w	r9, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb18 0303 	adds.w	r3, r8, r3
 8002c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	eb49 0303 	adc.w	r3, r9, r3
 8002c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	18db      	adds	r3, r3, r3
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c50:	4613      	mov	r3, r2
 8002c52:	eb42 0303 	adc.w	r3, r2, r3
 8002c56:	657b      	str	r3, [r7, #84]	; 0x54
 8002c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c60:	f7fd fb2e 	bl	80002c0 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	011c      	lsls	r4, r3, #4
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c94:	4641      	mov	r1, r8
 8002c96:	eb12 0a01 	adds.w	sl, r2, r1
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb4:	4692      	mov	sl, r2
 8002cb6:	469b      	mov	fp, r3
 8002cb8:	4643      	mov	r3, r8
 8002cba:	eb1a 0303 	adds.w	r3, sl, r3
 8002cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	18db      	adds	r3, r3, r3
 8002ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	eb42 0303 	adc.w	r3, r2, r3
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
 8002cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cf6:	f7fd fae3 	bl	80002c0 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002d02:	fba3 2301 	umull	r2, r3, r3, r1
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2264      	movs	r2, #100	; 0x64
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d16:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002d18:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d24:	441c      	add	r4, r3
 8002d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	1891      	adds	r1, r2, r2
 8002d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d40:	415b      	adcs	r3, r3
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d48:	4641      	mov	r1, r8
 8002d4a:	1851      	adds	r1, r2, r1
 8002d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d4e:	4649      	mov	r1, r9
 8002d50:	414b      	adcs	r3, r1
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d60:	4659      	mov	r1, fp
 8002d62:	00cb      	lsls	r3, r1, #3
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	00ca      	lsls	r2, r1, #3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	4642      	mov	r2, r8
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	460a      	mov	r2, r1
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	18db      	adds	r3, r3, r3
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002db2:	f7fd fa85 	bl	80002c0 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	2164      	movs	r1, #100	; 0x64
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	3332      	adds	r3, #50	; 0x32
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	f003 0207 	and.w	r2, r3, #7
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4422      	add	r2, r4
 8002de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002de4:	e106      	b.n	8002ff4 <UART_SetConfig+0x4d8>
 8002de6:	bf00      	nop
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40011400 	.word	0x40011400
 8002df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e06:	4642      	mov	r2, r8
 8002e08:	464b      	mov	r3, r9
 8002e0a:	1891      	adds	r1, r2, r2
 8002e0c:	6239      	str	r1, [r7, #32]
 8002e0e:	415b      	adcs	r3, r3
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e16:	4641      	mov	r1, r8
 8002e18:	1854      	adds	r4, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb43 0501 	adc.w	r5, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	00eb      	lsls	r3, r5, #3
 8002e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2e:	00e2      	lsls	r2, r4, #3
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	4643      	mov	r3, r8
 8002e36:	18e3      	adds	r3, r4, r3
 8002e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	eb45 0303 	adc.w	r3, r5, r3
 8002e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e62:	4629      	mov	r1, r5
 8002e64:	008b      	lsls	r3, r1, #2
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	008a      	lsls	r2, r1, #2
 8002e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e74:	f7fd fa24 	bl	80002c0 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <UART_SetConfig+0x4e4>)
 8002e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	011c      	lsls	r4, r3, #4
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	1891      	adds	r1, r2, r2
 8002e9e:	61b9      	str	r1, [r7, #24]
 8002ea0:	415b      	adcs	r3, r3
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	1851      	adds	r1, r2, r1
 8002eac:	6139      	str	r1, [r7, #16]
 8002eae:	4649      	mov	r1, r9
 8002eb0:	414b      	adcs	r3, r1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	00cb      	lsls	r3, r1, #3
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eca:	4651      	mov	r1, sl
 8002ecc:	00ca      	lsls	r2, r1, #3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002edc:	464b      	mov	r3, r9
 8002ede:	460a      	mov	r2, r1
 8002ee0:	eb42 0303 	adc.w	r3, r2, r3
 8002ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f00:	4649      	mov	r1, r9
 8002f02:	008b      	lsls	r3, r1, #2
 8002f04:	4641      	mov	r1, r8
 8002f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	008a      	lsls	r2, r1, #2
 8002f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f12:	f7fd f9d5 	bl	80002c0 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4b38      	ldr	r3, [pc, #224]	; (8003000 <UART_SetConfig+0x4e4>)
 8002f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2264      	movs	r2, #100	; 0x64
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	1acb      	subs	r3, r1, r3
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a33      	ldr	r2, [pc, #204]	; (8003000 <UART_SetConfig+0x4e4>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3c:	441c      	add	r4, r3
 8002f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f42:	2200      	movs	r2, #0
 8002f44:	673b      	str	r3, [r7, #112]	; 0x70
 8002f46:	677a      	str	r2, [r7, #116]	; 0x74
 8002f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1891      	adds	r1, r2, r2
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	415b      	adcs	r3, r3
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	1851      	adds	r1, r2, r1
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	4649      	mov	r1, r9
 8002f64:	414b      	adcs	r3, r1
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f74:	4659      	mov	r1, fp
 8002f76:	00cb      	lsls	r3, r1, #3
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7e:	4651      	mov	r1, sl
 8002f80:	00ca      	lsls	r2, r1, #3
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	4642      	mov	r2, r8
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8e:	464b      	mov	r3, r9
 8002f90:	460a      	mov	r2, r1
 8002f92:	eb42 0303 	adc.w	r3, r2, r3
 8002f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa2:	667a      	str	r2, [r7, #100]	; 0x64
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	008b      	lsls	r3, r1, #2
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fba:	4641      	mov	r1, r8
 8002fbc:	008a      	lsls	r2, r1, #2
 8002fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fc2:	f7fd f97d 	bl	80002c0 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <UART_SetConfig+0x4e4>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	2164      	movs	r1, #100	; 0x64
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	3332      	adds	r3, #50	; 0x32
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <UART_SetConfig+0x4e4>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4422      	add	r2, r4
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003000:	51eb851f 	.word	0x51eb851f

08003004 <siprintf>:
 8003004:	b40e      	push	{r1, r2, r3}
 8003006:	b500      	push	{lr}
 8003008:	b09c      	sub	sp, #112	; 0x70
 800300a:	ab1d      	add	r3, sp, #116	; 0x74
 800300c:	9002      	str	r0, [sp, #8]
 800300e:	9006      	str	r0, [sp, #24]
 8003010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <siprintf+0x38>)
 8003016:	9107      	str	r1, [sp, #28]
 8003018:	9104      	str	r1, [sp, #16]
 800301a:	4909      	ldr	r1, [pc, #36]	; (8003040 <siprintf+0x3c>)
 800301c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003020:	9105      	str	r1, [sp, #20]
 8003022:	6800      	ldr	r0, [r0, #0]
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	a902      	add	r1, sp, #8
 8003028:	f000 f992 	bl	8003350 <_svfiprintf_r>
 800302c:	9b02      	ldr	r3, [sp, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	b01c      	add	sp, #112	; 0x70
 8003034:	f85d eb04 	ldr.w	lr, [sp], #4
 8003038:	b003      	add	sp, #12
 800303a:	4770      	bx	lr
 800303c:	20000058 	.word	0x20000058
 8003040:	ffff0208 	.word	0xffff0208

08003044 <memset>:
 8003044:	4402      	add	r2, r0
 8003046:	4603      	mov	r3, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <__errno>:
 8003054:	4b01      	ldr	r3, [pc, #4]	; (800305c <__errno+0x8>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000058 	.word	0x20000058

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4d0d      	ldr	r5, [pc, #52]	; (8003098 <__libc_init_array+0x38>)
 8003064:	4c0d      	ldr	r4, [pc, #52]	; (800309c <__libc_init_array+0x3c>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	2600      	movs	r6, #0
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	4d0b      	ldr	r5, [pc, #44]	; (80030a0 <__libc_init_array+0x40>)
 8003072:	4c0c      	ldr	r4, [pc, #48]	; (80030a4 <__libc_init_array+0x44>)
 8003074:	f000 fc6a 	bl	800394c <_init>
 8003078:	1b64      	subs	r4, r4, r5
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	2600      	movs	r6, #0
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	f855 3b04 	ldr.w	r3, [r5], #4
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	0801fca8 	.word	0x0801fca8
 800309c:	0801fca8 	.word	0x0801fca8
 80030a0:	0801fca8 	.word	0x0801fca8
 80030a4:	0801fcac 	.word	0x0801fcac

080030a8 <__retarget_lock_acquire_recursive>:
 80030a8:	4770      	bx	lr

080030aa <__retarget_lock_release_recursive>:
 80030aa:	4770      	bx	lr

080030ac <_free_r>:
 80030ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030ae:	2900      	cmp	r1, #0
 80030b0:	d044      	beq.n	800313c <_free_r+0x90>
 80030b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030b6:	9001      	str	r0, [sp, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f1a1 0404 	sub.w	r4, r1, #4
 80030be:	bfb8      	it	lt
 80030c0:	18e4      	addlt	r4, r4, r3
 80030c2:	f000 f8df 	bl	8003284 <__malloc_lock>
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <_free_r+0x94>)
 80030c8:	9801      	ldr	r0, [sp, #4]
 80030ca:	6813      	ldr	r3, [r2, #0]
 80030cc:	b933      	cbnz	r3, 80030dc <_free_r+0x30>
 80030ce:	6063      	str	r3, [r4, #4]
 80030d0:	6014      	str	r4, [r2, #0]
 80030d2:	b003      	add	sp, #12
 80030d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030d8:	f000 b8da 	b.w	8003290 <__malloc_unlock>
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d908      	bls.n	80030f2 <_free_r+0x46>
 80030e0:	6825      	ldr	r5, [r4, #0]
 80030e2:	1961      	adds	r1, r4, r5
 80030e4:	428b      	cmp	r3, r1
 80030e6:	bf01      	itttt	eq
 80030e8:	6819      	ldreq	r1, [r3, #0]
 80030ea:	685b      	ldreq	r3, [r3, #4]
 80030ec:	1949      	addeq	r1, r1, r5
 80030ee:	6021      	streq	r1, [r4, #0]
 80030f0:	e7ed      	b.n	80030ce <_free_r+0x22>
 80030f2:	461a      	mov	r2, r3
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	b10b      	cbz	r3, 80030fc <_free_r+0x50>
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d9fa      	bls.n	80030f2 <_free_r+0x46>
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	1855      	adds	r5, r2, r1
 8003100:	42a5      	cmp	r5, r4
 8003102:	d10b      	bne.n	800311c <_free_r+0x70>
 8003104:	6824      	ldr	r4, [r4, #0]
 8003106:	4421      	add	r1, r4
 8003108:	1854      	adds	r4, r2, r1
 800310a:	42a3      	cmp	r3, r4
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	d1e0      	bne.n	80030d2 <_free_r+0x26>
 8003110:	681c      	ldr	r4, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	6053      	str	r3, [r2, #4]
 8003116:	440c      	add	r4, r1
 8003118:	6014      	str	r4, [r2, #0]
 800311a:	e7da      	b.n	80030d2 <_free_r+0x26>
 800311c:	d902      	bls.n	8003124 <_free_r+0x78>
 800311e:	230c      	movs	r3, #12
 8003120:	6003      	str	r3, [r0, #0]
 8003122:	e7d6      	b.n	80030d2 <_free_r+0x26>
 8003124:	6825      	ldr	r5, [r4, #0]
 8003126:	1961      	adds	r1, r4, r5
 8003128:	428b      	cmp	r3, r1
 800312a:	bf04      	itt	eq
 800312c:	6819      	ldreq	r1, [r3, #0]
 800312e:	685b      	ldreq	r3, [r3, #4]
 8003130:	6063      	str	r3, [r4, #4]
 8003132:	bf04      	itt	eq
 8003134:	1949      	addeq	r1, r1, r5
 8003136:	6021      	streq	r1, [r4, #0]
 8003138:	6054      	str	r4, [r2, #4]
 800313a:	e7ca      	b.n	80030d2 <_free_r+0x26>
 800313c:	b003      	add	sp, #12
 800313e:	bd30      	pop	{r4, r5, pc}
 8003140:	20000314 	.word	0x20000314

08003144 <sbrk_aligned>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4e0e      	ldr	r6, [pc, #56]	; (8003180 <sbrk_aligned+0x3c>)
 8003148:	460c      	mov	r4, r1
 800314a:	6831      	ldr	r1, [r6, #0]
 800314c:	4605      	mov	r5, r0
 800314e:	b911      	cbnz	r1, 8003156 <sbrk_aligned+0x12>
 8003150:	f000 fba6 	bl	80038a0 <_sbrk_r>
 8003154:	6030      	str	r0, [r6, #0]
 8003156:	4621      	mov	r1, r4
 8003158:	4628      	mov	r0, r5
 800315a:	f000 fba1 	bl	80038a0 <_sbrk_r>
 800315e:	1c43      	adds	r3, r0, #1
 8003160:	d00a      	beq.n	8003178 <sbrk_aligned+0x34>
 8003162:	1cc4      	adds	r4, r0, #3
 8003164:	f024 0403 	bic.w	r4, r4, #3
 8003168:	42a0      	cmp	r0, r4
 800316a:	d007      	beq.n	800317c <sbrk_aligned+0x38>
 800316c:	1a21      	subs	r1, r4, r0
 800316e:	4628      	mov	r0, r5
 8003170:	f000 fb96 	bl	80038a0 <_sbrk_r>
 8003174:	3001      	adds	r0, #1
 8003176:	d101      	bne.n	800317c <sbrk_aligned+0x38>
 8003178:	f04f 34ff 	mov.w	r4, #4294967295
 800317c:	4620      	mov	r0, r4
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	20000318 	.word	0x20000318

08003184 <_malloc_r>:
 8003184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003188:	1ccd      	adds	r5, r1, #3
 800318a:	f025 0503 	bic.w	r5, r5, #3
 800318e:	3508      	adds	r5, #8
 8003190:	2d0c      	cmp	r5, #12
 8003192:	bf38      	it	cc
 8003194:	250c      	movcc	r5, #12
 8003196:	2d00      	cmp	r5, #0
 8003198:	4607      	mov	r7, r0
 800319a:	db01      	blt.n	80031a0 <_malloc_r+0x1c>
 800319c:	42a9      	cmp	r1, r5
 800319e:	d905      	bls.n	80031ac <_malloc_r+0x28>
 80031a0:	230c      	movs	r3, #12
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	2600      	movs	r6, #0
 80031a6:	4630      	mov	r0, r6
 80031a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003280 <_malloc_r+0xfc>
 80031b0:	f000 f868 	bl	8003284 <__malloc_lock>
 80031b4:	f8d8 3000 	ldr.w	r3, [r8]
 80031b8:	461c      	mov	r4, r3
 80031ba:	bb5c      	cbnz	r4, 8003214 <_malloc_r+0x90>
 80031bc:	4629      	mov	r1, r5
 80031be:	4638      	mov	r0, r7
 80031c0:	f7ff ffc0 	bl	8003144 <sbrk_aligned>
 80031c4:	1c43      	adds	r3, r0, #1
 80031c6:	4604      	mov	r4, r0
 80031c8:	d155      	bne.n	8003276 <_malloc_r+0xf2>
 80031ca:	f8d8 4000 	ldr.w	r4, [r8]
 80031ce:	4626      	mov	r6, r4
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d145      	bne.n	8003260 <_malloc_r+0xdc>
 80031d4:	2c00      	cmp	r4, #0
 80031d6:	d048      	beq.n	800326a <_malloc_r+0xe6>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	4631      	mov	r1, r6
 80031dc:	4638      	mov	r0, r7
 80031de:	eb04 0903 	add.w	r9, r4, r3
 80031e2:	f000 fb5d 	bl	80038a0 <_sbrk_r>
 80031e6:	4581      	cmp	r9, r0
 80031e8:	d13f      	bne.n	800326a <_malloc_r+0xe6>
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	1a6d      	subs	r5, r5, r1
 80031ee:	4629      	mov	r1, r5
 80031f0:	4638      	mov	r0, r7
 80031f2:	f7ff ffa7 	bl	8003144 <sbrk_aligned>
 80031f6:	3001      	adds	r0, #1
 80031f8:	d037      	beq.n	800326a <_malloc_r+0xe6>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	442b      	add	r3, r5
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	f8d8 3000 	ldr.w	r3, [r8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d038      	beq.n	800327a <_malloc_r+0xf6>
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	42a2      	cmp	r2, r4
 800320c:	d12b      	bne.n	8003266 <_malloc_r+0xe2>
 800320e:	2200      	movs	r2, #0
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e00f      	b.n	8003234 <_malloc_r+0xb0>
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	1b52      	subs	r2, r2, r5
 8003218:	d41f      	bmi.n	800325a <_malloc_r+0xd6>
 800321a:	2a0b      	cmp	r2, #11
 800321c:	d917      	bls.n	800324e <_malloc_r+0xca>
 800321e:	1961      	adds	r1, r4, r5
 8003220:	42a3      	cmp	r3, r4
 8003222:	6025      	str	r5, [r4, #0]
 8003224:	bf18      	it	ne
 8003226:	6059      	strne	r1, [r3, #4]
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	bf08      	it	eq
 800322c:	f8c8 1000 	streq.w	r1, [r8]
 8003230:	5162      	str	r2, [r4, r5]
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	4638      	mov	r0, r7
 8003236:	f104 060b 	add.w	r6, r4, #11
 800323a:	f000 f829 	bl	8003290 <__malloc_unlock>
 800323e:	f026 0607 	bic.w	r6, r6, #7
 8003242:	1d23      	adds	r3, r4, #4
 8003244:	1af2      	subs	r2, r6, r3
 8003246:	d0ae      	beq.n	80031a6 <_malloc_r+0x22>
 8003248:	1b9b      	subs	r3, r3, r6
 800324a:	50a3      	str	r3, [r4, r2]
 800324c:	e7ab      	b.n	80031a6 <_malloc_r+0x22>
 800324e:	42a3      	cmp	r3, r4
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	d1dd      	bne.n	8003210 <_malloc_r+0x8c>
 8003254:	f8c8 2000 	str.w	r2, [r8]
 8003258:	e7ec      	b.n	8003234 <_malloc_r+0xb0>
 800325a:	4623      	mov	r3, r4
 800325c:	6864      	ldr	r4, [r4, #4]
 800325e:	e7ac      	b.n	80031ba <_malloc_r+0x36>
 8003260:	4634      	mov	r4, r6
 8003262:	6876      	ldr	r6, [r6, #4]
 8003264:	e7b4      	b.n	80031d0 <_malloc_r+0x4c>
 8003266:	4613      	mov	r3, r2
 8003268:	e7cc      	b.n	8003204 <_malloc_r+0x80>
 800326a:	230c      	movs	r3, #12
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4638      	mov	r0, r7
 8003270:	f000 f80e 	bl	8003290 <__malloc_unlock>
 8003274:	e797      	b.n	80031a6 <_malloc_r+0x22>
 8003276:	6025      	str	r5, [r4, #0]
 8003278:	e7dc      	b.n	8003234 <_malloc_r+0xb0>
 800327a:	605b      	str	r3, [r3, #4]
 800327c:	deff      	udf	#255	; 0xff
 800327e:	bf00      	nop
 8003280:	20000314 	.word	0x20000314

08003284 <__malloc_lock>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__malloc_lock+0x8>)
 8003286:	f7ff bf0f 	b.w	80030a8 <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	20000310 	.word	0x20000310

08003290 <__malloc_unlock>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__malloc_unlock+0x8>)
 8003292:	f7ff bf0a 	b.w	80030aa <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	20000310 	.word	0x20000310

0800329c <__ssputs_r>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	688e      	ldr	r6, [r1, #8]
 80032a2:	461f      	mov	r7, r3
 80032a4:	42be      	cmp	r6, r7
 80032a6:	680b      	ldr	r3, [r1, #0]
 80032a8:	4682      	mov	sl, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	4690      	mov	r8, r2
 80032ae:	d82c      	bhi.n	800330a <__ssputs_r+0x6e>
 80032b0:	898a      	ldrh	r2, [r1, #12]
 80032b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032b6:	d026      	beq.n	8003306 <__ssputs_r+0x6a>
 80032b8:	6965      	ldr	r5, [r4, #20]
 80032ba:	6909      	ldr	r1, [r1, #16]
 80032bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032c0:	eba3 0901 	sub.w	r9, r3, r1
 80032c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032c8:	1c7b      	adds	r3, r7, #1
 80032ca:	444b      	add	r3, r9
 80032cc:	106d      	asrs	r5, r5, #1
 80032ce:	429d      	cmp	r5, r3
 80032d0:	bf38      	it	cc
 80032d2:	461d      	movcc	r5, r3
 80032d4:	0553      	lsls	r3, r2, #21
 80032d6:	d527      	bpl.n	8003328 <__ssputs_r+0x8c>
 80032d8:	4629      	mov	r1, r5
 80032da:	f7ff ff53 	bl	8003184 <_malloc_r>
 80032de:	4606      	mov	r6, r0
 80032e0:	b360      	cbz	r0, 800333c <__ssputs_r+0xa0>
 80032e2:	6921      	ldr	r1, [r4, #16]
 80032e4:	464a      	mov	r2, r9
 80032e6:	f000 faeb 	bl	80038c0 <memcpy>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	81a3      	strh	r3, [r4, #12]
 80032f6:	6126      	str	r6, [r4, #16]
 80032f8:	6165      	str	r5, [r4, #20]
 80032fa:	444e      	add	r6, r9
 80032fc:	eba5 0509 	sub.w	r5, r5, r9
 8003300:	6026      	str	r6, [r4, #0]
 8003302:	60a5      	str	r5, [r4, #8]
 8003304:	463e      	mov	r6, r7
 8003306:	42be      	cmp	r6, r7
 8003308:	d900      	bls.n	800330c <__ssputs_r+0x70>
 800330a:	463e      	mov	r6, r7
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	4632      	mov	r2, r6
 8003310:	4641      	mov	r1, r8
 8003312:	f000 faab 	bl	800386c <memmove>
 8003316:	68a3      	ldr	r3, [r4, #8]
 8003318:	1b9b      	subs	r3, r3, r6
 800331a:	60a3      	str	r3, [r4, #8]
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	4433      	add	r3, r6
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	2000      	movs	r0, #0
 8003324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003328:	462a      	mov	r2, r5
 800332a:	f000 fad7 	bl	80038dc <_realloc_r>
 800332e:	4606      	mov	r6, r0
 8003330:	2800      	cmp	r0, #0
 8003332:	d1e0      	bne.n	80032f6 <__ssputs_r+0x5a>
 8003334:	6921      	ldr	r1, [r4, #16]
 8003336:	4650      	mov	r0, sl
 8003338:	f7ff feb8 	bl	80030ac <_free_r>
 800333c:	230c      	movs	r3, #12
 800333e:	f8ca 3000 	str.w	r3, [sl]
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	f04f 30ff 	mov.w	r0, #4294967295
 800334e:	e7e9      	b.n	8003324 <__ssputs_r+0x88>

08003350 <_svfiprintf_r>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	4698      	mov	r8, r3
 8003356:	898b      	ldrh	r3, [r1, #12]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	b09d      	sub	sp, #116	; 0x74
 800335c:	4607      	mov	r7, r0
 800335e:	460d      	mov	r5, r1
 8003360:	4614      	mov	r4, r2
 8003362:	d50e      	bpl.n	8003382 <_svfiprintf_r+0x32>
 8003364:	690b      	ldr	r3, [r1, #16]
 8003366:	b963      	cbnz	r3, 8003382 <_svfiprintf_r+0x32>
 8003368:	2140      	movs	r1, #64	; 0x40
 800336a:	f7ff ff0b 	bl	8003184 <_malloc_r>
 800336e:	6028      	str	r0, [r5, #0]
 8003370:	6128      	str	r0, [r5, #16]
 8003372:	b920      	cbnz	r0, 800337e <_svfiprintf_r+0x2e>
 8003374:	230c      	movs	r3, #12
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	e0d0      	b.n	8003520 <_svfiprintf_r+0x1d0>
 800337e:	2340      	movs	r3, #64	; 0x40
 8003380:	616b      	str	r3, [r5, #20]
 8003382:	2300      	movs	r3, #0
 8003384:	9309      	str	r3, [sp, #36]	; 0x24
 8003386:	2320      	movs	r3, #32
 8003388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800338c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003390:	2330      	movs	r3, #48	; 0x30
 8003392:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003538 <_svfiprintf_r+0x1e8>
 8003396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800339a:	f04f 0901 	mov.w	r9, #1
 800339e:	4623      	mov	r3, r4
 80033a0:	469a      	mov	sl, r3
 80033a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033a6:	b10a      	cbz	r2, 80033ac <_svfiprintf_r+0x5c>
 80033a8:	2a25      	cmp	r2, #37	; 0x25
 80033aa:	d1f9      	bne.n	80033a0 <_svfiprintf_r+0x50>
 80033ac:	ebba 0b04 	subs.w	fp, sl, r4
 80033b0:	d00b      	beq.n	80033ca <_svfiprintf_r+0x7a>
 80033b2:	465b      	mov	r3, fp
 80033b4:	4622      	mov	r2, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	4638      	mov	r0, r7
 80033ba:	f7ff ff6f 	bl	800329c <__ssputs_r>
 80033be:	3001      	adds	r0, #1
 80033c0:	f000 80a9 	beq.w	8003516 <_svfiprintf_r+0x1c6>
 80033c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033c6:	445a      	add	r2, fp
 80033c8:	9209      	str	r2, [sp, #36]	; 0x24
 80033ca:	f89a 3000 	ldrb.w	r3, [sl]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a1 	beq.w	8003516 <_svfiprintf_r+0x1c6>
 80033d4:	2300      	movs	r3, #0
 80033d6:	f04f 32ff 	mov.w	r2, #4294967295
 80033da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033de:	f10a 0a01 	add.w	sl, sl, #1
 80033e2:	9304      	str	r3, [sp, #16]
 80033e4:	9307      	str	r3, [sp, #28]
 80033e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ea:	931a      	str	r3, [sp, #104]	; 0x68
 80033ec:	4654      	mov	r4, sl
 80033ee:	2205      	movs	r2, #5
 80033f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f4:	4850      	ldr	r0, [pc, #320]	; (8003538 <_svfiprintf_r+0x1e8>)
 80033f6:	f7fc ff13 	bl	8000220 <memchr>
 80033fa:	9a04      	ldr	r2, [sp, #16]
 80033fc:	b9d8      	cbnz	r0, 8003436 <_svfiprintf_r+0xe6>
 80033fe:	06d0      	lsls	r0, r2, #27
 8003400:	bf44      	itt	mi
 8003402:	2320      	movmi	r3, #32
 8003404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003408:	0711      	lsls	r1, r2, #28
 800340a:	bf44      	itt	mi
 800340c:	232b      	movmi	r3, #43	; 0x2b
 800340e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003412:	f89a 3000 	ldrb.w	r3, [sl]
 8003416:	2b2a      	cmp	r3, #42	; 0x2a
 8003418:	d015      	beq.n	8003446 <_svfiprintf_r+0xf6>
 800341a:	9a07      	ldr	r2, [sp, #28]
 800341c:	4654      	mov	r4, sl
 800341e:	2000      	movs	r0, #0
 8003420:	f04f 0c0a 	mov.w	ip, #10
 8003424:	4621      	mov	r1, r4
 8003426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800342a:	3b30      	subs	r3, #48	; 0x30
 800342c:	2b09      	cmp	r3, #9
 800342e:	d94d      	bls.n	80034cc <_svfiprintf_r+0x17c>
 8003430:	b1b0      	cbz	r0, 8003460 <_svfiprintf_r+0x110>
 8003432:	9207      	str	r2, [sp, #28]
 8003434:	e014      	b.n	8003460 <_svfiprintf_r+0x110>
 8003436:	eba0 0308 	sub.w	r3, r0, r8
 800343a:	fa09 f303 	lsl.w	r3, r9, r3
 800343e:	4313      	orrs	r3, r2
 8003440:	9304      	str	r3, [sp, #16]
 8003442:	46a2      	mov	sl, r4
 8003444:	e7d2      	b.n	80033ec <_svfiprintf_r+0x9c>
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	1d19      	adds	r1, r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	9103      	str	r1, [sp, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	bfbb      	ittet	lt
 8003452:	425b      	neglt	r3, r3
 8003454:	f042 0202 	orrlt.w	r2, r2, #2
 8003458:	9307      	strge	r3, [sp, #28]
 800345a:	9307      	strlt	r3, [sp, #28]
 800345c:	bfb8      	it	lt
 800345e:	9204      	strlt	r2, [sp, #16]
 8003460:	7823      	ldrb	r3, [r4, #0]
 8003462:	2b2e      	cmp	r3, #46	; 0x2e
 8003464:	d10c      	bne.n	8003480 <_svfiprintf_r+0x130>
 8003466:	7863      	ldrb	r3, [r4, #1]
 8003468:	2b2a      	cmp	r3, #42	; 0x2a
 800346a:	d134      	bne.n	80034d6 <_svfiprintf_r+0x186>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	1d1a      	adds	r2, r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	9203      	str	r2, [sp, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	bfb8      	it	lt
 8003478:	f04f 33ff 	movlt.w	r3, #4294967295
 800347c:	3402      	adds	r4, #2
 800347e:	9305      	str	r3, [sp, #20]
 8003480:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003548 <_svfiprintf_r+0x1f8>
 8003484:	7821      	ldrb	r1, [r4, #0]
 8003486:	2203      	movs	r2, #3
 8003488:	4650      	mov	r0, sl
 800348a:	f7fc fec9 	bl	8000220 <memchr>
 800348e:	b138      	cbz	r0, 80034a0 <_svfiprintf_r+0x150>
 8003490:	9b04      	ldr	r3, [sp, #16]
 8003492:	eba0 000a 	sub.w	r0, r0, sl
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	4082      	lsls	r2, r0
 800349a:	4313      	orrs	r3, r2
 800349c:	3401      	adds	r4, #1
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a4:	4825      	ldr	r0, [pc, #148]	; (800353c <_svfiprintf_r+0x1ec>)
 80034a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034aa:	2206      	movs	r2, #6
 80034ac:	f7fc feb8 	bl	8000220 <memchr>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d038      	beq.n	8003526 <_svfiprintf_r+0x1d6>
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <_svfiprintf_r+0x1f0>)
 80034b6:	bb1b      	cbnz	r3, 8003500 <_svfiprintf_r+0x1b0>
 80034b8:	9b03      	ldr	r3, [sp, #12]
 80034ba:	3307      	adds	r3, #7
 80034bc:	f023 0307 	bic.w	r3, r3, #7
 80034c0:	3308      	adds	r3, #8
 80034c2:	9303      	str	r3, [sp, #12]
 80034c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c6:	4433      	add	r3, r6
 80034c8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ca:	e768      	b.n	800339e <_svfiprintf_r+0x4e>
 80034cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d0:	460c      	mov	r4, r1
 80034d2:	2001      	movs	r0, #1
 80034d4:	e7a6      	b.n	8003424 <_svfiprintf_r+0xd4>
 80034d6:	2300      	movs	r3, #0
 80034d8:	3401      	adds	r4, #1
 80034da:	9305      	str	r3, [sp, #20]
 80034dc:	4619      	mov	r1, r3
 80034de:	f04f 0c0a 	mov.w	ip, #10
 80034e2:	4620      	mov	r0, r4
 80034e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e8:	3a30      	subs	r2, #48	; 0x30
 80034ea:	2a09      	cmp	r2, #9
 80034ec:	d903      	bls.n	80034f6 <_svfiprintf_r+0x1a6>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0c6      	beq.n	8003480 <_svfiprintf_r+0x130>
 80034f2:	9105      	str	r1, [sp, #20]
 80034f4:	e7c4      	b.n	8003480 <_svfiprintf_r+0x130>
 80034f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80034fa:	4604      	mov	r4, r0
 80034fc:	2301      	movs	r3, #1
 80034fe:	e7f0      	b.n	80034e2 <_svfiprintf_r+0x192>
 8003500:	ab03      	add	r3, sp, #12
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	462a      	mov	r2, r5
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <_svfiprintf_r+0x1f4>)
 8003508:	a904      	add	r1, sp, #16
 800350a:	4638      	mov	r0, r7
 800350c:	f3af 8000 	nop.w
 8003510:	1c42      	adds	r2, r0, #1
 8003512:	4606      	mov	r6, r0
 8003514:	d1d6      	bne.n	80034c4 <_svfiprintf_r+0x174>
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	065b      	lsls	r3, r3, #25
 800351a:	f53f af2d 	bmi.w	8003378 <_svfiprintf_r+0x28>
 800351e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003520:	b01d      	add	sp, #116	; 0x74
 8003522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003526:	ab03      	add	r3, sp, #12
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	462a      	mov	r2, r5
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <_svfiprintf_r+0x1f4>)
 800352e:	a904      	add	r1, sp, #16
 8003530:	4638      	mov	r0, r7
 8003532:	f000 f879 	bl	8003628 <_printf_i>
 8003536:	e7eb      	b.n	8003510 <_svfiprintf_r+0x1c0>
 8003538:	0801fc6c 	.word	0x0801fc6c
 800353c:	0801fc76 	.word	0x0801fc76
 8003540:	00000000 	.word	0x00000000
 8003544:	0800329d 	.word	0x0800329d
 8003548:	0801fc72 	.word	0x0801fc72

0800354c <_printf_common>:
 800354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	4616      	mov	r6, r2
 8003552:	4699      	mov	r9, r3
 8003554:	688a      	ldr	r2, [r1, #8]
 8003556:	690b      	ldr	r3, [r1, #16]
 8003558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800355c:	4293      	cmp	r3, r2
 800355e:	bfb8      	it	lt
 8003560:	4613      	movlt	r3, r2
 8003562:	6033      	str	r3, [r6, #0]
 8003564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003568:	4607      	mov	r7, r0
 800356a:	460c      	mov	r4, r1
 800356c:	b10a      	cbz	r2, 8003572 <_printf_common+0x26>
 800356e:	3301      	adds	r3, #1
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	0699      	lsls	r1, r3, #26
 8003576:	bf42      	ittt	mi
 8003578:	6833      	ldrmi	r3, [r6, #0]
 800357a:	3302      	addmi	r3, #2
 800357c:	6033      	strmi	r3, [r6, #0]
 800357e:	6825      	ldr	r5, [r4, #0]
 8003580:	f015 0506 	ands.w	r5, r5, #6
 8003584:	d106      	bne.n	8003594 <_printf_common+0x48>
 8003586:	f104 0a19 	add.w	sl, r4, #25
 800358a:	68e3      	ldr	r3, [r4, #12]
 800358c:	6832      	ldr	r2, [r6, #0]
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	42ab      	cmp	r3, r5
 8003592:	dc26      	bgt.n	80035e2 <_printf_common+0x96>
 8003594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003598:	1e13      	subs	r3, r2, #0
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	bf18      	it	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	0692      	lsls	r2, r2, #26
 80035a2:	d42b      	bmi.n	80035fc <_printf_common+0xb0>
 80035a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035a8:	4649      	mov	r1, r9
 80035aa:	4638      	mov	r0, r7
 80035ac:	47c0      	blx	r8
 80035ae:	3001      	adds	r0, #1
 80035b0:	d01e      	beq.n	80035f0 <_printf_common+0xa4>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	6922      	ldr	r2, [r4, #16]
 80035b6:	f003 0306 	and.w	r3, r3, #6
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf02      	ittt	eq
 80035be:	68e5      	ldreq	r5, [r4, #12]
 80035c0:	6833      	ldreq	r3, [r6, #0]
 80035c2:	1aed      	subeq	r5, r5, r3
 80035c4:	68a3      	ldr	r3, [r4, #8]
 80035c6:	bf0c      	ite	eq
 80035c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035cc:	2500      	movne	r5, #0
 80035ce:	4293      	cmp	r3, r2
 80035d0:	bfc4      	itt	gt
 80035d2:	1a9b      	subgt	r3, r3, r2
 80035d4:	18ed      	addgt	r5, r5, r3
 80035d6:	2600      	movs	r6, #0
 80035d8:	341a      	adds	r4, #26
 80035da:	42b5      	cmp	r5, r6
 80035dc:	d11a      	bne.n	8003614 <_printf_common+0xc8>
 80035de:	2000      	movs	r0, #0
 80035e0:	e008      	b.n	80035f4 <_printf_common+0xa8>
 80035e2:	2301      	movs	r3, #1
 80035e4:	4652      	mov	r2, sl
 80035e6:	4649      	mov	r1, r9
 80035e8:	4638      	mov	r0, r7
 80035ea:	47c0      	blx	r8
 80035ec:	3001      	adds	r0, #1
 80035ee:	d103      	bne.n	80035f8 <_printf_common+0xac>
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f8:	3501      	adds	r5, #1
 80035fa:	e7c6      	b.n	800358a <_printf_common+0x3e>
 80035fc:	18e1      	adds	r1, r4, r3
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	2030      	movs	r0, #48	; 0x30
 8003602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003606:	4422      	add	r2, r4
 8003608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800360c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003610:	3302      	adds	r3, #2
 8003612:	e7c7      	b.n	80035a4 <_printf_common+0x58>
 8003614:	2301      	movs	r3, #1
 8003616:	4622      	mov	r2, r4
 8003618:	4649      	mov	r1, r9
 800361a:	4638      	mov	r0, r7
 800361c:	47c0      	blx	r8
 800361e:	3001      	adds	r0, #1
 8003620:	d0e6      	beq.n	80035f0 <_printf_common+0xa4>
 8003622:	3601      	adds	r6, #1
 8003624:	e7d9      	b.n	80035da <_printf_common+0x8e>
	...

08003628 <_printf_i>:
 8003628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	7e0f      	ldrb	r7, [r1, #24]
 800362e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003630:	2f78      	cmp	r7, #120	; 0x78
 8003632:	4691      	mov	r9, r2
 8003634:	4680      	mov	r8, r0
 8003636:	460c      	mov	r4, r1
 8003638:	469a      	mov	sl, r3
 800363a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800363e:	d807      	bhi.n	8003650 <_printf_i+0x28>
 8003640:	2f62      	cmp	r7, #98	; 0x62
 8003642:	d80a      	bhi.n	800365a <_printf_i+0x32>
 8003644:	2f00      	cmp	r7, #0
 8003646:	f000 80d4 	beq.w	80037f2 <_printf_i+0x1ca>
 800364a:	2f58      	cmp	r7, #88	; 0x58
 800364c:	f000 80c0 	beq.w	80037d0 <_printf_i+0x1a8>
 8003650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003658:	e03a      	b.n	80036d0 <_printf_i+0xa8>
 800365a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800365e:	2b15      	cmp	r3, #21
 8003660:	d8f6      	bhi.n	8003650 <_printf_i+0x28>
 8003662:	a101      	add	r1, pc, #4	; (adr r1, 8003668 <_printf_i+0x40>)
 8003664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003668:	080036c1 	.word	0x080036c1
 800366c:	080036d5 	.word	0x080036d5
 8003670:	08003651 	.word	0x08003651
 8003674:	08003651 	.word	0x08003651
 8003678:	08003651 	.word	0x08003651
 800367c:	08003651 	.word	0x08003651
 8003680:	080036d5 	.word	0x080036d5
 8003684:	08003651 	.word	0x08003651
 8003688:	08003651 	.word	0x08003651
 800368c:	08003651 	.word	0x08003651
 8003690:	08003651 	.word	0x08003651
 8003694:	080037d9 	.word	0x080037d9
 8003698:	08003701 	.word	0x08003701
 800369c:	08003793 	.word	0x08003793
 80036a0:	08003651 	.word	0x08003651
 80036a4:	08003651 	.word	0x08003651
 80036a8:	080037fb 	.word	0x080037fb
 80036ac:	08003651 	.word	0x08003651
 80036b0:	08003701 	.word	0x08003701
 80036b4:	08003651 	.word	0x08003651
 80036b8:	08003651 	.word	0x08003651
 80036bc:	0800379b 	.word	0x0800379b
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	602a      	str	r2, [r5, #0]
 80036c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036d0:	2301      	movs	r3, #1
 80036d2:	e09f      	b.n	8003814 <_printf_i+0x1ec>
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	682b      	ldr	r3, [r5, #0]
 80036d8:	0607      	lsls	r7, r0, #24
 80036da:	f103 0104 	add.w	r1, r3, #4
 80036de:	6029      	str	r1, [r5, #0]
 80036e0:	d501      	bpl.n	80036e6 <_printf_i+0xbe>
 80036e2:	681e      	ldr	r6, [r3, #0]
 80036e4:	e003      	b.n	80036ee <_printf_i+0xc6>
 80036e6:	0646      	lsls	r6, r0, #25
 80036e8:	d5fb      	bpl.n	80036e2 <_printf_i+0xba>
 80036ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036ee:	2e00      	cmp	r6, #0
 80036f0:	da03      	bge.n	80036fa <_printf_i+0xd2>
 80036f2:	232d      	movs	r3, #45	; 0x2d
 80036f4:	4276      	negs	r6, r6
 80036f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036fa:	485a      	ldr	r0, [pc, #360]	; (8003864 <_printf_i+0x23c>)
 80036fc:	230a      	movs	r3, #10
 80036fe:	e012      	b.n	8003726 <_printf_i+0xfe>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	1d19      	adds	r1, r3, #4
 8003706:	6029      	str	r1, [r5, #0]
 8003708:	0605      	lsls	r5, r0, #24
 800370a:	d501      	bpl.n	8003710 <_printf_i+0xe8>
 800370c:	681e      	ldr	r6, [r3, #0]
 800370e:	e002      	b.n	8003716 <_printf_i+0xee>
 8003710:	0641      	lsls	r1, r0, #25
 8003712:	d5fb      	bpl.n	800370c <_printf_i+0xe4>
 8003714:	881e      	ldrh	r6, [r3, #0]
 8003716:	4853      	ldr	r0, [pc, #332]	; (8003864 <_printf_i+0x23c>)
 8003718:	2f6f      	cmp	r7, #111	; 0x6f
 800371a:	bf0c      	ite	eq
 800371c:	2308      	moveq	r3, #8
 800371e:	230a      	movne	r3, #10
 8003720:	2100      	movs	r1, #0
 8003722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003726:	6865      	ldr	r5, [r4, #4]
 8003728:	60a5      	str	r5, [r4, #8]
 800372a:	2d00      	cmp	r5, #0
 800372c:	bfa2      	ittt	ge
 800372e:	6821      	ldrge	r1, [r4, #0]
 8003730:	f021 0104 	bicge.w	r1, r1, #4
 8003734:	6021      	strge	r1, [r4, #0]
 8003736:	b90e      	cbnz	r6, 800373c <_printf_i+0x114>
 8003738:	2d00      	cmp	r5, #0
 800373a:	d04b      	beq.n	80037d4 <_printf_i+0x1ac>
 800373c:	4615      	mov	r5, r2
 800373e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003742:	fb03 6711 	mls	r7, r3, r1, r6
 8003746:	5dc7      	ldrb	r7, [r0, r7]
 8003748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800374c:	4637      	mov	r7, r6
 800374e:	42bb      	cmp	r3, r7
 8003750:	460e      	mov	r6, r1
 8003752:	d9f4      	bls.n	800373e <_printf_i+0x116>
 8003754:	2b08      	cmp	r3, #8
 8003756:	d10b      	bne.n	8003770 <_printf_i+0x148>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	07de      	lsls	r6, r3, #31
 800375c:	d508      	bpl.n	8003770 <_printf_i+0x148>
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	6861      	ldr	r1, [r4, #4]
 8003762:	4299      	cmp	r1, r3
 8003764:	bfde      	ittt	le
 8003766:	2330      	movle	r3, #48	; 0x30
 8003768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800376c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003770:	1b52      	subs	r2, r2, r5
 8003772:	6122      	str	r2, [r4, #16]
 8003774:	f8cd a000 	str.w	sl, [sp]
 8003778:	464b      	mov	r3, r9
 800377a:	aa03      	add	r2, sp, #12
 800377c:	4621      	mov	r1, r4
 800377e:	4640      	mov	r0, r8
 8003780:	f7ff fee4 	bl	800354c <_printf_common>
 8003784:	3001      	adds	r0, #1
 8003786:	d14a      	bne.n	800381e <_printf_i+0x1f6>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	b004      	add	sp, #16
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	4833      	ldr	r0, [pc, #204]	; (8003868 <_printf_i+0x240>)
 800379c:	2778      	movs	r7, #120	; 0x78
 800379e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	6829      	ldr	r1, [r5, #0]
 80037a6:	061f      	lsls	r7, r3, #24
 80037a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ac:	d402      	bmi.n	80037b4 <_printf_i+0x18c>
 80037ae:	065f      	lsls	r7, r3, #25
 80037b0:	bf48      	it	mi
 80037b2:	b2b6      	uxthmi	r6, r6
 80037b4:	07df      	lsls	r7, r3, #31
 80037b6:	bf48      	it	mi
 80037b8:	f043 0320 	orrmi.w	r3, r3, #32
 80037bc:	6029      	str	r1, [r5, #0]
 80037be:	bf48      	it	mi
 80037c0:	6023      	strmi	r3, [r4, #0]
 80037c2:	b91e      	cbnz	r6, 80037cc <_printf_i+0x1a4>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	f023 0320 	bic.w	r3, r3, #32
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	2310      	movs	r3, #16
 80037ce:	e7a7      	b.n	8003720 <_printf_i+0xf8>
 80037d0:	4824      	ldr	r0, [pc, #144]	; (8003864 <_printf_i+0x23c>)
 80037d2:	e7e4      	b.n	800379e <_printf_i+0x176>
 80037d4:	4615      	mov	r5, r2
 80037d6:	e7bd      	b.n	8003754 <_printf_i+0x12c>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	6826      	ldr	r6, [r4, #0]
 80037dc:	6961      	ldr	r1, [r4, #20]
 80037de:	1d18      	adds	r0, r3, #4
 80037e0:	6028      	str	r0, [r5, #0]
 80037e2:	0635      	lsls	r5, r6, #24
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0x1c4>
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <_printf_i+0x1ca>
 80037ec:	0670      	lsls	r0, r6, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0x1c0>
 80037f0:	8019      	strh	r1, [r3, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	4615      	mov	r5, r2
 80037f8:	e7bc      	b.n	8003774 <_printf_i+0x14c>
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	1d1a      	adds	r2, r3, #4
 80037fe:	602a      	str	r2, [r5, #0]
 8003800:	681d      	ldr	r5, [r3, #0]
 8003802:	6862      	ldr	r2, [r4, #4]
 8003804:	2100      	movs	r1, #0
 8003806:	4628      	mov	r0, r5
 8003808:	f7fc fd0a 	bl	8000220 <memchr>
 800380c:	b108      	cbz	r0, 8003812 <_printf_i+0x1ea>
 800380e:	1b40      	subs	r0, r0, r5
 8003810:	6060      	str	r0, [r4, #4]
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	2300      	movs	r3, #0
 8003818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800381c:	e7aa      	b.n	8003774 <_printf_i+0x14c>
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	462a      	mov	r2, r5
 8003822:	4649      	mov	r1, r9
 8003824:	4640      	mov	r0, r8
 8003826:	47d0      	blx	sl
 8003828:	3001      	adds	r0, #1
 800382a:	d0ad      	beq.n	8003788 <_printf_i+0x160>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	079b      	lsls	r3, r3, #30
 8003830:	d413      	bmi.n	800385a <_printf_i+0x232>
 8003832:	68e0      	ldr	r0, [r4, #12]
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	4298      	cmp	r0, r3
 8003838:	bfb8      	it	lt
 800383a:	4618      	movlt	r0, r3
 800383c:	e7a6      	b.n	800378c <_printf_i+0x164>
 800383e:	2301      	movs	r3, #1
 8003840:	4632      	mov	r2, r6
 8003842:	4649      	mov	r1, r9
 8003844:	4640      	mov	r0, r8
 8003846:	47d0      	blx	sl
 8003848:	3001      	adds	r0, #1
 800384a:	d09d      	beq.n	8003788 <_printf_i+0x160>
 800384c:	3501      	adds	r5, #1
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	9903      	ldr	r1, [sp, #12]
 8003852:	1a5b      	subs	r3, r3, r1
 8003854:	42ab      	cmp	r3, r5
 8003856:	dcf2      	bgt.n	800383e <_printf_i+0x216>
 8003858:	e7eb      	b.n	8003832 <_printf_i+0x20a>
 800385a:	2500      	movs	r5, #0
 800385c:	f104 0619 	add.w	r6, r4, #25
 8003860:	e7f5      	b.n	800384e <_printf_i+0x226>
 8003862:	bf00      	nop
 8003864:	0801fc7d 	.word	0x0801fc7d
 8003868:	0801fc8e 	.word	0x0801fc8e

0800386c <memmove>:
 800386c:	4288      	cmp	r0, r1
 800386e:	b510      	push	{r4, lr}
 8003870:	eb01 0402 	add.w	r4, r1, r2
 8003874:	d902      	bls.n	800387c <memmove+0x10>
 8003876:	4284      	cmp	r4, r0
 8003878:	4623      	mov	r3, r4
 800387a:	d807      	bhi.n	800388c <memmove+0x20>
 800387c:	1e43      	subs	r3, r0, #1
 800387e:	42a1      	cmp	r1, r4
 8003880:	d008      	beq.n	8003894 <memmove+0x28>
 8003882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800388a:	e7f8      	b.n	800387e <memmove+0x12>
 800388c:	4402      	add	r2, r0
 800388e:	4601      	mov	r1, r0
 8003890:	428a      	cmp	r2, r1
 8003892:	d100      	bne.n	8003896 <memmove+0x2a>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800389a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800389e:	e7f7      	b.n	8003890 <memmove+0x24>

080038a0 <_sbrk_r>:
 80038a0:	b538      	push	{r3, r4, r5, lr}
 80038a2:	4d06      	ldr	r5, [pc, #24]	; (80038bc <_sbrk_r+0x1c>)
 80038a4:	2300      	movs	r3, #0
 80038a6:	4604      	mov	r4, r0
 80038a8:	4608      	mov	r0, r1
 80038aa:	602b      	str	r3, [r5, #0]
 80038ac:	f7fd fbf8 	bl	80010a0 <_sbrk>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_sbrk_r+0x1a>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_sbrk_r+0x1a>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	2000030c 	.word	0x2000030c

080038c0 <memcpy>:
 80038c0:	440a      	add	r2, r1
 80038c2:	4291      	cmp	r1, r2
 80038c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038c8:	d100      	bne.n	80038cc <memcpy+0xc>
 80038ca:	4770      	bx	lr
 80038cc:	b510      	push	{r4, lr}
 80038ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038d6:	4291      	cmp	r1, r2
 80038d8:	d1f9      	bne.n	80038ce <memcpy+0xe>
 80038da:	bd10      	pop	{r4, pc}

080038dc <_realloc_r>:
 80038dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e0:	4680      	mov	r8, r0
 80038e2:	4614      	mov	r4, r2
 80038e4:	460e      	mov	r6, r1
 80038e6:	b921      	cbnz	r1, 80038f2 <_realloc_r+0x16>
 80038e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ec:	4611      	mov	r1, r2
 80038ee:	f7ff bc49 	b.w	8003184 <_malloc_r>
 80038f2:	b92a      	cbnz	r2, 8003900 <_realloc_r+0x24>
 80038f4:	f7ff fbda 	bl	80030ac <_free_r>
 80038f8:	4625      	mov	r5, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003900:	f000 f81b 	bl	800393a <_malloc_usable_size_r>
 8003904:	4284      	cmp	r4, r0
 8003906:	4607      	mov	r7, r0
 8003908:	d802      	bhi.n	8003910 <_realloc_r+0x34>
 800390a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800390e:	d812      	bhi.n	8003936 <_realloc_r+0x5a>
 8003910:	4621      	mov	r1, r4
 8003912:	4640      	mov	r0, r8
 8003914:	f7ff fc36 	bl	8003184 <_malloc_r>
 8003918:	4605      	mov	r5, r0
 800391a:	2800      	cmp	r0, #0
 800391c:	d0ed      	beq.n	80038fa <_realloc_r+0x1e>
 800391e:	42bc      	cmp	r4, r7
 8003920:	4622      	mov	r2, r4
 8003922:	4631      	mov	r1, r6
 8003924:	bf28      	it	cs
 8003926:	463a      	movcs	r2, r7
 8003928:	f7ff ffca 	bl	80038c0 <memcpy>
 800392c:	4631      	mov	r1, r6
 800392e:	4640      	mov	r0, r8
 8003930:	f7ff fbbc 	bl	80030ac <_free_r>
 8003934:	e7e1      	b.n	80038fa <_realloc_r+0x1e>
 8003936:	4635      	mov	r5, r6
 8003938:	e7df      	b.n	80038fa <_realloc_r+0x1e>

0800393a <_malloc_usable_size_r>:
 800393a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800393e:	1f18      	subs	r0, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	bfbc      	itt	lt
 8003944:	580b      	ldrlt	r3, [r1, r0]
 8003946:	18c0      	addlt	r0, r0, r3
 8003948:	4770      	bx	lr
	...

0800394c <_init>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	bf00      	nop
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr

08003958 <_fini>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr
